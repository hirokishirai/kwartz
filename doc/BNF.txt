
  ### $Id$

  ###
  ### Notice: this is imcomprete.
  ###
  

  ###
  ### expression
  ###

  arguments    ::=  expression | arguments ',' expression | e
               ::=  [ expression { ',' expression } ]
 
  item         ::=  variable | function '(' arguments ')' | '(' expression ')'
 
  literal      ::=  numeric | string | 'true' | 'false' | 'null' | 'empty'
 
  factor       ::=  literal | item | item '[' expression ']' | item '[:' name ']' | item '.' property
 
  unary        ::=  factor | '+' factor | '-' factor | '!' factor
               ::=  [ '+' | '-' | '!' ] factor
 
  term         ::=  unary | term * factor | term '/' factor | term '%' factor
               ::=  unary { ('*' | '/' | '%') factor }
 
  arith        ::=  arith | arith '+' term | arith '-' term | arith '.+' term
               ::=  arith { ('+' | '-' | '.+') term }
 
  compare-op   ::=  '==' |  '!=' |  '>' |  '>=' |  '<' |  '<='
  compare      ::=  arith | arith compare-op arith | arith '==' 'empty' | arith '!=' 'empty'
               ::=  arith [ compare-op arith ] | arith ('==' | '!=') 'empty'
 
  logical-and  ::=  compare | logical-and '&&' compare
               ::=  compare { '&&' compare }
 
  logical-or   ::=  logical-and | logical-or '||' logical-and
               ::=  logical-and { '||' logical-and }
 
  conditional  ::=  logical-or | logical-or '?' expression ':' conditional
               ::=  logical-or [ '?' expression ':' conditional ]
 
  assign-op    ::=  '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '.+='
  assignment   ::=  conditional | assign-op assignment
               ::=  conditional 
 
  expression   ::=  assignment





  ###
  ### statement
  ###
  
  print-stmt   ::=  'print' '(' arguments ')' ';'
  
  expr-stmt    ::=  expression ';'
  
  block-stmt   ::=  '{'
  
  elseif-part  ::=  'elseif' '(' expression ')' statement elseif-part | e
  
  if-stmt      ::=  'if' '(' expression ')' statement
                  | 'if' '(' expression ')' statement elseif-part
                  | 'if' '(' expression ')' statement elseif-part 'else' statement
               ::=  'if' '(' expression ')' statement
                    { 'elseif' '(' expression ')' statement }
                    [ 'else' statement ]

  foreach-stmt ::=  'foreach' '(' variable 'in' expression ')' statement
  
  while-stmt   ::=  'while' '(' expression ')' statement

  stmt-list    ::=  statement | stmt-list statement
               ::=  statement { statement }

  block-stmt   ::=  '{' '}' | '{' stmt-list '}'

  statement    ::=  print-stmt | expr-stmt | if-stmt | foreach-stmt | while-stmt | block-stmt | ';'



  ##
  ## presentation logic declaration
  ##
  
  presentation-logic ::= { element-decl }
  
  element-decl ::=  'element' name '{' [ decl-list ] '}'
  
  decl-list    ::=  declaration | decl-list declaration
  
  declaration  ::=  value-decl | attr-decl | remove-decl | append-decl | tagname-decl | plogic-decl
  
  value-decl   ::=  'value:' [ expression ] ';'
  
  attr-decl    ::=  'attr:' [ string '=>' expression { ',' string '=>' expression } ] ';'
  
  remove-decl  ::=  'remove:' [ string { ',' string } ] ';'
  
  append-decl  ::=  'append:' [ expression ] ';'
  
  tagname-decl ::=  'tagname:' [ expression ] ';'
  
  plogic-decl  ::=  'plogic:' [ stmt-list ] ';'
  
  begin-def    ::=  'BEGIN' '{' [ stmt-list ] '}'
  
  end-def      ::=  'END'   '{' [ stmt-list ] '}'
  


  ###
  ### program
  ###
  
  progmam      ::=  block



  ###
  ### lexer
  ###
  
  alphabet     ::=  'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'
                  | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r'
                  | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
                  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'
                  | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'
                  | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'

  digit        ::=  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

  digit-seq    ::=  digit | digit-seq digit
  
  start-char   ::=  alphabet | '_'
  
  following    ::=  alphabet | '_' | digit
  
  word         ::=  start-char | word following
  
  name         ::=  word
  
  variable     ::=  word
  
  function     ::=  word
  
  property     ::=  word
  
  numeric      ::=  digit-seq | digit-seq '.' digit-seq
  
  char         ::=  alphabet | digit | symbol
  
  char-seq     ::=  char | char-seq char
  
  string       ::= '\'' char-seq '\'' | '"' char-seq '"'
