
  ### $Id$


  ###
  ### expression
  ###

  arguments    ::=  expression | arguments ',' expression | e
               ::=  [ expression { ',' expression } ]
 
  item         ::=  variable | function '(' arguments ')' | '(' expression ')'
 
  literal      ::=  numeric | string | 'true' | 'false' | 'null' | 'empty'
 
  factor       ::=  literal | item | item '[' expression ']' | item '[:' name ']' | item '.' property
 
  term         ::=  factor | term * factor | term '/' factor | term '%' factor
               ::=  factor { ('*' | '/' | '%') factor }
 
  unary        ::=  term | '+' term | '-' term | '!' term
               ::=  [ '+' | '-' | '!' ] term
 
  arith        ::=  unary | arith '+' term | arith '-' term | arith '.+' term
               ::=  unary { ('+' | '-' | '.+') term }
 
  compare-op   ::=  '==' |  '!=' |  '>' |  '>=' |  '<' |  '<='
  compare      ::=  arith | arith compare-op arith | arith '==' 'empty' | arith '!=' 'empty'
               ::=  arith [ compare-op arith ] | arith ('==' | '!=') 'empty'
 
  logical-and  ::=  compare | logical-and '&&' compare
               ::=  compare { '&&' compare }
 
  logical-or   ::=  logical-and | logical-or '||' logical-and
               ::=  logical-and { '||' logical-and }
 
  conditional  ::=  logical-or | logical-or '?' expression ':' conditional
               ::=  logical-or [ '?' expression ':' conditional ]
 
  assign-op    ::=  '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '.+='
  assignment   ::=  conditional | assign-op assignment
               ::=  conditional 
 
  expression   ::=  assignment



  ###
  ### statement
  ###

  print-stmt   ::=  ':print' '(' arguments ')'
  
  set-stmt     ::=  ':set' '(' expression ')'
  
  if-stmt      ::=  ':if' '(' expression ')' block ':end'
                  | ':if' '(' expression ')' block ':else' block ':end'
                  | ':if' '(' expression ')' block ':elseif' '(' expression ')' block ':end'
               ::=  ':if' '(' expression ')' block
                    { ':elseif' '(' expression ')' block }
                    [ ':else' block ]
                    :end

  foreach-stmt ::= ':foreach' '(' variable '=' expression ')' block ':end'
  
  while-stmt   ::= ':while' '(' expression ')' block ':end'
  
  macro-stmt   ::= ':macro' '(' name ')' block ':end'
  
  expand-stmt  ::= ':expand' '(' name ')' | '@' name
  
  rawcode-stmt ::= ':::' rawcode-str '\n'
  
  statement    ::=  print-stmt | set-stmt | if-stmt | foreach-stmt | while-stmt
                  | macro-stmt | expand-stmt | rawcode-stmt

  block        ::=  statement | block statement | e
               ::=  { statement }



  ###
  ### program
  ###
  
  progmam      ::=  block



  ###
  ### lexer
  ###
  
  alphabet     ::=  'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'
                  | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r'
                  | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
                  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'
                  | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'
                  | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'

  digit        ::=  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

  digit-seq    ::=  digit | digit-seq digit
  
  start-char   ::=  alphabet | '_'
  
  following    ::=  alphabet | '_' | digit
  
  word         ::=  start-char | word following
  
  name         ::=  word
  
  variable     ::=  word
  
  function     ::=  word
  
  property     ::=  word
  
  numeric      ::=  digit-seq | digit-seq '.' digit-seq
  
  char         ::=  alphabet | digit | symbol
  
  char-seq     ::=  char | char-seq char
  
  string       ::= '\'' char-seq '\'' | '"' char-seq '"'
