.JA	.=title:	Kwartzユーザーズガイド
.EN	.=title:	Kwartz Users' Guide
.	.?author:	Makoto Kuwata <kwa(at)kuwata-lab.com>
.	.?lastupdate:	$Date$
.	.?version:	$Rev$
.	.?release:	$Release$
.	.?stylesheet:	docstyle.css
.	
.	
.JA	●はじめに | preface*
.EN	.$ Preface | preface*
.	
.	
.JA	このドキュメントは、テンプレートシステムKwartz{{(Kwartzの開発は、{{<情報処理推進機構(IPA)|http://www.ipa.go.jp/>}}による平成15年度{{<未踏ソフトウェア創造事業|http://www.ipa.go.jp/jinzai/esp/>}}の支援を受けました。)}}のユーザーズガイドです。
.JA	Kwartzは、『プレゼンテーションロジックとプレゼンテーションデータの分離(Separation of Presentation Logic and Presentation Data, SoPL/PD)』という概念を実現したテンプレートシステムです。
.EN	This is the users' guide to Kwartz{{(Development of Kwartz had subsidized by Exploratory Software Project of {{<IPA (Information-Technology Promotion Agency Japan)|http://www.ipa.go.jp/about/english/index.html>}}.)}},
.EN	a template system which realized the concept of 'Separation of Presentation Logic and Presentation Data (SoPL/PD).'
.	
.	
.	
.JA	◎目次			| toc*
.EN	.$$ Table of Contents	| toc*
.	
.	.#.+toc:
.JA	   .<<< users-guide.ja.toc
.EN	   .<<< users-guide.en.toc
.	.#.-toc:
.	
.	
.JA	.#◎更新履歴		| changelog*
.EN	.#.$$ Changelog		| changelog*
.	.#
.	.#.: 2005-03-23
.JA	.#	.- コマンドラインオプション「-a defun」についての記述を追加。
.EN	.#	.- describe about new command-line option '-a defun'
.	.#.: 2005-03-07
.	.#	.- beta3 release
.	.#.: 2005-02-19
.	.#	.- beta2 release
.	.#.: 2005-02-14
.	.#	.- beta1 release
.	
.	
.	
.JA	●Kwartzについて		| intro
.EN	.$ Introduction to Kwartz	| intro
.	
.	
.JA	◎Kwartzとは？		| whatis
.EN	.$$ What's Kwartz?	| whatis
.	
.	
.JA	Kwartz{{(Kwartzは'Quartz'と同じように発音してください。)}}とは、
.JA	{{*『プレゼンテーションロジックとプレゼンテーションデータの分離(Separation of Presentation Logic and Presentaion Data(SoPL/PD)』*}}という概念を実現したテンプレートシステムです。
.EN	Kwartz{{('Kwartz' is pronounced like 'Quartz'.)}} is a template system
.EN	which realized the concept of {{*'Separation of Presentation Logic and Presentaion Data'(SoPL/PD)*}}.
.	
.	
.JA	Kwartz-rubyは、RubyによるKwartzの実装です。
.JA	このほか、PHPやJavaによる実装も予定されています。
.EN	Kwartz-ruby is an implemenation of Kwartz in Ruby.
.EN	There is a plan to implement Kwartz in PHP or Java.
.	
.	
.JA	以降の説明では、「Kwartz」という言葉はテンプレートシステムの仕様を説明するときに使用し、
.JA	「Kwartz-ruby」という言葉は特定の実装について説明するときに使用します。
.EN	In the following, the word 'Kwartz' means the specification of the template system
.EN	 and the word 'Kwartz-ruby' means the implementation of it in Ruby language.
.	
.	
.	
.	
.JA	◎特徴		| features
.EN	.$$ Features	| features
.	
.	
.JA	Kwartzには次のような特徴があります。
.EN	Kwartz has the following features:
.	
.	
.JA	.%  プレゼンテーションデータとプレゼンテーションロジックとが分離可能
.EN	.%  Separates presentation logic from presentation data.
.		
.JA		通常のテンプレートシステムではテンプレートとメインプログラムとを分離します。
.JA		Kwartzでは更に、テンプレートをプレゼンテーションデータとプレゼンテーションロジックとに分離します。
.JA		これにより、プレゼンテーションロジックがHTMLの中に混じることも、またメインプログラムに紛れ込むこともありません。
.EN		Using template systems such as Smarty, Velocity, XMLC, amrita, etc,
.EN		you can separate HTML design from business logic as a template.
.EN		With Kwartz, you can separate presentation logic from a template.
.EN		In other words, Kwartz divides a template into 'presentation data' and 'presentation logic'.
.EN		You need not mix presentation logic into HTML files nor main program.
.EN		.#In Kwartz, you can separate not only business logic but also presentation logic from HTML.
.		
.		
.JA	.%  高速な動作
.EN	.%  Very fast
.		
.JA		Kwartzでは、テンプレート（プレゼンテーションデータとプレゼンテーションロジック）から出力用スクリプトを生成します。
.JA		これをあらかじめ行っておくため、実行時には出力用プログラムを呼び出すだけでよく、極めて高速に動作します。
.JA		またDOMツリーのような木構造を使わずに済むため、他のテンプレートシステムよりも高速です。
.EN		Kwartz creates a script from a template (= presentation data and presentaion logic). 
.EN		All you have to do in main program is to call the output script.
.EN		Because Kwartz doesn't use DOM trees or the like, it is both fast and light-weight.
.		
.		
.JA	.%  複数のプログラミング言語に対応
.EN	.%  Multiple programing languages
.		
.JA		Kwartzは内部で独自の中間言語を採用することにより、様々なプログラミング言語から使用できるようになっています。
.JA		つまり、ひとつのHTMLテンプレートを様々な言語から使用することができるのです。
.JA		また使用する言語を変えたとしても、プレゼンテーション層は何も変更する必要がありません。
.JA		現在のところ、Ruby(eRuby)、PHP、JSP(JSTL 1.1&1.0)、Velocityに対応しています。
.EN		Kwartz can create output scripts for Ruby(eRuby), PHP, JSP(JSTL 1.1 & 1.0), and Velocity
.EN		from a template file, because Kwartz uses an internal intermediate language.
.EN		You don't have to change the presentation layer at all, even if you changed programming language.
.		
.		
.JA	.%  HTMLテンプレートがSGML形式を崩さない
.EN	.%  Doesn't break HTML design at all
.		
.JA		Kwartzでは、HTMLテンプレートにおけるマーキング（印付け）をid属性で行っています。
.JA		そのため、 {{<Smarty|http://smarty.php.net/>}} や
.JA		{{<Jakarta Velocity|http://jakarta.apache.org/velocity/>}} 
.JA		のようにHTMLテンプレートのデザインを崩してしまうことがありません。
.EN		You must use directives like 
.EN		{{,{foreach ...}{/foreach},}} in {{<Smarty|http://smarty.php.net/>}} or
.EN		{{,#foreach(...),}} in {{<Jakarta Velocity|http://jakarta.apache.org/velocity/>}}.
.EN		These directives break the HTML design of template.
.EN		Kwartz doesn't break HTML design because Kwartz uses id attributes for marking in an HTML template.
.		
.		
.JA	.%  任意のテキストファイルで使用可能
.EN	.%  Can handle any text file
.		
.JA		Kwartzでは、専用の属性がついたタグのみを認識し、それ以外のタグはただのプレーンテキストとみなします。
.JA		またHTMLパーサーやXMLパーサーを使用せず、独自に解析を行っています。
.JA		そのため、{{<Enhydra XMLC|http://xmlc.objectweb.org/>}} や
.JA		{{<amrita|http://amrita.sourceforge.jp/>}} 
.JA		のようにXMLやHTMLでしか使用できないということはなく、任意のテキストファイルで使用可能です。
.EN		Kwartz uses an original template parser; not using an HTML or XML parser,
.EN		it is able to handle any text file (HTML, PostScript, RTF, and so on).
.EN		This also means that Kwartz can handle non-well-formed XML files, as well as well-formed XML files.
.EN		This is an advantage of Kwartz against {{<Enhydra XMLC|http://xmlc.objectweb.org/>}} or
.EN		{{<amrita|http://amrita.sourceforge.jp/>}}, which handle only XML/HTML files.
.		
.		
.JA	.%  自動サニタイズ機能をサポート
.EN	.%  Auto-Sanitizing and Partial-Sanitizing Support
.		
.JA		Kwartzでは、サニタイズを自動的に行うようにすることができます。
.JA		つまり、いちいち「CGI.escapeHTML(var)」や「{{,htmlspecialchars($var),}}」と書く必要がありません。
.JA		またサニタイズ機能はオン/オフすることができます。
.JA		さらに、ある部分だけをサニタイズする/しないを細かく指定できます。
.EN		Kwartz can do sanitizing automatically.
.EN		You don't need to write '{{,CGI.escapeHTML(var),}}' or '{{,htmlspecialchars($var),}}'.
.EN		You are free to turn sanitizing on/off, as well specifying which parts of the template to sanitize.
.	
.	
.	
.	
.JA	◎簡単な例		| example1
.EN	.$$ Simple Example	| example1
.	
.	
.JA	Kwartzは、テンプレートをプレゼンテーションデータとプレゼンテーションロジックとに分けて記述します。
.JA	ここではその例を示します。
.EN	In Kwartz, a template is defined as both presentation data and presentation logic.
.EN	They may be described in separate files.
.EN	.#This is an example of a presentation data file and a presentation logic file.
.EN	.#You should create these two files.
.	
.	
.JA	まずプレゼンテーションデータの例です。
.JA	.* 「{{,id="list",}}」はそのエレメントにvaluesという名前で「目印」をつけること、つまり操作対象とすることを表します。Kwartzでは、エレメントに目印をつけることを「マーキング(Marking)」といいます。
.JA	.* 同様に、「{{,id="item",}}」は<td>エレメントにitemという名前で「目印」をつけています。
.EN	This is an example of a presentation data file.
.EN	.* '{{*{{,id="list",}}*}}' means "I'll operate this element in presentation logic" (called 'marking' in Kwartz).
.EN	.* '{{*{{,id="item",}}*}}' is also an marking.
.	
.JA	プレゼンテーションデータ(example1.html)：
.EN	Presentation data file(example1.html):
.	.-------------------- example1.html
.	<table>
.	  <tr {{*id="list"*}}>
.	    <td {{*id="item"*}}>foo</td>
.	  </tr>
.	</table>
.	.--------------------
.	
.	
.JA	次はプレゼンテーションロジックの例です。
.JA	プレゼンテーションロジックでは、プレゼンテーションデータにつけた「目印」に対して操作を行います。
.JA	.* 「{{,#item { ... },}}」は目印「item」がつけられたエレメント（Element, ここでは{{,<td>,}}から{{,<t/d>,}}まで）を表します。
.JA	    .- 「{{,value: {{/expression/}};,}}」は、エレメントの内容を式{{,{{/expression/}},}}の値（ここでは変数{{,member,}}の値）で置き換えることを表します。
.JA	    .- 「{{,remove: "id";,}}」は、エレメントからid属性を取り除くことを表します。
.JA	       なお「{{,id="{{/name/}},}}"」のかわりに「{{,id="mark:{{/name/}}",}}」を使用するとid属性は自動的に削除され、「{{,remove: "id";,}}」をいちいち記述する必要はなくなります。
.JA	.* 「{{,#list { ... },}}」は目印「list」がつけられたエレメント（Element, ここでは{{,<tr>,}}から{{,</tr>,}}まで）を表します。
.JA	    .- 「{{,plogic: { ... },}}」で、そのエレメントのプレゼンテーションロジックを定義します。
.JA	    .- 「{{,@stag,}}」は開始タグ（Start tag, ここでは{{,<tr>,}}）を表します。
.JA	    .- 「{{,@cont,}}」は内容（Content, ここでは{{,<td id="item">foo</td>,}}）を表します。
.JA	    .- 「{{,@etag,}}」は終了タグ（End tag, ここでは{{,</tr>,}}）を表します。
.JA	    .- 「{{,foreach (member in member_list) { ... },}}」は繰り返しを表します。
.JA	       .#つまり、開始タグから終了タグまでを繰り返すようにエレメントの定義を変更しているわけです。
.EN	And the following is an example of presentation logic.
.EN	In presentation logic, you can operate on elements which are marked in presentation data.
.EN	.* '{{*{{,#item { ... },}}*}}' represents an element marked with name 'item' (= '<td>...</td>').
.EN	    .- '{{*{{,value: {{/expression/}};,}}*}}' represents that the content of the element is replaced by value of {{,{{/expression/}},}}, which is value of a variable {{,member,}} in this case.
.EN	    .- '{{*{{,remove: "id";,}}*}}' represents that the id attribute is to be deleted.
.EN	.* '{{*{{,#list { ... },}}*}}' represents an element marked with name 'list' (= '<tr>...</tr>')
.EN	    .- '{{*{{,plogic: { ... },}}*}}' represents presentation logic of the element.
.EN	    .- '{{*{{,@stag,}}*}}' represents a start tag (= '<tr>').
.EN	    .- '{{*{{,@cont,}}*}}' represents content(= '<td id="item">foo</td>').
.EN	    .- '{{*{{,@etag,}}*}}' represents an end tag(= '</tr>').
.EN	    .- '{{*{{,foreach ({{/var/}} in {{/list/}}) { ... },}}*}}' represents an iteration.
.EN	       .#In fact, this presentation logic re-defines the marked element to iterate from start tag to end tag for each {{,{{/var/}},}} in {{,{{/list/}},}}.
.	
.	
.JA	プレゼンテーションロジック(example1.plogic)：
.EN	Presentation logic file(example1.plogic):
.	.-------------------- example1.plogic
.JA	#item {            // id="item" がついたエレメント
.JA	  value: member;      // 内容を変数memberの値で置き換える
.JA	  remove: "id";       // id属性を取り除く
.JA	}
.EN	#item {            // The element which is marked by 'id="item"'
.EN	  value: member;      // replace the content with value of a variable 'member'
.EN	  remove: "id";       // remove the id attribte
.EN	}
.	
.JA	#list {            // id="list" がついたエレメント
.JA	  remove: "id";       // id属性を取り除く
.JA	  plogic: {           // プレゼンテーションロジックを定義する
.JA	    foreach (member in member_list) {
.JA	      @stag;          // タグ(start tag)
.JA	      @cont;          // 内容(content)
.JA	      @etag;          // 終了タグ(end tag)
.JA	    }
.JA	  }
.JA	}
.EN	#list {            // The element which is marked by 'id="list"'
.EN	  remove: "id";       // remove the id attribute
.EN	  plogic: {           // define the presentation logic
.EN	    foreach (member in member_list) {
.EN	      @stag;          // start tag
.EN	      @cont;          // content
.EN	      @etag;          // end tag
.EN	    }
.EN	  }
.EN	}
.	.--------------------
.	
.	
.JA	Kwartzはこの2つから各言語(eRuby, PHP, JSTL1.1&1.0)用の出力用スクリプトを自動生成します。
.JA	これをコンパイルといいます。
.JA	コンパイルするにはコマンドラインで次のようにします。
.EN	Kwartz creates output scripts automatically for eRuby, PHP, and JSP (JSTL 1.1&1.0) from the above two files.
.EN	This action is called 'compiling'.
.EN	To compile, enter one of the following commands:
.	.====================
.	### for eRuby
.	$ kwartz -l eruby  -p example1.plogic example1.html > example1.rhtml
.	
.	### for PHP
.	$ kwartz -l php    -p example1.plogic example1.html > example1.php
.	
.	### for JSTL 1.1
.	$ kwartz -l jstl11 -p example1.plogic example1.html > example1.jsp
.	
.	### for JSTL 1.0
.	$ kwartz -l jstl10 -p example1.plogic example1.html > example1.jsp
.	
.	### for Velocity
.	$ kwartz -l velocity -p example1.plogic example1.html > example1.vm
.	.====================
.	
.	
.JA	以下は自動生成された出力用スクリプトです。
.EN	The following is the output script for each respective language.
.	
.JA	出力用スクリプト for eRuby (example1.rhtml):
.EN	Output Script for eRuby(example1.rhtml):
.	.--------------------
.	.<<<:! kwartz -l eruby -p guide.d/example1.plogic guide.d/example1.html | tee guide.d/example1.rhtml
.	.--------------------
.		
.JA	出力用スクリプト for PHP (example1.php):
.EN	Output Script for PHP(example1.php):
.	.--------------------
.	.<<<:! kwartz -l php -p guide.d/example1.plogic guide.d/example1.html | tee guide.d/example1.php
.	.--------------------
.		
.JA	出力用スクリプト for JSTL 1.1{{(コマンドラインオプションとして「--charset={{/CHARSET/}}」をつけると、JSTL用出力スクリプトでは「{{,<%@ page contentType="text/html; charset={{/CHARSET/}}" %>,}}」をつけてくれます。)}}(example1.jsp):
.EN	Output Script for JSTL 1.1{{(if you specify the command-line option '--charset={{/CHARSET/}}', Kwartz will output {{,<%@ page contentType="text/html; charset={{/CHARSET/}}" %>,}} when the language is JSTL.)}}(example1.jsp):
.	.--------------------
.	.<<<:! kwartz -l jstl11 -p guide.d/example1.plogic guide.d/example1.html | tee guide.d/example1.jsp
.	.--------------------
.		
.JA	出力用スクリプト for JSTL 1.0(example1.jsp):
.EN	Output Script for JSTL1.0(example1.jsp):
.	.--------------------
.	.<<<:! kwartz -l jstl10 -p guide.d/example1.plogic guide.d/example1.html | tee guide.d/example1.jsp
.	.--------------------
.	
.JA	出力用スクリプト for Velocity(example1.vm):
.EN	Output Script for JSTL1.0(example1.jsp):
.	.--------------------
.	.<<<:! kwartz -l velocity -p guide.d/example1.plogic guide.d/example1.html | tee guide.d/example1.vm
.	.--------------------
.	
.	
.JA	またコンパイル時にコマンドオプション {{,-e,}} をつけると、サニタイズされた出力用スクリプトが生成されます。
.JA	サニタイズには、eRubyでは{{,CGI.escapeHTML(),}}が、PHPでは{{,htmlspecialchars(),}}が、
.JA	JSTLでは{{,escapeXml="false",}}なしの{{,<c:out/>,}}が、VelocityではEscapeToolの{{,$esc.html(),}}が使用されます。
.EN	Using the command-line option '{{,-e,}}' when compiling, Kwartz will output sanitized scripts.
.EN	For sanitizing, {{,CGI.escapeHTML(),}} is used in eRuby, {{,htmlspecialchars(),}} in PHP,
.EN	{{,<c:out/>,}} without {{,escapeXml="false",}} in JSTL, {{,$esc.html(),}} of EscapeTool in Velocity.
.	
.	
.JA	これらの出力用スクリプトをメインプログラムから呼び出すと、Webページが出力されます。
.JA	呼び出し方は、各プログラミング言語によって異なります。
.EN	Then execute or import these output scripts into your main program, like this:
.	
.	
.JA	メインプログラム(Ruby)：
.EN	Main Program (Ruby) :
.	.--------------------
.JA	## データを用意する
.EN	## set a data
.	member_list = [ 'Oboro', 'Ominae', 'Jaquemonde' ]
.	
.JA	## ERBを使って出力する
.EN	## print out using ERB
.	require 'erb'
.	require 'cgi'        # for sanitizing
.	str = File.open('example1.rhtml') { |f| f.read() }
.	str.untaint
.	trim_mode = 1
.	erb = ERB.new(str, $SAFE, trim_mode)
.	print erb.result(binding())
.	
.JA	## またはERubyを使う方法
.EN	## or print out using ERuby
.	require 'eruby'
.	require 'cgi'        # for sanitizing
.	ERuby::import('example1.rhtml')
.	.--------------------
.		
.JA	メインプログラム(PHP)：
.EN	Main Program (PHP) :
.	.--------------------
.	<?php
.JA	   // データを用意する
.EN	   // set a data
.	   $member_list = array('Oboro', 'Ominae', 'Jaquemonde');
.	   
.JA	   // 出力する
.EN	   // print out
.	   include('example1.php');
.	 ?>
.	.--------------------
.		
.JA	メインプログラム(JSTL)：
.EN	Main Program (JSTL) :
.	.--------------------
.	public void doGet(HttpServletRequest request,
.	                  HttpServletResponse response)
.	                  throws ServletException, IOException {
.	   ...
.JA	   // データを用意する
.EN	   // set a data
.	   java.util.List member_list = new java.util.ArrayList();
.	   member_list.add("Oboro");
.	   member_list.add("Ominae");
.	   member_list.add("Jaquemonde");
.	
.JA	   // 出力
.EN	   // print
.	   RequestDispatcher dispatcher = 
.	       request.getRequestDispatcher("example1.jsp");
.	   dispatcher.include(request, response);
.JA	   // または dispatcher.forward(request, response);
.EN	   // or dispatcher.forward(request, response);
.	}
.	.--------------------
.		
.JA	メインプログラム(Velocity)：
.EN	Main Program (Velocity) :
.	.-------------------- Main1.java
.	import org.apache.velocity.app.Velocity;
.	import org.apache.velocity.VelocityContext;
.	import org.apache.velocity.Template;
.	import org.apache.velocity.exception.ResourceNotFoundException;
.	import org.apache.velocity.exception.ParseErrorException;
.	import org.apache.velocity.exception.MethodInvocationException;
.	import java.io.OutputStreamWriter;
.	import java.io.IOException;
.	
.	public class Main1 {
.	  public static void main(String[] args) {
.	    try {
.	    // 初期化
.	    Velocity.init();
.	 
.JA	    // データを用意する
.EN	    // create data
.	    java.util.List member_list = new java.util.ArrayList();
.	    member_list.add("Oboro");
.	    member_list.add("Ominae");
.	    member_list.add("Jaquemonde");
.	 
.JA	    // Contextを作成しデータをセットする
.EN	    // create context and set data
.	    VelocityContext context = new VelocityContext();
.	    context.put("member_list", member_list);
.	 
.JA	    // テンプレートを読み込み、Contextとマージする。
.EN	    // read template and merge it with context
.	    Template template = Velocity.getTemplate("Test.vm", "UTF8");
.	    OutputStreamWriter writer = new OutputStreamWriter(System.out);
.	    template.merge(context, writer);
.	
.JA	    // 出力する
.EN	    // print out
.	    writer.flush();
.	  }
.	  catch (ResourceNotFoundException ex) {
.JA	    // テンプレートが見つからなかった
.EN	    // template not found
.	  }
.	  catch (ParseErrorException ex) {
.JA	    // テンプレート解析時に構文エラーがあった
.EN	    // syntax error exists in template
.	  }
.	  catch (MethodInvocationException ex) {
.JA	     // メソッド呼び出しができなかった
.EN	     // method invocation violation
.	  }
.	  catch (IOException ex) {
.JA	    // 入出力に問題があった
.EN	    // I/O exepption
.	  }
.	  catch (Exception ex) {
.JA	    // その他のエラー
.EN	    // other exception
.	  }
.	}
.	.--------------------
.	
.	
.JA	出力用プログラムを呼び出して実行すると、例えば次のようなWebページが生成されます。
.EN	Calling or executing the output script, you might get a web page like this:
.	
.	.____________________
.	.<<<:! ruby guide.d/example1.rb
.	.____________________
.	
.	
.	
.JA	.#この出力結果をみると、属性{{,id="values",}}が残っているのが気になります。
.JA	.#これを消す場合は、{{,id="mark:values",}}と記述するか、コマンドラインオプション{{,--delete-idattr=true,}}をつけてください。
.JA	.#id属性が出力されないようになります。
.EN	.#You may not prefere that id attributes appear in each <tr></tr>.
.EN	.#You can remove then from the output with {{,id="mark:values",}},
.EN	.#which is equivalent to {{,id="values",}}, but with auto-removal of the id attributes themselves.
.EN	.#The command-line option {{,--delete-idattr=true,}} also removes the id attributes.
.	
.	
.	
.	
.JA	◎複雑な例		| example2
.EN	.$$ Complex Example	| example2
.	
.JA	もう少し複雑な例として、色つきのテーブルを示します。
.EN	The following is a little complex example which is borderd table.
.	
.	
.JA	プレゼンテーションデータは次のようになります。
.JA	マーキングは「{{,id="{{/name/}}",}}」ではなく「{{,id="mark:{{/name/}}",}}」としています。
.JA	こうするとid属性は自動的に削除されますので、プレゼンテーションロジックファイルでいちいち「{{,remove: "id",}}」と書く必要がなくなります。
.EN	Marking is done with {{,id="mark:{{/name/}}",}} instead of {{,id="{{/name/}}",}}
.EN	in the following presentation data.
.EN	You don't have to write {{,remove: "id",}} in presentation logic file
.EN	because Kwartz removes {{,id="mark:{{/name/}}",}} automatically.
.EN	.#The following is the presentation data.
.EN	.#Marking is done at '<tbody>' tag and not '<tr>'.
.	
.JA	プレゼンテーションデータ(example2.html)：
.EN	Presentation Data (example2.html):
.	.-------------------- example2.html
.	<table>
.	 <tr bgcolor="#CCCCFF" {{*id="mark:list"*}}>
.	  <td {{*id="mark:name"*}}>foo</td>
.	  <td>
.	   <a href="mailto:foo@mail.com" {{*id="mark:email"*}}>foo@mail.com</a>
.	  </td>
.	 </tr>
.	</table>
.	.--------------------
.	
.	
.JA	次はプレゼンテーションロジックです。
.JA	プレゼンテーションロジックでは、繰り返しを行いながら、奇数行か偶数行かの判定を行っています。
.JA	.#繰り返しには開始タグと終了タグを含めず、内容だけを繰り返しています。
.EN	The following is the presentation logic file.
.EN	In the presentation logic, you should detect whether odd or even line in the iteration.
.EN	.#Notice that only the content is iterated and the start-tag and the end-tag are not iterated.
.	
.	
.JA	プレゼンテーションロジック(example2.plogic)：
.EN	Presentation Logic (example2.plogic):
.	.-------------------- example2.plogic
.JA	// id="mark:list" がついたエレメント：
.JA	// bgcolor属性の値として変数colorを出力する。
.JA	// また繰り返しを行い、奇数行と偶数行で変数colorの値を変える。
.EN	// an element which is marked by 'id="mark:list"':
.EN	// * print value of a variable 'color' as bgcolor attribute value.
.EN	// * change value of a variable 'color' whether odd or even line.
.	#list {
.	  attr:  "bgcolor" color;
.	  plogic: {
.	    i = 0;
.	    foreach (member in member_list) {
.	      i += 1;
.	      color = i % 2 == 0 ? '#FFCCCC' : '#CCCCFF';
.JA	      @stag;    // 開始タグ(start tag)
.JA	      @cont;    // 内容    (content)
.JA	      @etag;    // 終了タグ(end tag)
.EN	      @stag;    // start tag
.EN	      @cont;    // content
.EN	      @etag;    // end tag
.	    }
.	  }
.	}
.	
.JA	// id="mark:name" がついたエレメント：
.JA	// 内容として member['name'] の値を出力する。
.EN	// an element which is marked by 'id="mark:name"':
.EN	// * print value of member['name'] as content of the element.
.	#name {
.	  value: member['name'];
.	}
.	
.JA	// id="mark:email" がついたエレメント：
.JA	// 内容として member['email'] の値を出力する。
.JA	// またhref属性は "mailto:" .+ member['email'] の値を出力する。
.JA	// （「.+」は文字列の連結を行う演算子）
.EN	// an element marked by 'id="mark:email"':
.EN	// * print value of member['emal'] as contentn of the element.
.EN	// * print "mailto:" and member['email'] as href attribute value.
.EN	//   (operator '.+' means string concatenation.)
.	#email {
.	  value: member['email'];
.	  attr:  "href" ("mailto:" .+ member['email']);
.	}
.	.--------------------
.	
.	
.JA	見ておわかりのように、プレゼンテーションロジックにはHTMLタグが一切入らず、またプレゼンテーションデータにはロジックが一切入っていません。
.JA	つまり、プレゼンテーションデータとプレゼンテーションロジックの分離が実現できていることになります。
.EN	You will find that there is no HTML tag in the presentation logic and no logic in the presentation data.
.EN	That is to say, Kwartz can separate presentation logic from presentation data.
.	
.JA	なおインクリメント演算子（++）は使えませんので、{{,ctr++,}} のように書くことはできません。
.EN	Notice that you cannot write {{,ctr++,}} because incremental operator ({{,++,}}) is not supported.
.	
.	
.JA	コンパイル：
.EN	Compile:
.	.====================
.	### for eRuby
.	$ kwartz -l eruby  -p example2.plogic example2.html > example2.rhtml
.	
.	### for PHP
.	$ kwartz -l php    -p example2.plogic example2.html > example2.php
.	
.	### for JSTL 1.1
.	$ kwartz -l jstl11 -p example2.plogic example2.html > example2.jsp
.	
.	### for JSTL 1.0
.	$ kwartz -l jstl10 -p example2.plogic example2.html > example2.jsp
.	
.	### for Velocity
.	$ kwartz -l velocity -p example2.plogic example2.html > example2.vm
.	.====================
.	
.JA	出力用スクリプト：
.EN	Output Script:
.	.--------------------
.	.<<<:! ./output.rb -p guide.d/example2.plogic guide.d/example2.html
.	.--------------------
.	
.	
.	
.JA	◎プレゼンテーションロジックの応用例			| pattern
.EN	.$$ Other Examples of Presentation Logic		| pattern
.	
.	
.JA	Kwartzでは、複雑なプレゼンテーションロジックが素直に記述できます。
.JA	ここではその例を示します。
.JA	なお『{{<プレゼンテーションパターンカタログ|p-pattern.html>}}』もご覧ください。
.EN	Kwartz enables you to write complex presentation logic natulally.
.EN	This section shows some examples.
.EN	See {{<Presentation Pattern Catalog|p-pattern.html>}} for details.
.	
.	
.	
.JA	.#プレゼンテーションデータ：
.EN	.#Presentation Data:
.	.#.--------------------
.	.#<ul id="mark:list">
.	.# <li>@{member}@</li>
.	.#</ul>
.	.#.--------------------
.	
.	
.JA	.* エレメント全体を繰り返すことができます。
.EN	.* You can choose to iterate an element.
.		.--------------------
.		#list {
.		  plogic: {
.		    foreach (member in member_list) {
.		      @stag;
.		      @cont;
.		      @etag;
.		    }
.		  }
.		}
.		.--------------------
.	
.JA	.* 内容だけを繰り返すことができます。<dl></dl>で使うのに向いています。
.EN	.* You can choose to iterate only contents. This is useful for <dl></dl>.
.		.--------------------
.		#list {
.		  plogic: {
.		    @stag;
.		    foreach (member in member_list) {
.		      @cont;
.		    }
.		    @etag;
.		  }
.		}
.		.--------------------
.	
.JA	.* 内容のかわりに、変数や式などの値を出力することができます。
.EN	.* You can print a value of a variable or an expression instead of a static content string.
.		.--------------------
.		#list {
.		  plogic: {
.		    @stag;
.		    print("Hello!");
.		    @etag;
.		  }
.		}
.		.--------------------
.JA	   これは次のように書くこともできます。
.EN	   The following is equalt to the above.
.		.--------------------
.		#list {
.		  value: "Hello!";
.		}
.		.--------------------
.	
.JA	.* エレメントのかわりに、変数や式などの値を出力することができます。
.EN	.* You can print a value of a variable or an expression instead of an element.
.		.--------------------
.		#list {
.		  plogic: {
.		    print("<b>Hello!</b>");
.		  }
.		}
.		.--------------------
.	
.JA	.* 内容だけを残し、開始タグと終了タグを消すことができます。
.EN	.* You can delete the start tag and the end tag.
.		.--------------------
.		#list {
.		  plogic: {
.		    @cont;
.		  }
.		}
.		.--------------------
.	
.JA	.* エレメント全体を消すことができます。これは、ダミーデータを消すときに便利です。
.EN	.* You can delete an element. This is useful for delete dummy data.
.		.--------------------
.		#list {
.		  plogic: {
.		  }
.		}
.		.--------------------
.	
.JA	.* エレメント全体を、別のエレメントで置き換えることができます。
.EN	.* You can replace an element by other element marked.
.		.--------------------
.		#list {
.		  plogic: {
.JA		    @element(foo);  // 「foo」とマーキングされたエレメントを展開する
.EN		    @element(foo);  // expand other element marked with name 'foo'
.		  }
.		}
.		.--------------------
.	
.JA	.* エレメントの内容を、別のエレメントで置き換えることができます。
.EN	.* You can replace content of element by other element marked.
.		.--------------------
.		#list {
.		  plogic: {
.		    @stag;
.JA		    @element(foo);  // 「foo」とマーキングされたエレメントを展開する
.EN		    @element(foo);  // expand other element marked with name 'foo'
.		    @etag;
.		  }
.		}
.		.--------------------
.	
.JA	.* 複雑なプレゼンテーションロジックを含めることができます。
.EN	.* You can include a complex presentation logic like this:
.		.--------------------
.		#list {
.		  plogic: {
.		  i = 0;
.		  foreach (member in member_list) {
.JA		    i += 1;		// 注意：i++ や ++i は使えません
.EN		    i += 1;		// notice: i++ and ++i are unsupported
.		    if (i % 2 == 0) {
.		      color = 'red';
.		    } else {
.		      color = 'blue';
.		    }
.		    @stag;
.		    @cont;
.		    @etag;
.		  }
.		}
.		.--------------------
.	
.JA	ここで重要なのは、{{*プレゼンテーションロジックにはタグ名や属性名が一切出てきていない*}}という点です。
.JA	プレゼンテーションデータのほうでどんなにタグを変更したとしても、プレゼンテーションロジックはまったく変更する必要はありません。
.EN	It is very important that tag/attribute names don't appear in presentation logic at all.
.EN	This way, you don't need to change presentation logic files even if the tag/attribute names are changed in the presentation data.
.EN	.#In other words, you don't need to change presentaion logic files even if the tag/attribute name is changed in the presesntation data.
.	
.	
.JA	つまり、プレゼンテーションデータとプレゼンテーションロジックとが完全に分離されているわけです。
.EN	Kwartz separates presentation logic from presentation data.
.EN	.#It means that Kwartz separates presentation logic from presentation data.
.	
.	
.	
.	
.JA	●ディレクティブ 	| directives
.EN	.$ Directives		| directives
.	
.	
.JA	Kwartzでは、プレゼンテーションデータの中にプレゼンテーションロジックを埋め込むこともできます。
.JA	つまり、両者を分離することも、一体化することもできるわけです。
.EN	Presentation logic may be embedded into presentation data in Kwartz.
.EN	.#In addition, you can 'embed' presentation logic into presentation data in Kwartz.
.EN	You can choose to separate or not to sepearate presentation data and presentation logic.
.	
.	
.JA	プレゼンテーションロジックをプレゼンテーションデータの中に埋め込むには、ディレクティブを用います。
.JA	ディレクティブとは、プレゼンテーションデータの中にプレゼンテーションロジックを埋め込むための命令です。
.JA	Kwartzでは、id属性とkw:d属性を用いてディレクティブを記述します。
.EN	To embed presentation logic into presentation data, use directives.
.EN	Directive is a command to embed presentation logic into presentation data.
.EN	In Kwartz, 'id' and 'kw:d' attributes are used to describe directives.
.	
.	
.JA	次はディレクティブを使った例です：
.JA	.* 「{{,id="foreach:{{/var/}}={{/list/}}",}}」は、繰り返しを表します。
.JA	.* 「{{,id="value:{{/expression/}}",}}」は、内容のかわりに式の値を出力することを表します。
.JA	.* 「{{,id="dummy:{{/str/}}",}}」は、そのエレメントがダミーであることを表します（つまり出力されません）。
.JA	    ここで{{,{{/str/}},}}はid属性の値が同じにならないようにするためのものであり、特に意味はありません。
.JA	.* 「{{,@{{{/expression/}}}@,}}」{{(このパターンは設定ファイルの定数EMBED_PATTERNで変更できます。)}}は、式の値を出力するためのディレクティブです。
.EN	The following is an example to use directives.
.EN	.* Directive '{{,id="foreach:{{/var/}}={{/list/}}",}}' means to iterate the element.
.EN	.* Directive '{{,id="value:{{/expression/}}",}} means to print value of expression as content of the element.
.EN	.* Directive '{{,id="dummy:{{/str/}}",}}' means that the element is a dummy and is not printed out.
.EN	   ({{/Str/}} is a string only to keep unique value of id attribute.)
.EN	.* '{{,@{{{/expression/}}}@,}}'{{(This pattern is editable with a constant EMBED_PATTERN in configuration file(kwartz/config.rb).)}} is also a directive to print out expression value.
.	
.	
.JA	プレゼンテーションデータ(example3.html)：
.EN	Presentation Data(example3.html):
.	.-------------------- example3.html
.	<table>
.	  <tr {{*id="foreach:member=member_list"*}}>
.	    <td {{*id="value:member['name']"*}}>foo</td>
.	    <td><a href="mailto:{{*@{member['email']}@*}}">
.	         {{*@{member['email']}@*}}</a></td>
.	  </tr>
.	  <tr {{*id="dummy:d1"*}}>
.	    <td>bar</td>
.	    <td><a href="mailto:bar@mail.org">bar@mail.org</a></td>
.	  </tr>
.	  <tr {{*id="dummy:d2"*}}>
.	    <td>baz</td>
.	    <td><a href="mailto:baz@mail.net">baz@mail.net</a></td>
.	  </tr>
.	</table>
.	.--------------------
.	
.	
.JA	コンパイル：
.EN	Compile:
.	.====================
.	### for eRuby
.	$ kwartz -l eruby   example3.html > example3.rhtml
.	
.	### for PHP
.	$ kwartz -l php     example3.html > example3.php
.	
.	### for JSTL1.1
.	$ kwartz -l jstl11  example3.html > example3.jsp
.	.====================
.	
.	
.JA	出力用スクリプト：
.EN	Output script:
.	.--------------------
.	.<<<:! ./output.rb guide.d/example3.html
.	.--------------------
.	
.	
.JA	このほか、条件分岐を行うディレクティブなども用意されています。
.JA	詳細はリファレンスマニュアルをご覧ください。
.EN	There are several directives such as conditional branching.
.EN	See reference manual for details.
.	
.	
.	
.JA	●サニタイズ		| sanitize
.EN	.$ Sanitizing		| sanitize
.	
.	
.JA	Kwartzでは、自動でサニタイズを行うことができます。
.JA	またある部分だけをサニタイズする/しないを選択することもできます。
.EN	Kwartz supports Automatic Sanitizing and Partially Sanitizing.
.	
.	
.	
.JA	◎自動サニタイズ	 | sanitize1
.EN	.$$ Automatic Sanitizing | sanitize1
.	
.	
.JA	コマンドラインオプション {{,-e,}} をつけると、出力スクリプトをサニタイズします。
.JA	サニタイズでは、eRubyでは{{,CGI.escapeHTML(),}}が、ERBでは{{,h(),}}が、PHPでは{{,htmlspecialchars(),}}が、JSTLでは{{,escapeXml="false",}}なしの{{,<c:out>,}}が、Velocityでは{{,$!esc.html(),}}がそれぞれ使用されます。
.EN	'{{,-e,}}' is the command-line optin to generate output script with sanitizing.
.EN	'{{,CGI.escapeHTML(),}}' is used in eRuby for sanitizing, '{{,htmlspecialchars(),}}' in PHP, '{{,<c:out/>,}}' tag without '{{,escapeXml="false",}}' in JSTL, and '{{,$!esc.html(),}}' in Velocity.
.	
.	
.JA	プレゼンテーションデータ：
.EN	Presentation Data (sanitize1.html):
.	.-------------------- sanitize1.html
.	<tr bgcolor="@{color}@">
.	  <td id="value:str">foo</td>
.	</tr>
.	.--------------------
.	
.	
.JA	コンパイル：
.EN	Compile:
.	.====================
.	### for eRuby
.	$ kwartz -e -l eruby  sanitize1.html > sanitize1.rhtml
	
.	### for ERB
.	$ kwartz -e -l erb    sanitize1.html > sanitize1.rhtml
	
.	### for PHP
.	$ kwartz -e -l php    sanitize1.html > sanitize1.php
	
.	### for JSTL
.	$ kwartz -e -l jstl   sanitize1.html > sanitize1.jsp
.	
.	### for Velocity
.	$ kwartz -e -l velocity sanitize1.html > sanitize1.vm
.	.====================
.	
.	
.JA	出力用スクリプト：
.EN	Output Scirpt:
.	.--------------------
.	.<<<:! ./output.rb -s -l eruby,erb,php,jstl,velocity guide.d/sanitize1.html
.	.--------------------
.	
.	
.JA	式が文字列や数値のような定数の場合は、サニタイズされません。
.JA	また「{{,flag ? 'checked' : '',}}」のような条件演算子では、{{,flag,}}の値にかかわらず文字列定数が出力されますので、これもサニタイズされません。
.EN	Constant string and constant number are not sanitized.
.EN	Conditional expression such as '{{,flag ? " checked" : "",}}' is not sanitized because the result is constant string whether the value of '{{,flag,}}' is true or false.
.	
.	
.	
.	
.JA	◎部分サニタイズ		| sanitize2
.EN	.$$ Partially Sanitizing	| sanitize2
.	
.JA	関数{{,E({{/expr/}}),}}は、コマンドラインオプションに関わらず式{{,{{/expr/}},}}をサニタイズします。
.JA	また関数{{,X({{/expr/}}),}}は、コマンドラインオプションに関わらず式{{,{{/expr/}},}}をサニタイズしません
.JA	{{(E()とX()は正確には擬似関数であり、PLにおけるprint文の引数に指定することはできますが、任意の式として使用できるわけではありません。例えば「{{,@{E(...),}}}@」や「{{,id="value:E(...)",}}」と書くことはできますが、「{{,id="set:str=E(...)",}}」のようには書けません。)}}。
.EN	The function {{,E({{/expr/}}),}} always sanitizes expression {{,{{/expr/}},}} even when '-e' is not specified.
.EN	The function {{,X({{/expr/}}),}} doesn't sanitize expression {{,{{/expr/}},}} even when '-e' is specified.
.EN	{{(E() and X() are pseudo-function. They are not expression but allowed to appear as argument of print statement of PL. For example, '{{,@{E(...)}@,}}' and '{{,id="value:E(...),}}' are valid, but '{{,id="set:str=E(...)",}}' is invalid.)}}
.	
.JA	プレゼンテーションデータ：
.EN	Presentaion Data:
.	.-------------------- sanitize-partial1.pdata
.	<table>
.	 <tr bgcolor="{{*@{X(color)}@*}}">
.	   <td {{*id="value:E(str)"*}}>foo</td>
.	 </tr>
.	</table>
.	.--------------------
.	
.JA	コンパイル：
.EN	Compile:
.	.====================
.	### for eRuby
.	$ kwartz -e -l eruby  sanitize1.html > sanitize1.rhtml
	
.	### for ERB
.	$ kwartz -e -l erb    sanitize1.html > sanitize1.rhtml
	
.	### for PHP
.	$ kwartz -e -l php    sanitize1.html > sanitize1.php
	
.	### for JSTL 1.1
.	$ kwartz -e -l jstl11 sanitize1.html > sanitize1.jsp
.	
.	### for Velocity
.	$ kwartz -e -l velocity sanitize1.html > sanitize1.vm
.	.====================
.	
.JA	出力用スクリプト：
.EN	Output Script:
.	.--------------------
.	.<<<:! ./output.rb -l eruby,erb,php,jstl,velocity guide.d/sanitize-partial1.pdata
.	.--------------------
.	
.JA	またコマンドラインオプションに関係なく、「{{,id="Value:{{/expr/}}",}}」や「{{,id="Attr:{{/name/}}={{/expr/}})",}}」は式{{,{{/expr/}},}}を必ずサニタイズします。
.JA	逆に、「{{,id="VALUE:{{/expr/}}",}}」や「{{,id="ATTR:{{/name/}}={{/expr/}}",}}」は式{{,{{/expr/}},}}を必ずサニタイズしません。
.JA	これらはそれぞれ、「{{,id="value:E({{/expr/}})",}}」や「{{,id="attr:{{/name/}}=X({{/expr/}})",}}」と同じです。
.EN	Directives {{,id="Value:{{/expr/}}",}} and {{,id="Attr:{{/name/}}={{/expr/}}",}} always sanitize expression {{,{{/expr/}},}} even when the sanitizing command-line option is not specified.
.EN	Directives {{,id="VALUE:{{/expr/}}:",}} and {{,id="ATTR:{{/name/}}={{/expr/}}",}} doesn't sanitize expression {{,{{/expr/}},}} even when the sanitizing command-line option is specified.
.EN	These are equivalent to {{,id="value:E({{/expr/}})",}}, {{,id="attr:{{/name/}}=E({{/expr/}})",}}, 
.EN	{{,id="value:X({{/expr/}})",}}, and {{,id="attr:{{/name/}}=X({{/expr/}})",}}.
.	
.	
.	
.JA	◎サニタイズの設定			| sanitize3
.EN	.$$ Configuration for sanitizing	| sanitize3
.	
.JA	kwartz/config.rbはKwartz-rubyの動作を設定しているファイルです。
.JA	デフォルトでサニタイズを行うように設定するには、この中で定数{{,ESCAPE,}}の値をtrueに変更します。
.EN	File 'kwartz/config.rb' is a configuration file for Kwartz-ruby.
.EN	If you want to sanitize in default, change value of constant {{,ESCAPE,}} to true in the configuration file.
.	
.	
.	
.JA	●その他の話題		| topics
.EN	.$ Other Topics		| topics
.	
.	
.	
.JA	◎制限事項		| restriction
.EN	.$$ Restrictions	| restriction
.	
.JA	Kwartzでは、HTMLパーサやXMLパーサを用いず、正規表現によるパターンマッチでHTMLファイルを解析しています。
.JA	そのため、HTMLではないテキストファイルでも利用できるという利点がありますが、次のような制限事項もあります。
.EN	Kwartz parses presentation data file by regular expression pattern matching.
.EN	It means that Kwartz doesn't use HTML parser nor XML parser for parsing presentation data.
.EN	This approach enables Kwartz to handle any type of text file, and also brings the following restrictions to Kwartz.
.	
.JA	.* id属性がついたタグは、終了タグを省略できません。
.EN	.* Cannot omit end tag if id attribute is specified.
.	   .--------------------
.JA	   <!-- </li> が指定されていないので解析できない -->
.EN	   <!-- Kwartz cannot parse the following because </li> is omitted. -->
.	   <ul>
.	    <li id="foo">foo
.	   </ul>
.	   .--------------------
.JA	   また内容を持たない場合は、{{,<foo id="..."/>,}}のような空タグとしてください。
.EN	   An Element which doesn't have any content is to be written as an empty tag such as {{,<foo id="..."/>,}}.
.	
.JA	.* ただし、{{,<input>,}}と{{,<br>,}}と{{,<meta>,}}と{{,<img>,}}と{{,<hr>,}}は、終了タグを省略できます。
.JA	   また空タグにする必要もありません。
.JA	   .#そのかわりに、これらのタグでは内容をもつことができません。
.EN	.* However, {{,<input>,}}, {{,<br>,}}, {{,<meta>,}}, {{,<img>,}}, and {{,<hr>,}} are allowed to omit end tag.
.EN	   And these doesn't have to be written as an empty tag.
.	   .--------------------
.JA	   <!-- </input> が省略されているが、正しく解析される -->
.EN	   <!-- </input/> is omitted but Kwartz can parse correctly. -->
.	   <input type="text" name="user" id="user">
.	   .--------------------
.JA	   なおこれらのタグ名はkwartz/config.rbの中で定数{{,NOEND,}}に設定されています。
.JA	   また大文字と小文字は区別されます。
.EN	   Constant NOEND lists these tag names in file kwartz/config.rb.
.EN	   Upper-case and lower-case are distinguished.
.	
.JA	.* 属性値は必ず「{{,",}}」で囲ってください。また「'」で囲っても認識されません。
.EN	.* Attribute values should be surrounded with '{{,",}}'.
.	   .--------------------
.JA	   <!-- 属性値が「"」で囲まれていないので、解析できない -->
.EN	   <!-- Kwartz fails parsing because attribute value is not surrounded with '"'. -->
.	   <h1 id="value:title" class=title>title</h1>
.	   .--------------------
.	
.	
.	
.JA	◎グローバル変数とローカル変数		 | analyze
.EN	.$$ Analyzing Global and Local Variables | analyze
.	
.JA	Kwartzには、プレゼンテーションデータ/ロジックファイルを分析し、変数を調査する機能があります。
.EN	Kwartz have a function to analyze presentation data/logic files and inspect variables.
.	
.JA	Kwartzでは、メインプログラムで設定されて出力用スクリプトに渡される変数を「テンプレートグローバル変数」、
.JA	テンプレートの中でだけ使用される変数を「テンプレートローカル変数」と呼んでいます。
.JA	Kwartzは、変数がグローバルかローカルかを調べて報告する機能があります。
.EN	In Kwartz, variables are called 'template global variables' if they are set in the main program and are passed to output script.
.EN	Variables are called 'template local variables' if they are used only in the template.
.EN	Kwartz have a function to detect whether variables are template global or local and report the result.
.	
.JA	次の例をご覧ください。
.EN	Assume the following presentation data and presentation logic:
.	
.JA	プレゼンテーションデータ(analyze.html)：
.EN	Presentation Data (analyze.html):
.	.-------------------- analyze.html
.	<span kw:d="value:{{*title*}}">Analyzer Example</span>
.	<dl id="mark:items">
.	 <dt kw:d="value:{{*ctr*}}"></dt>
.	 <dd kw:d="value:{{*item*}}">Foo</dd>
.	</dl>
.	.--------------------
.	
.JA	プレゼンテーションロジック(analyze.plogic)：
.EN	Presentation Logic (analyze.plogic):
.	.-------------------- analyze.plogic
.	#items {
.	  plogic: {
.	    @stag;
.	    {{*ctr*}} = 0;
.	    foreach ({{*item*}} in {{*list*}}) {
.	      {{*ctr*}} += 1;
.	      @cont;
.	    }
.	    @etag;
.	  }
.	}
.	.--------------------
.	
.JA	この例では4つの変数があります。
.JA	このうち、{{,item,}}と{{,ctr,}}はテンプレート中でだけ使われるのでテンプレートローカル変数、
.JA	{{,title,}}と{{,list,}}はメインプログラムで設定されて出力用スクリプトに渡されるのでテンプレートグローバル変数です。
.EN	In this case, variables {{,ctr,}} and {{,item,}} are template local variables because they are used only in the template.
.EN	Variables {{,title,}} and {{,list,}} are template global variables because they are set in the main program and passed to output script.
.	
.JA	kwartzをコマンドランオプション {{,-a analyze,}} をつけて起動すると、グローバル変数とローカル変数を報告してくれます。
.EN	.#Kwartz can detect whether variables are global or local.
.EN	Invoking kwartz with the command-line option {{,-a analyze,}} reports template global or local variables.
.	
.JA	実行例：
.EN	Analyzing Example:
.	.====================
.	$ kwartz -a analyze -p analyze.plogic analyze.html
.	{{*Global: title list*}}
.	{{*Local:  ctr item*}}
.	.====================
.	
.	
.	
.JA	◎テンプレートグローバル/ローカル変数の名前を変更する	| rename
.EN	.$$ Rename Template Global/Local Variable Names		| rename
.	
.JA	Kwartzでは、テンプレートグローバル変数とテンプレートローカル変数の、両方または一方の名前にプレフィックスをつけることができます。
.JA	プレフィックスをつけるには、コマンドラインオプション「{{,--globalvar-prefix={{/prefix/}},}}」と「{{,--localvar-prefix={{/prefix/}},}}」を使用します。
.EN	The command-line option {{,--globalvar-prefix={{/prefix/}},}} and {{,--localvar-prefix={{/prefix/}},}}
.EN	add a prefix to global/local variable names in template.
.	
.JA	例えばRubyやPHPでは、メインプログラムで使用している変数名と、テンプレートのローカル変数名とが一致した場合、
.JA	テンプレート側の変数を変更することでメインプログラムの動作に影響を与えてしまうという問題があります。
.JA	これに対処するには、テンプレートローカル変数名に例えば「_」というプレフィックスをつけます。
.JA	
.EN	In Ruby or PHP, for example, if template local variables in templates have the same name of variables in main program,
.EN	assignment into template local variables effects the control of main program.
.EN	To address this problem, you should add a prefix such as '_' to template local variable names automatically.
.	
.JA	前の節で使用したanalyze.htmlとanalyze.plogicを使ってみます。
.EN	The following is the example using 'analyze.html' and 'analyze.plogic' shown in the previous section.
.	
.JA	実行例：
.EN	Compile:
.	.====================
.	$ kwartz -l eruby  -p analyze.plogic {{*--localvar-prefix='_'*}} analyze.html
.	$ kwartz -l php    -p analyze.plogic {{*--localvar-prefix='_'*}} analyze.html
.	$ kwartz -l jstl11 -p analyze.plogic {{*--localvar-prefix='_'*}} analyze.html
.	$ kwartz -l velocity -p analyze.plogic {{*--localvar-prefix='_'*}} analyze.html
.	.====================
.	
.JA	出力用スクリプト：
.EN	Output Script:
.	.--------------------
.	.<<<:! ./output.rb -p guide.d/analyze.plogic --localvar-prefix='_' guide.d/analyze.html
.	.--------------------
.	
.JA	なお設定ファイルの定数「GLOBALVAR_PREFIX」と「LOCALVAR_PREFIX」で、
.JA	デフォルトのプレフィックスを指定できます。
.EN	Constant GLOBALVAR_PREFIX and LOCALVAR_PREFIX in configuration file specifies the default prefix.
.	
.	
.	
.	
.JA	◎spanタグの削除	| span
.EN	.$$ Span Tag Deletion	| span
.	
.JA	Kwartzでは、ディレクティブしか含まないようなspanタグは、ダミータグとみなされて自動的に削除されます。
.EN	The span tags which contains only directives are regarded as dummy tags and deleted automatically.
.	
.JA	プレゼンテーションデータ：
.EN	Presentation Data:
.	.-------------------- topics-span1.pdata
.	<h1><span id="mark:title">title</span></h1>
.	
.	Hello <span id="value:user">World</span>!
.	.--------------------
.	
.JA	プレゼンテーションロジック：
.EN	Presentation Logic:
.	.-------------------- topics-span1.plogic
.	#title {
.	  value: title;
.	}
.	.--------------------
.	
.JA	出力用スクリプト(for eRuby)：
.EN	Output Script(for eRuby):
.	.--------------------
.	.<<<:! kwartz -l eruby -p guide.d/topics-span1.plogic guide.d/topics-span1.pdata
.	.--------------------
.	
.	
.JA	spanタグが他の属性を含んでいた場合は、削除されません。
.EN	The span tags are not removed when they have other attributes.
.	
.JA	プレゼンテーションデータ：
.EN	Presentation Data:
.	.-------------------- topics-span2.pdata
.	<h1><span id="mark:title" class="title">title</span></h1>
.	
.	Hello <span kw:d="value:user" style="color:black">World</span>!
.	.--------------------
.	
.JA	出力用スクリプト(for eRuby)：
.EN	Output Script(for eRuby):
.	.--------------------
.	.<<<:! kwartz -p guide.d/topics-span1.plogic guide.d/topics-span2.pdata
.	.--------------------
.	
.	
.JA	◎開始タグに式の値を追加する	 | topics-append
.EN	.$$ Appending Expression to Start Tag  | topics-append
.	
.JA	「{{,<input type="..." checked>,}}」のようにする場合は、次のようにします。
.EN	The following is an example to print only attribute variable such as {{,<input type="..." checked>,}}.
.	
.JA	プレゼンテーションデータ：
.EN	Presentation Data:
.	.-------------------- topics-append1.pdata
.	<input type="checkbox" name="foo" value="Y" id="foo" />
.	.--------------------
.	
.JA	プレゼンテーションロジック：
.EN	Presentation Logic:
.	.-------------------- topics-append1.plogic
.	#foo {
.	  append: flag ? ' checked' : '';
.	}
.	.--------------------
.	
.JA	出力用スクリプト：
.EN	Output Script:
.	.--------------------
.	.<<<:! ./output.rb -l eruby,php,jstl11,jstl10,velocity -p guide.d/topics-append1.plogic guide.d/topics-append1.pdata
.	.--------------------
.	
.JA	ディレクティブ {{,id="append:{{/expr/}}",}} でも同じことができます。
.EN	A directive {{,append({{/expr/}}),}} appends the value of the expression {{,{{/expr/}},}} in the element tag.
.	
.JA	プレゼンテーションデータ：
.EN	Presentation Data:
.	.-------------------- topics-append2.pdata
.	<input type="checkbox" name="foo" value="Y" id="append:flag?' checked':''" />
.	.--------------------
.	
.JA	.#出力用スクリプト：
.EN	.#Output Script:
.	.#.--------------------
.	.#.<<<:! ./output.rb -l eruby,php,jstl11,jstl10 guide.d/topics-append2.pdata
.	.#.--------------------
.	
.JA	また{{,checked="checked",}}や{{,selected="selected",}}を簡単に出力するための関数を用意しています。
.JA	「{{,C({{/expr/}}),}}」「{{,S({{/expr/}}),}}」「{{,D({{/expr/}}),}}」は式{{,{{/expr/}},}}が真だった場合に、
.JA	それぞれ「{{, checked="checked",}}」「{{, selected="selected",}}」「{{, disabled="disabled",}}」を出力します。
.EN	There are useful functions to print {{,checked="checked",}} or {{,selected="selected",}} easily.
.EN	{{,C({{/expr/}}),}}, {{,S({{/expr/}}),}}, {{,D({{/expr/}}),}} prints 
.EN	{{, checked="checked",}}, {{, selected="selected",}}, {{, disabled="disabled",}} respectively
.EN	when the expression {{,{{/expr/}},}} is true.
.	
.JA	プレゼンテーションデータ：
.EN	Presentation Data:
.	.-------------------- topics-append3.pdata
.	<input type="checkbox" name="foo" value="Y" id="foo" />
.	.--------------------
.	
.JA	プレゼンテーションロジック：
.EN	Presentation Logic:
.	.-------------------- topics-append3.plogic
.	#foo {
.	  append: C(foo == 100);
.	}
.	.--------------------
.	
.JA	出力用スクリプト：
.EN	Output Script:
.	.--------------------
.	.<<<:! ./output.rb -l eruby,php,jstl11,jstl10,velocity -p guide.d/topics-append3.plogic guide.d/topics-append3.pdata
.	.--------------------
.	
.	
.JA	◎プレゼンテーションロジックをターゲット言語で記述する	| rawcode
.EN	.$$ Describe Presentation Logic in Target Language	| rawcode
.	
.	
.JA	行が「{{,<%,}}」または「{{,<?,}}」で始まる場合、そこから行末まではそのまま出力されます。
.JA	これにより、プレゼンテーションロジックをRubyやPHPやJavaで直接記述することができます。
.EN	Lines staring with '{{,<%,}}' or '{{,<?,}}' are printed as it is.
.EN	It enables you to write presentation logics in Ruby, PHP, and Java.
.	
.	
.JA	プレゼンテーションロジック：
.EN	Presentation Logic:
.	.-------------------- topics-rawcode.plogic
.	#list {
.	  plogic: {
.	    @stag;
.	    <% ENV.each { |name, value| %>
.	      @cont;
.	    <% } %>
.	    @etag;
.	  }
.	}
.	.--------------------
.	
.	
.JA	「{{,<%,}}」または「{{,<?,}}」から行末までをraw-codeといいます。
.JA	raw-codeは文(statement)であり、式(expression)ではありません。
.JA	そのため、「plogic:」部に書くことはできますが「value:」部や「attr:」部に書くことはできません。
.EN	Lines starting with '{{,<%,}}' or '{{,<?,}}' are called 'raw-code'.
.EN	Raw-code is statement and not expression, therefore you can write raw-code in 'plogic:' part
.EN	but not in 'value:' part and 'attr:' part.
.	
.	
.	
.JA	◎Ruby on Railsで使用する	| rails
.EN	.$$ Kwartz with Ruby on Rails	| rails
.	
.	
.JA	Ruby on RailsでKwartzを使うには、コマンドオプションとして「-l erb」と「--globalvar-prefix='@'」をつけます。
.JA	Kwartz-rubyでは、これをまとめて行うコマンドオプション「-Rails」を特別に用意しています。
.EN	Kwartz-ruby has a special option '-Rails' for Ruby on Rails.
.EN	It is equivarent to '-l erb --globalvar-prefix=@'.
.	
.	
.JA	またプレゼンテーションロジックファイルにおいてRuby on Rails特有の関数を使う場合は、
.JA	「<% ... %>」や「<%= ... %>」を使います（もちろん、プレゼンテーションデータファイルに直接埋め込んでもよいです）。
.EN	If you want to use Rails-specific functions such as 'link_to()' or 'url_for()',
.EN	use '<% ... %>' or '<%= ... %>' (or embed them into presentation data file).
.	
.	
.JA	プレゼンテーションデータ(list.html)：
.EN	Presentation Data (list.html)
.	.-------------------- list.html
.	<html>
.	 <body>
.	
.	  <h1>Online Cookbook - All Recipes</h1>
.	  
.	  <table border="1">
.	   <tr>
.	    <th width="80%">Recipe</th>
.	    <th width="20%">Date</th>
.	   </tr>
.	   <tr {{*id="mark:recipes"*}}>
.	    <td><a href="..." {{*id="mark:recipe_title"*}}>Hot Chips</a></td>
.	    <td {{*id="mark:recipe_date"*}}>2004 November 11</td>
.	   </tr>
.	   <tr {{*id="dummy:d1"*}}>
.	    <td><a href="...">Ice Water</a></td>
.	    <td>2004 November 11</td>
.	   </tr>
.	  </table>
.	
.	  <p>
.	   <a href="..." {{*id="mark:recipe_new"*}}>Create new recipe</a>
.	  </p>
.	
.	 </body>
.	</html>
.	.--------------------
.	
.	
.JA	プレゼンテーションロジック(list.plogic)：
.EN	Presentation Logic (list.plogic)
.	.-------------------- list.plogic
.	#recipes {
.	  plogic: {
.JA	    recipe_url = null;    // ローカル変数と認識させるためのダミー文
.EN	    recipe_url = null;    // dummy statement to identify a variable as template local
.	    foreach (recipe in recipes) {
.	      <%= recipe_url = url_for(:action => "show", :id => recipe.id) %>
.	      @stag;
.	      @cont;
.	      @etag;
.	    }
.	  }
.	}
.	
.	#recipe_title {
.	  value: recipe.title;
.	  attr:  "href" recipe_url;
.	}
.	
.JA	// または次のようにしてもよい。
.EN	// Or
.	//  #recipe_title {
.	//    plogic: {
.	//      <%= link_to recipe.title, :action => "show", :id => recipe.id %>
.	//    }
.	//  }
.	
.	#recipe_date {
.	  value: recipe.date;
.	}
.	
.	#recipe_new {
.	  plogic: {
.	    <%= link_to "Create new recipe", :action => "new" %>
.	  }
.	}
.	
.JA	// または次のようにしてもよい。
.EN	// Or
.	//  #recipe_new {
.	//    attr: "href" action_new_url;
.	//    plogic: {
.	//      action_new_url = null;
.	//      <% action_new_url = url_for(:action => "new") %>
.	//      @stag;
.	//      @cont;
.	//      @etag;
.	//    }
.	//  }
.	.--------------------
.	
.	
.JA	コンパイル：
.EN	Compile:
.	.====================
.	$ kwartz {{*-Rails*}} -p list.plogic list.html > list.rhtml
.	.====================
.	
.	
.JA	出力用スクリプト：
.EN	Output Script:
.	.--------------------
.	.<<<:! kwartz-ruby -Rails -p guide.d/list.plogic guide.d/list.html
.	.--------------------
.	
.	
.	
.JA	◎テンプレートをRubyまたはPHPの関数にコンパイルする	| topic-defun
.EN	.$$ Compile Template into a Function of Ruby or PHP	| topic-defun
.	
.	
.JA	コマンドラインオプション「{{,-a defun,}}」を指定すると、テンプレートをRubyまたはPHPの関数に変換できます。
.EN	Using the command-line option '{{,-a defun,}}', you can compile templates into a function of Ruby or PHP.
.	
.	
.JA	プレゼンテーションデータ(hoge1.html)：
.EN	Presentation Data (hoge1.html)
.	.-------------------- hoge1.html
.	Hello @{user}@ !
.	<ul id="mark:list">
.	  <li id="value:item">xxx</li>
.	</ul>
.	.--------------------
.	
.JA	プレゼンテーションロジック(hoge1.plogic)：
.EN	Presentation Logic (hoge1.plogic)
.	.-------------------- hoge1.plogic
.	#list {
.	  plogic: {
.	    @stag;
.	    foreach (item in list) {
.	      @cont;
.	    }
.	    @stag;
.	  }
.	}
.	.--------------------
.	
.JA	コンパイル：
.EN	Compile:
.	.====================
.	$ kwartz -l eruby {{*-a defun*}} -p hoge1.plogic hoge1.html > hoge1.rb
.	$ kwartz -l php   {{*-a defun*}} -p hoge1.plogic hoge1.html > hoge1.php
.	.====================
.	
.	
.JA	出力用スクリプト：
.EN	Output Script:
.	.--------------------
.	.<<<:! ./output.rb -l eruby,php -a defun -p guide.d/hoge1.plogic guide.d/hoge1.html
.	.--------------------
.	
.	
.JA	関数は2つ定義されます。どちらでもお好きなほうをお使いください。
.JA	.* 引数をハッシュで与える関数{{,view_{{/filename/}}(),}}
.JA	.* 引数を明示的に指定する関数{{,_view_{{/filename/}}(),}}
.EN	Two functions are defined by '-a defun' option. You can use whichever you prefer.
.EN	.* {{,view_{{/filename/}}(),}} - a function which takes arguments by a hash object.
.EN	.* {{,_view_{{/filename/}}(),}} - a function which takes arguments explicitly.
.	
.	
.JA	.#メインプログラム：
.EN	.#Main Program:
.	.#.-------------------- hoge-main.php
.	.#<?php
.	.#// set $args
.	.#$user = "Kwartz";
.	.#$list = array('Foo', 'Bar', 'Baz');
.	.#{{*$args*}} = array('user'=>$user, 'list'=>$list);
.	.#
.	.#// output
.	.#include('hoge.php');
.	.#echo {{*expand_hoge1($args)*}};
.	.#?>
.	.#.--------------------
.	
.	
.JA	コマンドラインオプション「{{,-C {{/name/}},}}」でクラス名またはモジュール名を、
.JA	「{{,-F {{/name/}},}}」で関数名またはメソッド名を、
.JA	「{{,-A {{/name/}},}}」で引数を指定できます。
.JA	また設定ファイルの「DEFUN_CLASS」でクラス名またはモジュール名を、
.JA	「DEFUN_FUNCTION」で関数名またはメソッド名を指定できます。
.EN	You can specify funtion or method name with the command-line option '{{,-F {{/name/}},}}',
.EN	class or module name with '{{,-C {{/name/}},}}', and arguments with '{{,-A {{/arg1,arg2,.../}},}}'.
.EN	The constant DEFUN_CLASS and DEFUN_FUNCTION in configuration file also enables you to set
.EN	default class/module name and default function/method name.
.	
.	
.	.#@EOF
.	
.	
.	
.JA	◎タイムスタンプを比較して自動コンパイルを行う		| autocompile
.EN	.$$ Auto-compiling with Timestamp Comparison		| autocompile
.	
.	
.JA	プレゼンテーションファイルや出力用スクリプトファイルのタイムスタンプを実行時に比較して、自動コンパイルを行うことができます。
.JA	詳しくいうと、次の条件のときにコンパイルを行います。
.JA	.* 出力スクリプトファイルがない場合
.JA	.* プレゼンテーションデータファイルのほうが新しい場合
.JA	.* プレゼンテーションロジックファイルがあり、かつそちらのほうが新しい場合
.EN	Auto-compilation is available.
.EN	Auto-compilation is a function to compare each file's timestamp and compile it if needed.
.EN	Compilation will be done when:
.EN	.* The output script file does not exist.
.EN	.* The presentation data file is newer than the output script file.
.EN	.* The presentation logic file exists and it is newer than the output script file.
.	
.	
.JA	自動コンパイルを行うには、{{,kwartz_compile_template(),}}を使用します。
.JA	メインプログラムは、例えば次のようになります。
.EN	You can use auto-compile with {{,KwartzHelper::compile_template(),}}.
.EN	Here is an example of the main program:
.	.--------------------
.JA	$pdata  = 'example.html';      # プレゼンテーションデータ
.JA	$plogic = 'example.plogic';    # プレゼンテーションロジック
.JA	$view   = 'example.view';      # 出力用スクリプトファイル
.JA	$flag_escape = TRUE;           # サニタイズをする/しない
.EN	$pdata  = 'example.html';      # presentation data file
.EN	$plogic = 'example.plogic';    # presentation logic file
.EN	$view   = 'example.view';      # output script file
.EN	$flag_escape = TRUE;           # flag of sanitizing
.	
.	{{*require_once('Kwartz/KwartzHelper.php');*}}
.	{{*KwartzHelper::compile_template($pdata, $plogic, $view, $flag_escape)*}}
.	
.	include($view);
.	.--------------------
.	
.	
.	
.	.#@EOF
.	.-------------------- example1.rb
.	#!/usr/bin/ruby
.		member_list = [ 'Oboro', 'Ominae', 'Jaquemonde' ]
.		## ERBを使う方法
.		## use ERB
.		require 'erb'
.		require 'cgi'        # for sanitizing
.		str = File.open('guide.d/example1.rhtml') { |f| f.read() }
.		str.untaint
.		trim_mode = 1
.		erb = ERB.new(str, $SAFE, trim_mode)
.		print erb.result(binding())
.	.--------------------
.	
.	
.	
