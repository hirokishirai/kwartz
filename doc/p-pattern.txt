.=title:	Presentation Pattern Catalog
.?author:	Makoto Kuwata <kwa(at)kuwata-lab.com>
.?version:	$Rev$
.?release:	$Release$
.?lastupdate:	$Date$
.?stylesheet:	docstyle.css


.$ Preface	| preface*

Kwartz is the template system which realized the concept of '{{*Independence of Presentation Logic (IoPL)*}}.'
This concept enables to use complex presentation logics without breaking HTML design at all.

There are several patterns which help you to separate presentation logic from presentation data well.
These patterns are called 'Presentation Patterns.'

This document shows Presentation Patterns.


.$$ Table of Contents	| toc*

.#.+toc:
.<<< p-pattern.toc
.#.-toc:


.#.$$ ChangeLog		| changelog*
.#
.#.: 2005-06-27
.#	.- Wrong output script in the section 'Iterate Element Pattern' is corrected ([bug:1228301]).
.#	.- '<ul></ul>' is changed to '<dl></dl>' in the section 'Iterate Content Pattern' ([bug:1228301]).
.#
.#.: 2005-03-21
.#	.- add text for Kwartz directives.
.#	.- add subsubsection title for all patterns.
.#	.- add 'supplement' subsubsection for 'Replace Element with Value Pattern'.
.#.: 2005-02-19
.#	.- beta2 release
.#.: 2005-02-14
.#	.- beta1 release



.$ Replacement		| replacement


.$$ Replace Element with Value Pattern	| replace-elem-with-value


.$$$ Description			| replace-elem-with-value-desc

You can replace the element with the value of expression.
This is named 'Replace Element with Value Pattern.'


.$$$ Situation				| replace-elem-with-value-situation

This pattern is very useful to print out the value of a variable or an expression as text.


.$$$ Example Code			| replace-elem-with-value-example

.? Presentation Data:
.-------------------- replace1.pdata
Hello <span {{*id="mark:user"*}}>World</span>!
.--------------------

.? Presentation Logic:
.-------------------- replace1.plogic
/* print value of variable 'username' instead of the element */
#user {
  logic: {
    {{*print username*}}
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -l eruby -p replace1.plogic replace1.pdata)
.____________________


.$$$ Supplement				| replace-elem-with-value-suppliment

Kwartz supports the short-notation of this pattern.
   .-------------------- replace1a.plogic
   #user {
     elem: user;
   }
   .--------------------
   The output script will be:
   .--------------------
   .<<<:! (cd guide.d; kwartz -l eruby -p replace1a.plogic replace1.pdata)
   .--------------------



.$$ Replace Content with Value Pattern	| replace-cont-with-value


.$$$ Description			| replace-cont-with-value-desc

You can also replace only the content of the element in the same way.
This is named 'Replace Content with Value Pattern.'


.$$$ Situation				| replace-cont-with-value-situation

This pattern is used frequently because the situation to replace the content with value is very popular.


.$$$ Example Code			| replace-cont-with-value-example

.? Presentation Data:
.-------------------- replace2.pdata
<h1 {{*id="mark:title"*}}>Example</h1>
.--------------------

.? Presentation Logic:
.-------------------- replace2.plogic
/* print expression value instead of content text */
#title {
  logic: {
    _stag   # start-tag
    {{*print title *}}
    _etag   # end-tag
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -l eruby -p replace2.plogic replace2.pdata)
.____________________



.$$$ Supplement				| replace-cont-with-value-suppliment

 Kwartz provides the shorter notation for this pattern.
    .-------------------- replace2a.plogic
    #title {
      {{*cont: title;*}}
        /* or value: title; */
    }
    .--------------------
   The output will be:
   .--------------------
   .<<<:! (cd guide.d; kwartz -l eruby -p replace2a.plogic replace2.pdata)
   .--------------------

 Kwartz Directive '{{,title="cont: {{/expr/}}",}}' or '{{,title="value:{{/expr/}}",}}' lets you to use this pattern without presentation logic file.
    .--------------------
    <h1 {{*id="value: title"*}}>Example</h1>
    .--------------------



.$$ Default Content Pattern		| default-cont


.$$$ Description    			| default-cont-description

You can replace element or content only when a certain condition is true
and the original element or content is displayed when the condition is false.
This is named 'Default Content Pattern.'

This pattern is an combination of 'Replace Element with Value Pattern' and 'Delete Tag Pattern'.


.$$$ Situation				| default-cont-situation

For example, there may be a placeholder to display username, and string 'Guest' is
displayed when username is null or empty.


.$$$ Example Code			| default-content-example

The following is an example to print content text as default value when value is null or empty.

.? Presentation Data:
.-------------------- replace5.pdata
Hello <span {{*id="mark:user"*}}>World</span>!
.--------------------

.? Presentation Logic:
.-------------------- replace5.plogic
/* Print 'guest' as a default value when 'username' is empty string */
#user {
  logic: {
    if username && !username.empty?
      {{*print username*}}   # print expression
    else
      {{*_cont*}}            # print content text
    end
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -p replace5.plogic replace5.pdata)
.____________________


.$$$ Suppliement			| default-content-suppliment

Directive 'title="default: {{/expr/}}"' is for Default Content Pattern.

.-------------------- replace5a.pdata
Hello <span {{*title="default: user"*}}>World</span>!
.--------------------
The output is:
.____________________
.<<<:! (cd guide.d; kwartz replace5a.pdata)
.____________________



.$$ Replace Element with Element/Content Pattern	| replace-elem-with-elem


.$$$ Description			| replace-elem-with-elem-desc

You can replace the element with other element or content.
This pattern is named 'Replace Element with Element Pattern.'
or 'Replace Element with Content Pattern'.


.$$$ Situation				| replace-elem-with-elem-situation

This pattern is very useful to reuse the element in other place.


.$$$ Example Code			| replace-elem-with-elem-example

.? Presentation Data:
.-------------------- replace3.pdata
<div {{*id="mark:links"*}}>
 <a href="/">HOME</a> | <a href="/doc">Document</a> | <a href="/faq">FAQ</a>
</div>

<p>Welcome to my Home Page!</p>

<div {{*id="mark:links2"*}}>
  Home | Document | FAQ
</div>
.--------------------


.? Presentation Logic:
.-------------------- replace3.plogic
/* replace the element 'links2' with the element 'links' */
#links2 {
  logic: {
    {{*_element(links)*}}
  }
}
.--------------------


{{,_element({{/name/}}),}} represents the element which is marked with {{,id="mark:{{/name/}}",}} or {{,id="{{/name/}}",}}.


.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -p replace3.plogic replace3.pdata)
.____________________

Use '_content({{/name/}})' instead of '_element({{/name/}})'
if you want to reuse content of other element.

.? Presentation Logic:
.-------------------- replace3a.plogic
/* replace the element 'links2' with the content 'links' */
#links2 {
  logic: {
    {{*_content(links)*}}
  }
}
.--------------------



.$$$ Supplement				| replace-elem-with-elem-supplement

 Directive '{{,title="replace_element_with: _element({{/name/}})",}}' and '{{,title="replace_element_with: _content({{/name/}})",}}' lets you to use this pattern without presentation logic file.
    .--------------------
    <div {{*id="mark:links"*}}>
     <a href="/">HOME</a> | <a href="/doc">Document</a> | <a href="/faq">FAQ</a>
    </div>
    
    <p>Welcome to my Home Page!</p>
    
    <div {{*id="replace_element_with: _element(links)"*}}>
      Home | Document | FAQ
    </div>
    .--------------------

 The command-line option '{{,-i {{/file/}},{{/file2/}},...,}}' enables you
   to use elements which are described in other files.
   See Kwartz Users' Guide for details.
   
.#    .? Presentation Data(links.html):
.#    .-------------------- links.html
.#    <div {{*id="mark:links"*}}>
.#     <a href="/">HOME</a> | <a href="/doc">Document</a> | <a href="/faq">FAQ</a>
.#    </div>
.#    .--------------------
.#    
.#    .? Presentation Data(page.html):
.#    .-------------------- page.html
.#    <div {{*id="mark:links1"*}}> Home | Document | FAQ </div>
.#    
.#    <p>Welcome to my Home Page!</p>
.#    
.#    <div {{*id="mark:links2"*}}> Home | Document | FAQ </div>
.#    .--------------------
.#    
.#    .? Presentation Logic(page.plogic):
.#    .-------------------- page.plogic
.#    #links1 {
.#      logic: {
.#        {{*_element(links)*}}
.#      }
.#    }
.#    #links2 {
.#      logic: {
.#        {{*_element(links)*}}
.#      }
.#    }
.#    .--------------------
.#    
.#    .? Compile:
.#    .====================
.#    $ kwartz -l eruby {{*-i links.html*}} -p page.plogic page.html
.#    .====================
.#    
.#    .? Output Script:
.#    .____________________
.#    .<<<:! (cd guide.d; kwartz -i links.html -p page.plogic page.html)
.#    .____________________




.$$ Replace Content with Element/Content Pattern	| replace-cont-with-elem


.$$$ Description			| replace-cont-with-elem-desc

You can replace content of an element with other element or content.
This pattern is named 'Replace Content with Element Pattern' and
'Replace Content with Content Pattern'.


.$$$ Situation				| replace-cont-with-elem-situation

.#This pattern is very useful to import elements marked in other presentation data files.
This pattern is very useful to separate contents data and design layout into separate files.


.$$$ Example Code			| replace-cont-with-elem-example

The following example contains four files.
.* contents.html, contents.plogic - repsesents contents data.
.* layout.html, layout.plogic - represents desing layout.

.? Presentation Data(contents.html):
.-------------------- contents.html
<html>
  <body>
    
    <p>menu:</p>
    <ul {{*id="mark:menu"*}}>
      <li><a href="..." {{*id="mark:menu_item"*}}>menu1</a></li>
    </ul>

    <p>article:</p>
    <div {{*id="mark:article"*}}>
      <h2>What is Kwartz?</h2>
      <p>Kwartz is a template system, which realized the concept
         <strong>`Independence of Presentation Logic</strong>.
      </p>
    </div>
    
  </body>
</html>
.--------------------

.? Presentation Logic(contents.plogic):
.-------------------- contents.plogic
#menu {
  logic: {
    _stag
    for item in menu_list
      _cont
    end
    _etag
  }
}

#menu_item {
  value:  item['name'];
  attrs:  "href" item['url'];
}
.--------------------

.? Presentation Data(layout.html):
.-------------------- layout.html
<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
  <head>
    <title>webpage</title>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" type="text/css" href="design.css">
  </head>
  <body>

    <table border="0">
      <tr>
        
        <!-- menu part -->
        <td class="menu" width="100" valign="top"
	    {{*id="mark:placeholder_menu"*}}>
          <ul>
            <li>menu1</li>
            <li>menu2</li>
            <li>menu3</li>
          </ul>
        </td>
        
        <!-- article part -->
        <td class="article" width="400" valign="top"
	    {{*id="mark:placeholder_article"*}}>
          aaa<br>
          bbb<br>
          ccc<br>
          ddd<br>
        </td>
        
      </tr>

      <!-- footer part -->
      <tr>
        <td colspan="2" class="copyright">
          copyright&copy; 2004-2006 kuwata-lab.com All Rights Reserverd
        </td>
      </tr>
    </table>
    
  </body>
</html>
.--------------------

.? Presentation Logic(layout.plogic):
.-------------------- layout.plogic
/* replace content with other element */
#placeholder_menu {
  logic: {
    _stag
    {{*_element(menu)*}}
    _etag
  }
}

/* replace content with other content */
#placeholder_article {
  logic: {
    _stag
    {{*_content(article)*}}
    _etag
  }
}
.--------------------

Compilation requires the command-line option {{,-i {{/file1,file2,.../}},}}
which enables to import elements defined in other files.

Compile:
.====================
$ kwartz -l eruby  {{*-i contents.html*}} -p contens.plogic,layout.plogic layout.html
.====================

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -i contents.html -p contents.plogic,layout.plogic layout.html)
.____________________



.$$$ Supplement				| replace-cont-with-elem-supplement

 Kwartz Directive '{{,title="replace_content_with:_element({{/name/}})",}}' and '{{,title="replace_content_with:_content({{/name/}})",}}' lets you to use this pattern without presentation logic file(layout.plogic).
    .? Presentation Data(layout.html):
    .--------------------
                 :
            <!-- menu part -->
            <td class="menu" width="100" valign="top"
                {{*title="replace_content_with: _element(menu)"*}}>
              <ul>
                <li>menu1</li>
                <li>menu2</li>
                <li>menu3</li>
              </ul>
            </td>
            
            <!-- article part -->
            <td class="article" width="400" valign="top">
                {{*title="replace_content_with: _content(article)"*}}>
              aaa<br>
              bbb<br>
              ccc<br>
              ddd<br>
            </td>
                 :
    .--------------------



.$ Deletion	| deletion


.$$ Delete Element Pattern	| delete-elem


.$$$ Description			| delete-elem-desc

If presentation logic is empty, the element is not printed out.
This pattern is named 'Delete Element Pattern' or 'Dummy Element Pattern.'


.$$$ Situation				| delete-elem-situation

This pattern enables you to delete dummy element in presentation data.


.$$$ Example Code			| delete-elem-example

.? Presentation Data:
.-------------------- dummy-elem.pdata
<ul>
  <li>foo</li>
  <li {{*id="dummy"*}}>bar</li>
</ul>
.--------------------

.? Presentation Logic:
.-------------------- dummy-elem.plogic
/* delete dummy element */
#dummy {
  logic: {
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -p dummy-elem.plogic dummy-elem.pdata)
.____________________


.$$$ Supplement				| delete-elem-supplement

Kwartz directive '{{,id="dummy:{{/str/}}",}}' lets you to use this pattern without presentation logic file.

.? Presentation Data:
.--------------------
<ul>
  <li>foo</li>
  <li {{*id="dummy:d1"*}}>bar</li>
</ul>
.--------------------




.$$ Delete Tag Pattern		| delete-tag


.$$$ Description			| delete-tag-desc

If you use only {{,_cont,}} and don't use {{,_stag,}} and {{,_cont,}},
you can remove start and end tags of the element.
This pattern is named 'Delete Tag Pattern' or 'Dummy Tag Pattern.'


.$$$ Situation				| delete-tag-situation

This pattern is very useful if you want to print tags according to condition.


.$$$ Example Code			| delete-tag-example

.? Presentation Data:
.-------------------- dummy-tag.pdata
<a href="..." {{*id="mark:next"*}}>Next</a>
.--------------------

.? Presentation Logic:
.-------------------- dummy-tag.plogic
/* delete tags when url is empty */
#next {
  attrs:  "href" url;
  logic: {
    if !url || url.empty?
      {{*_cont*}}
    else
      _stag
      _cont
      _etag
    end
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -p dummy-tag.plogic dummy-tag.pdata)
.____________________



.$ Iteration	| iteration


.$$ Iterate Element Pattern	| iterate-elem


.$$$ Description			| iterate-elem-desc

Iteration which contains {{,_stag,}}, {{,_cont,}}, and {{,_etag,}} represents to iterate the element.
This pattern is named 'Iterate Element' pattern.


.$$$ Situation				| iterate-elem-situation

The situation is very popular which requres to print list items.
This pattern is very useful for all these situations.


.$$$ Example Code			| iterate-elem-example

.? Presentation Data:
.-------------------- iterate-elem.pdata
<table>
  <tr {{*id="mark:list"*}}>
   <td title="value: item">item</td>
  </tr>
</table>
.--------------------

.? Presentation Logic:
.-------------------- iterate-elem.plogic
/* iterate element */
#list {
  logic: {
    {{*for item in list*}}
      _stag
      _cont
      _etag
    {{*end*}}
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -p iterate-elem.plogic iterate-elem.pdata)
.____________________


.$$$ Supplement				| iterate-elem-supplement

 Kwartz directive {{,title="for {{/item/}} in {{/list/}}",}} lets you to use this pattern without presentation logic file.
    .--------------------
    <table>
      <tr {{*title="for item in list"*}}>
        <td title="value: item">item</td>
      </tr>
    </table>
    .--------------------



.$$ Iterate Content Pattern	| iterate-cont


.$$$ Description			| iterate-cont-desc

Iteration which contains only {{,_cont,}} represents to iterate the content.
This pattern is named 'Iterate Content' pattern.


.$$$ Situation				| iterate-cont-situation

This pattern is very useful when creating <dl></dl> list or table which repeats several rows.


.$$$ Example Code			| iterate-cont-example

.? Presentation Data:
.-------------------- iterate-cont.pdata
<dl {{*id="mark:list"*}}>
  <dt title="value: item.text">text</dt>
  <dd title="value: item.desc">description</dd>
</dl>
.--------------------

.? Presentation Logic:
.-------------------- iterate-cont.plogic
/* iterate only content */
#list {
  logic: {
    _stag
    {{*for item in items*}}
      _cont
    {{*end*}}
    _etag
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -p iterate-cont.plogic iterate-cont.pdata)
.____________________


.$$$ Supplement				| iterate-cont-supplement

 Kwartz directive {{,title="list {{/item/}} in {{/list/}}",}} lets you to use this pattern without presentation logic file.
    .--------------------
    <dl {{*title="list item in items"*}}>
      <dt title="value: item.text">text</dt>
      <dd title="value: item.desc">description</dd>
    </dl>
    .--------------------



.$ Selection	| selection


.$$ Select Element/Content Pattern	| select-elem


.$$$ Description			| select-elem-desc

The following is an example to choose a certain element or content from some elements.
This pattern is named 'Select Element Pattern' or 'Select Content Pattern'.


.$$$ Situation				| select-elem-situation

This pattern is very useful when you want to change data according to conditions.


.$$$ Example Code			| select-elem-example

.? Presentation Data:
.-------------------- select-elem.pdata
<div id="mark:message">
  <span style="color:red"   {{*id="mark:error"*}}>ERROR!</span>
  <span style="color:blue"  {{*id="mark:warning"*}}>Warning:</span>
  <span style="color:black" {{*id="mark:good"*}}>No error.</span>
</div>
.--------------------

.? Presentation Logic:
.-------------------- select-elem.plogic
/* select element according to status */
#message {
  logic: {
    if status == 'error'
      {{*_element(error)*}}      # ERROR!
    else if (status == 'warning')
      {{*_element(warning)*}}    # Warning:
    else
      {{*_element(good)*}}       # No error.
    end
  }
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -p  select-elem.plogic select-elem.pdata)
.____________________


.$$$ Supplement				| select-elem-supplement

 Kwartz directive '{{,title="if {{/condition/}}",}}', '{{,title="elsif {{/condition/}}",}}', and '{{,title="else",}}'
   let you to use this pattern without presentation logic file.
    .--------------------
    <div>
      <span style="color:red"   {{*title="if status=='error'"*}}>ERROR!</span>
      <span style="color:blue"  {{*title="elsif status=='warning'"*}}>Warning:</span>
      <span style="color:black" {{*title="else"*}}>No error.</span>
    </div>
    .--------------------




.$$ Pick-up Element/Content Pattern	| pickup-elem


.$$$ Description			| pickup-elem-desc

If you want to use certain elements or contents, do marking the elements and use only them in presentation logic.
Unmarked elements are ignored and not printed.
This pattern is named 'Pick-up Element Pattern' or 'Pick-up Content Pattern'.


'Pick-up Element' pattern is opposite of 'Dummy Element' pattern.
In 'Dummy Element' pattern, dummy elements are marked and removed so that necessary elements are leaved.
In 'Pick-up Element' pattern, necessary elements are marked and leaved so that dummy elements are removed.


.$$$ Situation				| pickup-elem-situation

This pattern is useful when many dummy datas are exist.


.$$$ Example Code			| pickup-elem-example

.? Presentation Data:
.#.-------------------- pickup-elem.pdata
.#<html>
.#  <body>
.#    <div {{*id="breadcrumbs"*}}>
.#      <a href="@{item['path']}@" {{*id="mark:crumb"*}}>@{item['name']}@</a>
.#      <span {{*id="mark:separator"*}}>&gt;</span>
.#      <a href="/aaa/">AAA</a> &lt;
.#      <a href="/aaa/bbb/">BBB</a> &lgt;
.#      <a href="/aaa/bbb/ccc">CCC</a> &lgt;
.#      <strong {{*id="mark:title"*}}>@{title}@</strong>
.#    </div>
.#  </body>
.#</html>
.#.--------------------
.-------------------- pickup-elem.pdata
<html>
  <body>
    <div {{*id="breadcrumbs"*}}>
      <a href="/" {{*id="mark:crumb"*}}>Home</a>
      <span {{*id="mark:separator"*}}>&gt;</span>
      <a href="/aaa/">AAA</a> &lt;
      <a href="/aaa/bbb/">BBB</a> &lgt;
      <a href="/aaa/bbb/ccc">CCC</a> &lgt;
      <strong {{*id="mark:title"*}}>title</strong>
    </div>
  </body>
</html>
.--------------------

.? Presentation Logic:
.-------------------- pickup-elem.plogic
#breadcrumbs {
  logic: {
    for item in list
      {{*_element(crumb)*}}          # print <a>...</a>
      {{*_content(separator)*}}      # print '&gt;'
    end
    {{*_element(title)*}}            # print <strong>title</strong>
  }
}

#crumb {
  value:  item['name'];
  attrs:  "href" item['path'];
}
#title {
  value: title;
}
.--------------------

.? Output Script:
.____________________
.<<<:! (cd guide.d; kwartz -l eruby -p pickup-elem.plogic pickup-elem.pdata)
.____________________


.#The above example should be described as following.
.#
.#.? Presentation Data:
.#.-------------------- pickup-elem.pdata
.#<html>
.#  <body>
.#    <div {{*id="breadcrumbs"*}}>
.#      <a href="/" {{*id="mark:crumb"*}}>Home</a>
.#      <span {{*id="mark:separator"*}}>&gt;</span>
.#      <a href="/aaa/">AAA</a> &lt;
.#      <a href="/aaa/bbb/">BBB</a> &lgt;
.#      <a href="/aaa/bbb/ccc">CCC</a> &lgt;
.#      <strong {{*id="mark:title"*}}>Page Title</strong>
.#    </div>
.#  </body>
.#</html>
.#.--------------------
.#
.#.? Presentation Logic:
.#.-------------------- pickup-elem.plogic
.##breadcrumbs {
.#  logic: {
.#    foreach (item in list) {
.#      {{*@element(crumb);*}}          // print <a>...</a>
.#      {{*@element(separator);*}}      // print '&gt;'
.#    }
.#    {{*@element(title);*}}            // print <b>title</b>
.#  }
.#}
.##crumb {
.#  value:  item['name'];
.#  attrs:  "href" item['path'];
.#}
.##title {
.#  value: title;
.#}
.#.--------------------



.$$ Extract Element/Content Pattern	| extract-elem


.$$$ Description			| extract-elem-desc

It is able to extract a certain element or content form the whole presentation data.
Other element and text strings are not printed.
This pattern is named 'Extract Element Pattern' or 'Extract Content Pattern'.


.$$$ Situation				| extract-elem-situation

This pattern is very useful to extract HTML fragments and make them libraries.


.$$$ Example Code			| extract-elem-example

The following is an example to extract the HTML fragments 'tablist', 'menulist', and 'copyright' and generates the output scripts for them.

.#++++++
.? Style Sheet (design.css):
.-------------------- design.css
.tabs a {
	border-style: solid;
	border-color: #006699;
	border-width: 1px 1px 0px 1px;
	color: #006699;
	font-weight: bold;
	text-decoration:none;
	padding: 4px 10px 1px 10px;
	margin: 0px 0px 0px 20px;
}
.tabs a.selected {
	background-color:#006699;
	color:#FFFFFF;
}
.tabs a:hover, .tabs a:active {
	background-color: #CCEEFF;
}
.tabsline {
	border-style:solit;
	background-color:#006699;
	padding:2px;
	border-width:0;
}
.menus  {
	border-style: solid;
	border-color: #006699;
	border-width: 1px 1px 1px 1px;
	width:120;
}
.menus a {
	color:#006699;
	padding: 4px 10px 1px 10px;
	text-decoration:none;
}
.menus a.selected {
	font-weight:bold;
}
.menus a:hover, .menus a:active {
	text-decoration:underline;
}
.menu_title {
	color:#FFFFFF;
	background-color:#006699;
	font-weight:bold;
	padding:3 10 2 10;
	width:120;
}
.copyright {
	font-size:small;
	color:#999999;
}
.--------------------
.#------

.? Presentation Data ({{<design.html>}}):
.-------------------- design.html
<html {{*id="mark:whole"*}}>
  <head>
    <title>Design Examples</title>
    <link rel="stylesheet" href="design.css" type="text/css">
  </head>
  <body>

    <div {{*id="mark:tablist"*}}>
      <div class="tabs" id="mark:tabs">
        <a href="/" class="" {{*id="mark:tab"*}}>Home</a>
        <a href="/product/" class="selected">Product</a>
        <a href="/download/" class="">Download</a>
        <a href="/support/" class="">Support</a>
      </div>
      <div class="tabsline">
      </div>
    </div>

    <br>

    <div {{*id="mark:menulist"*}}>
      <span class="menu_title" id="value:menu_title">MenuList</span>
      <div class="menus" {{*id="mark:menus"*}}>
        <a href="/cgi-bin/email.cgi" class="" {{*id="mark:menu"*}}>E-Mail</a>
        <span {{*id="mark:menu_separator"*}}><br></span>
        <a href="/cgi-bin/board.cgi" class="selected">MesgBoard</a><br>
        <a href="/cgi-bin/photo.cgi" class="">PhotoAlbum</a><br>
        <a href="/cgi-bin/greeting.cgi" class="">GreetingCard</a><br>
      </div>
    </div>
    <br>
      
    <p> ..... </p>
    <p> ..... </p>
    <p> ..... </p>
    
    <div align="center" class="copyright" {{*id="mark:copyright"*}}>
      Copyright&copy; 2004-2005 kuwata-lab. All Rights Reserved.
    </div>
    
  </body>
</html>
.--------------------


.? Presentation Logic (copyright.plogic):
.-------------------- copyright.plogic
/* replace the 'whole' element with the element you want to extract */
{{*#whole*}} {
  logic: {
    {{*_element(copyright)*}}
  }
}
.--------------------


.? Presentation Logic (tablist.plogic):
.-------------------- tablist.plogic
/* replace the 'whole' element with the element you want to extract */
{{*#whole*}} {
  logic: {
    {{*_element(tablist)*}}
  }
}

#tabs {
  logic: {
    _stag
    for tab in tablist
      klass = current_tabname == tab['name'] ? 'selected' : ''
      _element(tab)
    end
    _etag
  }
}

#tab {
  value:  tab['name'];
  attrs:  "href" tab['href'],
          "class" klass;
}
.--------------------


.? Presentation Logic (menulist.plogic):
.-------------------- menulist.plogic
/* replace the 'whole' element with the element you want to extract */
{{*#whole*}} {
  logic: {
    {{*_element(menulist)*}}
  }
}

#menus {
  logic: {
    _stag
    foreach (menu in menulist) {
      _element(menu)
      _element(menu_separator)
    }
    _etag
  }
}

#menu {
  value:   menu['name'];
  attrs:   "href" menu['cgipath'],
           "class" klass;
  logic: {
    klass = current_menu == menu['name'] ? 'selected' : ''
    _elem
  }
}
.--------------------


.? Compile:
.====================
### copyright
$ kwartz -l eruby -p copyright.plogic design.pdata > copyright.rhtml

### tablist
$ kwartz -l eruby -p tablist.plogic   design.pdata > tablist.rhtml

### menulist
$ kwartz -l eruby -p menulist.plogic  design.pdata > menulist.rhtml
.====================


.? Output Script (copyright.rhtml):
.____________________
.<<<:! (cd guide.d; kwartz -l eruby -p copyright.plogic design.html)
.____________________

.? Output Script (tablist.rhtml):
.____________________
.<<<:! (cd guide.d; kwartz -l eruby -p tablist.plogic design.html)
.____________________

.? Output Script (menulist.rhtml):
.____________________
.<<<:! (cd guide.d; kwartz -l eruby -p menulist.plogic design.html)
.____________________


.$$$ Supplement				| extract-elem-supplement

 The command-line option '{{,-X {{/name/}},}}' extracts the element marked with {{,{{/name/}},}} in kwartz-ruby.

 The command-line option '{{,-x {{/name/}},}}' extracts the content of the element marked with {{,{{/name/}},}} in kwartz-ruby.
