/*
 * $Rev$
 * $Release$
 * $Copyright$
 */
[%
    case ENV['KIND']
    when  /expr/i,  /expression/i          ;  kind = :expr
    when  /stmt/i,  /statement/i           ;  kind = :stmt
    when  /plogic/i, /presentationlogic/i  ;  kind = :plogic
    when  /token/i                         ;  kind = :token                       
    end
    kind or raise "*** internal error"

    flag_table = {
      :expr   => [true,  true,  false, false],
      :stmt   => [true,  true,  true,  false],
      :plogic => [true,  true,  true,  true ],
      :token  => [false, true,  false, false],
    }
    flag_import, flag_expr, flag_stmt, flag_plogic = flag_table[kind]
    
 %]

%{
package kwartz;

[% if flag_import %]
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
[%#import kwartz.Scanner; %]
[% end %]
%}


%token  IDENT
%token  VARIABLE INTEGER FLOAT STRING TRUE FALSE NULL
%token  PLUS_EQ MINUS_EQ STAR_EQ SLASH_EQ PERCENT_EQ
%token  CONCAT CONCAT_EQ
%token  EQ NE GT GE LT LE
%token  AND OR AND_EQ OR_EQ
%token  FUNCALL METHOD PROPERTY
%token  INDEX INDEX2
%token  UPLUS UMINUS CONDITIONAL

%token  PRINT EXPR IF ELSEIF ELSE WHILE FOREACH BREAK CONTINUE BLOCK
%token  NATIVE_STMT NATIVE_EXPR
%token  STAG CONT ETAG ELEM ELEMENT CONTENT

%token  COMMAND SELECTOR DECLARATION RULESET
%token  P_STAG P_CONT P_ETAG P_ELEM P_VALUE P_ATTRS P_APPEND P_REMOVE P_TAGNAME P_LOGIC
%token  P_BEGIN P_END P_BEFORE P_AFTER P_GLOBAL

%token  ERROR


[% if flag_expr %]
%right '=' PLUS_EQ MINUS_EQ STAR_EQ SLASH_EQ PERCENT_EQ CONCAT_EQ AND_EQ OR_EQ
%right '?' ':'
%left  OR
%left  AND
%nonassoc EQ NE '>' GE '<' LE
%left  '+' '-' CONCAT
%left  '*' '/' '%'
%left  '!'
%left  '.' '[' ']' INDEX2
[% end %]


[% if flag_expr %]
%type <Ast.Expression> expr primary
%type <Ast.Literal> word literal
%type <List> args
%type <Parser.Info> IDENT STRING INTEGER FLOAT TRUE FALSE NULL
%type <Parser.Info> '+' '-' '*' '/' '%' CONCAT EQ NE '>' GE '<' LE AND OR '!' '?' ':'
%type <Parser.Info> '=' PLUS_EQ MINUS_EQ STAR_EQ SLASH_EQ PERCENT_EQ CONCAT_EQ AND_EQ OR_EQ
%type <Parser.Info> '(' ')' '[' ']' INDEX2 ',' '.'
[% end %]
[% if flag_stmt %]
%type <List> stmts
%type <Ast.Statement> stmt
%type <Ast.Statement> block else_clause
%type <Parser.Info> PRINT FOREACH WHILE IF ELSEIF ELSE
%type <Parser.Info> BREAK CONTINUE STAG ETAG CONT ELEM ELEMENT CONTENT
%type <Parser.Info> in ';' '{' '}'
[% end %]
[% if flag_plogic %]
%type  <List> plogic rulesets commands command selectors declarations
%type  <String> command_arg
%type  <Ast.Ruleset> ruleset
%type  <Ast.Selector> selector
%type  <Ast.Declaration> declaration
%type  <Parser.Info> COMMAND SELECTOR
%type  <Parser.Info> P_STAG P_ETAG P_CONT P_ELEM P_VALUE P_ATTRS P_APPEND P_REMOVE P_TAGNAME P_LOGIC
%type  <Parser.Info> P_BEGIN P_END P_BEFORE P_AFTER
%type  <null> off on
%type  <Map> attrs
%type  <String> name
%type  <List> exprs
%type  <List> names
[% end %]


%%


[% if flag_plogic %]

  plogic   : commands rulesets                { $1.addAll($2); $$ = $1; }
           ;

  commands : commands command                 { $1.addAll($2); $$ = $1; }
           |                                  { $$ = new ArrayList(); }
	   ;

  command  : COMMAND command_arg ';'          { $$ = handleCommand($1.getValue(), $2, $1); } // list of ruleset

  command_arg : STRING                        { $$ = $1.getValue(); }

  rulesets : rulesets ruleset                 { $1.add($2); $$ = $1; }
           |                                  { $$ = new ArrayList(); }  // list of ruleset

  ruleset  : selectors '{' declarations '}'   { $$ = _f.createRuleset($2, $1, $3, $4); }

  selectors : selectors ',' selector          { $1.add($3); $$ = $1; }
            | selector                        { List l = new ArrayList(); l.add($1); $$ = l; }

  selector  : SELECTOR                        { $$ = _f.createSelector($1); }
            | IDENT                           { $$ = _f.createSelector($1); }

  declarations : declarations declaration     { $1.add($2); $$ = $1; }
               |                              { $$ = new ArrayList(); }

  declaration  :  P_STAG    ':' off expr  on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_ETAG    ':' off expr  on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_CONT    ':' off expr  on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_ELEM    ':' off expr  on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_VALUE   ':' off expr  on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_ATTRS   ':' off attrs on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_APPEND  ':' off exprs on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_REMOVE  ':' off names on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_TAGNAME ':' off name  on ';'  { $$ = _f.createDeclaration($1, $4); }
               |  P_LOGIC   ':' '{' off stmts on '}'  { $$ = _f.createLogicDeclaration($1, $5, $7); }
               |  P_BEGIN   ':' '{' off stmts on '}'  { $$ = _f.createLogicDeclaration($1, $5, $7); }
               |  P_END     ':' '{' off stmts on '}'  { $$ = _f.createLogicDeclaration($1, $5, $7); }
               |  P_BEFORE  ':' '{' off stmts on '}'  { $$ = _f.createLogicDeclaration($1, $5, $7); }
               |  P_AFTER   ':' '{' off stmts on '}'  { $$ = _f.createLogicDeclaration($1, $5, $7); }

  off    :                         { _scanner.setRulesetMode(false); }  // stmt, expr
  on     :                         { _scanner.setRulesetMode(true);  }  // ruleset

  attrs  :  attrs ',' name expr    { Map m = $1; m.put($3, $4); $$ = m; }
         |  name expr              { Map m = new HashMap(); m.put($1, $2); $$ = m; }
/*
  attrs  :  attrs ',' name expr    { List l = $1; l.add(new Object[] { $3, $4 }); $$ = l; }
         |  name expr              { List l = new ArrayList(); l.add(new Object[] { $1, $2 }); $$ = l; }
*/

  exprs  :  exprs ',' expr         { List l = $1; l.add($3); $$ = l; }
         |  expr                   { List l = new ArrayList(); l.add($1); $$ = l; }
 
  names  :  names ',' name         { List l = $1; l.add($3); $$ = l; }
         |  name                   { List l = new ArrayList(); l.add($1); $$ = l; }

  name   :  STRING                 { $$ = $1.getValue(); }   // name is a string and not an expression

[% end %]


[% if flag_stmt %]
stmts   :  stmts stmt          { $1.add($2); $$ = $1; }
	|                      { $$ = new ArrayList(); }
	;

stmt    : PRINT '(' args ')' ';'                 { $$ = _f.createPrintStatement($1, $3); }
        | FOREACH '(' primary in expr ')' block  { $$ = _f.createForeachStatement($1, $3, $5, $7); }
	| WHILE '(' expr ')' block               { $$ = _f.createWhileStatement($1, $3, $5); }
	| IF '(' expr ')' block else_clause      { $$ = _f.createIfStatement($1, $3, $5, $6); }
	| BREAK ';'                              { $$ = _f.createBreakStatement($1); }
	| CONTINUE ';'                           { $$ = _f.createContinueStatement($1); }
	| STAG ';'                               { $$ = _f.createStagStatement($1); }
	| CONT ';'                               { $$ = _f.createContStatement($1); }
	| ETAG ';'                               { $$ = _f.createEtagStatement($1); }
	| ELEM ';'                               { $$ = _f.createElemStatement($1); }
	| ELEMENT '(' IDENT ')' ';'              { $$ = _f.createElementStatement($1, $3); }
	| CONTENT '(' IDENT ')' ';'              { $$ = _f.createContentStatement($1, $3); }
	| expr ';'                               { $$ = _f.createExpressionStatement($2, $1); }
	;

block   : '{' stmts '}'       { $$ = _f.createBlockStatement($1, $2); }
        ;

else_clause : ELSEIF '(' expr ')' block else_clause   { $$ = _f.createIfStatement($1, $3, $5, $6); }
            | ELSE IF '(' expr ')' block else_clause  { $$ = _f.createIfStatement($2, $4, $6, $7); }
            | ELSE block                         { $$ = $2; }
	    |                                    { $$ = null; }
            ;

in      : '='
        | IDENT  {
	        if (! $1.getValue().equals("in")) {
	              throw new SyntaxException("syntax error", $1.getLinenum(), $1.getColumn());
		}
          }
        ;
[% end %]

[% if flag_expr %]
expr     :  expr '+' expr    { $$ = _f.createArithmeticExpression($2, $1, $3); }  // (info, expr, expr)
         |  expr '-' expr    { $$ = _f.createArithmeticExpression($2, $1, $3); }
         |  expr '*' expr    { $$ = _f.createArithmeticExpression($2, $1, $3); }
         |  expr '/' expr    { $$ = _f.createArithmeticExpression($2, $1, $3); }
         |  expr '%' expr    { $$ = _f.createArithmeticExpression($2, $1, $3); }
         |  expr CONCAT expr { $$ = _f.createArithmeticExpression($2, $1, $3); }

         |  expr EQ  expr    { $$ = _f.createRelationalExpression($2, $1, $3); }  // (info, expr, expr)
         |  expr NE  expr    { $$ = _f.createRelationalExpression($2, $1, $3); }
         |  expr '>' expr    { $$ = _f.createRelationalExpression($2, $1, $3); }
         |  expr GE  expr    { $$ = _f.createRelationalExpression($2, $1, $3); }
         |  expr '<' expr    { $$ = _f.createRelationalExpression($2, $1, $3); }
         |  expr LE  expr    { $$ = _f.createRelationalExpression($2, $1, $3); }

         |  expr AND expr    { $$ = _f.createLogicalExpression($2, $1, $3); }  // (info, expr, expr)
         |  expr OR  expr    { $$ = _f.createLogicalExpression($2, $1, $3); }
         |  '!' expr         { $$ = _f.createLogicalExpression($1, $2, null); }  // (info, expr)

	 |  '-' primary      { $$ = _f.createUnaryExpression($1, $2); }  // (info, expr)
	 |  '+' primary      { $$ = _f.createUnaryExpression($1, $2); }  // (info, expr)

	 |  expr '?' expr ':' expr  { $$ = _f.createConditionalExpression($2, $1, $3, $5); } // (info, expr, expr, expr)

         |  expr '='        expr { $$ = _f.createAssignmentExpression($2, $1, $3); }  // (info, expr, expr)
         |  expr PLUS_EQ    expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
         |  expr MINUS_EQ   expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
         |  expr STAR_EQ    expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
         |  expr SLASH_EQ   expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
         |  expr PERCENT_EQ expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
         |  expr CONCAT_EQ  expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
         |  expr AND_EQ     expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
         |  expr OR_EQ      expr { $$ = _f.createAssignmentExpression($2, $1, $3); }
	 
         |  primary	     { $$ = $1; }
         ;

primary  :  primary '[' expr ']'    { $$ = _f.createIndexExpression($2, $1, $3); }   // (info, expr, expr)
         |  primary INDEX2 word ']' { $$ = _f.createIndex2Expression($2, $1, $3); }  // (info, expr, literal)
         |  primary '.' IDENT '(' args ')' { $$ = _f.createMethodExpression($2, $1, ($3).getValue(), $5); } // (info, expr, str, list)
         |  primary '.' IDENT       { $$ = _f.createPropertyExpression($2, $1, ($3).getValue()); } // (info, expr, str)
	 |  IDENT '(' args ')'      { $$ = _f.createFuncallExpression($1, $3); }  // (info, list)
	 |  literal                 { $$ = $1; }  // literal
         |  '(' expr ')'            { $$ = $2; }  // expr
         ;

literal  :  IDENT	     { $$ = _f.createVariableLiteral($1); }   // (info)
	 |  STRING	     { $$ = _f.createStringLiteral($1); }
	 |  INTEGER	     { $$ = _f.createIntegerLiteral($1); }
         |  FLOAT	     { $$ = _f.createFloatLiteral($1); }
	 |  TRUE	     { $$ = _f.createTrueLiteral($1); }
	 |  FALSE	     { $$ = _f.createFalseLiteral($1); }
	 |  NULL	     { $$ = _f.createNullLiteral($1); }
	 ;

word     :  IDENT            { $$ = _f.createStringLiteral($1); }   // (info)

args     :  args ',' expr    { $1.add($3); $$ = $1; }
         |  expr             { List l = new ArrayList(); l.add($1); $$ = l; }
         |                   { $$ = new ArrayList(); }
	 ;
[% end %]


%%

	protected Object yyval() { return yyval; }
	protected Object yylval() { return yylval; }
	protected Object[] yyastk() { return yyastk; }

	protected Object getYyval() { return yyval; }
	protected Object getYylval() { return yylval; }
	protected Object[] getYyastk() { return yyastk; }

	protected void setYylval(Object val) { yylval = val; }

[% if flag_plogic %]
	protected Scanner createScanner(String input) {
		Scanner scanner = super.createScanner(input);
		scanner.setRulesetMode(true);    // set ruleset mode on 
		return scanner;
	}
[% end %]