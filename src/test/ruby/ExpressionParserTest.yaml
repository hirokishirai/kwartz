###
### $Release$
### $Rev$
###
---
name:  ParseLiteral1
desc:  integer
input: |
  100
expected: |
  100
method:  parseLiteral
class:   IntegerExpression
#
---
name:  ParseLiteral2
desc:  double
input: |
  3.14
expected: |
  3.14
method:  parseLiteral
class:   DoubleExpression
#
---
name:  ParseLiteral3
desc:  'string'
input: |
  'foo'
expected: |
  "foo"
method:  parseLiteral
class:   StringExpression
---
name:  ParseLiteral4
desc:  'string'
input: |
  '\n\r\t\\\\ \''
expected: |
  "\\n\\r\\t\\\\ '"
method:  parseLiteral
class:   StringExpression
#
---
name:  ParseLiteral5
desc:  "string"
input: |
  "foo"
expected: |
  "foo"
method:  parseLiteral
class:   StringExpression
---
name:  ParseLiteral6
desc:  "string"
input: |
  "\n\r\t \\ \" "
expected: |
  "\n\r\t \\ \" "
method:  parseLiteral
class:   StringExpression
#
---
name:  ParseLiteral7
desc:  true, false
input: |
  true
expected: |
  true
method:  parseLiteral
class:  BooleanExpression
#
---
name:  ParseLiteral8
desc:  true, false
input: |
  false
expected: |
  false
method:  parseLiteral
class:   BooleanExpression
#
---
name:  ParseLiteral9
desc:  null
input: |
  null
expected: |
  null
method:  parseLiteral
class:   NullExpression
#
---
name:  ParseItem1
desc:  variable
input: |
  foo
expected: |
  foo
method:  parseItem
class:   VariableExpression
#
---
name:  ParseItem2
desc:  function()
input: |
  foo()
expected: |
  foo()
method:  parseItem
class:   FunctionExpression
#
---
name:  ParseItem3
desc:  function(100, 'va', arg)
input: |
  foo(100, 'val', arg)
expected: |
  foo()
    100
    "val"
    arg
method:  parseItem
class:   FunctionExpression
#
---
name:  ParseItem4
desc:  (expr)
input: |
  (a+b)
expected: |
  +
    a
    b
method:  parseItem
class:   ArithmeticExpression
#
---
name:  ParseItem5
desc:  macro C(), S(), D()
input: |
  C(flag)
expected: |
  ?:
    flag
    " checked=\"checked\""
    ""
method:  parseItem
class:   ConditionalExpression
#
---
name:  ParseItem6
desc:  macro C(), S(), D()
input: |
  S(gender=='M')
expected: |
  ?:
    ==
      gender
      "M"
    " selected=\"selected\""
    ""
method:  parseItem
class:   ConditionalExpression
#
---
name:  ParseItem7
desc:  macro C(), S(), D()
input: |
  D(error!=null)
expected: |
  ?:
    !=
      error
      null
    " disabled=\"disabled\""
    ""
method:  parseItem
class:  ConditionalExpression
#
---
name:  ParseItem8
desc:  arity of macros
input: |
  C(arg1, arg2)
expected: |
method:  parseItem
class:  ConditionalExpression
exception*:
  java: SemanticException
#
---
name:  ParseFactor1
desc:  array
input: |
  a[10]
expected: |
  []
    a
    10
method:  parseFactor
class:  IndexExpression
#
---
name:  ParseFactor2
desc:  array
input: |
  a[i+1]
expected: |
  []
    a
    +
      i
      1
method:  parseFactor
class:  IndexExpression
#
---
name:  ParseFactor3
desc:  hash
input: |
  a[:foo]
expected: |
  [:]
    a
    "foo"
method:  parseFactor
class:  IndexExpression
#
---
name:  ParseFactor4
desc:  property
input: |
  obj.prop1
expected: |
  .
    obj
    prop1
method:  parseFactor
class:  PropertyExpression
#
---
name:  ParseFactor5
desc:  method
input: |
  obj.method1(arg1,arg2)
expected: |
  .()
    obj
    method1()
      arg1
      arg2
method:  parseFactor
class:  MethodExpression
#
---
name:  ParseFactor6
desc:  nested array,hash
input: |
  a[i][:j][k]
expected: |
  []
    [:]
      []
        a
        i
      "j"
    k
method:  parseFactor
class:  IndexExpression
---
name:  ParseFactor7
desc:  nested array,hash
input: |
  foo.bar.baz()
expected: |
  .()
    .
      foo
      bar
    baz()
method:  parseFactor
class:  MethodExpression
#
---
name:  ParseFactor8
desc:  invalid array
input: |
  a[10;
expected: |
method:  parseFactor
class:  IndexExpression
exception*:
  java: SyntaxException
#
---
name:  ParseFactor9
desc:  ...
input: |
  a[:+]
expected: |
method:  parseFactor
class:  IndexExpression
exception*:
  java: SyntaxException
#
---
name:  ParseFactor10
desc:  ...
input: |
  a[:foo-bar]
expected: |
method:  parseFactor
class:  IndexExpression
exception*:
  java: SyntaxException
#
---
name:  ParseUnary1
desc:  '-1, +a, !false'
input: |
  -1
expected: |
  -.
    1
method:  parseUnary
class:  UnaryExpression
#
---
name:  ParseUnary2
desc:  '-1, +a, !false'
input: |
  +a
expected: |
  +.
    a
method:  parseUnary
class:  UnaryExpression
#
---
name:  ParseUnary3
desc:  '-1, +a, !false'
input: |
  !false
expected: |
  !
    false
method:  parseUnary
class:  UnaryExpression
#
---
name:  ParseUnary4
desc:  '- - 1'
input: |
  - -1
expected: |
method: parseUnary
class:  UnaryExpression
exception*:
  java: SyntaxException
#
---
name:  ParseTerm1
desc:  term
input: |
  -x*y
expected: |
  *
    -.
      x
    y
method:  parseTerm
class:  ArithmeticExpression
---
name:  ParseTerm2
desc:  term
input: |
  a*b/c%d
expected: |
  %
    /
      *
        a
        b
      c
    d
method:  parseTerm
class:  ArithmeticExpression
---
name:  ParseArithmetic1
desc:  arithmetic
input: |
  -a + b .+ c - d
expected: |
  -
    .+
      +
        -.
          a
        b
      c
    d
method:  parseArithmetic
class:  ArithmeticExpression
#
---
name:  ParseArithmetic2
desc:  arithmetic
input: |
  -a*b + -c/d
expected: |
  +
    *
      -.
        a
      b
    /
      -.
        c
      d
method:  parseArithmetic
class:  ArithmeticExpression
#
---
name:  ParseConcatenation1
desc:  arithmetic
input: |
  'dir/' .+ base .+ '.txt'
expected: |
  .+
    .+
      "dir/"
      base
    ".txt"
method:  parseArithmetic
class:  ConcatenationExpression
#
---
name:  ParseRelational1
input: |
  a==b
expected: |
  ==
    a
    b
method:  parseRelational
class:  RelationalExpression
#
---
name:  ParseRelational2
input: |
  a!=b
expected: |
  !=
    a
    b
method:  parseRelational
class:  RelationalExpression
#
---
name:  ParseRelational3
input: |
  a<b
expected: |
  <
    a
    b
method:  parseRelational
class:  RelationalExpression
#
---
name:  ParseRelational4
input: |
  a<=b
expected: |
  <=
    a
    b
method:  parseRelational
class:  RelationalExpression
#
---
name:  ParseRelational5
input: |
  a>b
expected: |
  >
    a
    b
method:  parseRelational
class:  RelationalExpression
#
---
name:  ParseRelational6
input: |
  a>=b
expected: |
  >=
    a
    b
method:  parseRelational
class:  RelationalExpression
#
---
name:  ParseLogicalAnd1
desc:  a && b
input: |
  a && b
expected: |
  &&
    a
    b
method:  parseLogicalAnd
class:  LogicalAndExpression
#
---
name:  ParseLogicalAnd2
input: |
  0<x&&x<100&&cond1&&cond2
expected: |
  &&
    &&
      &&
        <
          0
          x
        <
          x
          100
      cond1
    cond2
method:  parseLogicalAnd
class:  LogicalAndExpression
#
---
name:  ParseLogicalOr1
desc:  a || b
input: |
  a||b
expected: |
  ||
    a
    b
method:  parseLogicalOr
class:  LogicalOrExpression
#
---
name:  ParseLogicalOr2
input: |
  0<x||x<100||cond1||cond2
expected: |
  ||
    ||
      ||
        <
          0
          x
        <
          x
          100
      cond1
    cond2
method:  parseLogicalOr
class:  LogicalOrExpression
#
---
name:  ParseLogicalOr3
input: |
  a&&b || c&&d || e&&f
expected: |
  ||
    ||
      &&
        a
        b
      &&
        c
        d
    &&
      e
      f
method:  parseLogicalOr
class:  LogicalOrExpression
#
---
name:  ParseConditional1
input: |
  a ? b : c
expected: |
  ?:
    a
    b
    c
method:  parseConditional
class:  ConditionalExpression
#
---
name:  ParseAssignment1
input: |
  a = b
expected: |
  =
    a
    b
method:  parseAssignment
class:  AssignmentExpression
---
name:  ParseAssignment2
input: |
  a = 1+f(2)
expected: |
  =
    a
    +
      1
      f()
        2
method:  parseAssignment
class:  AssignmentExpression
#
---
name:  ParseAssignment3
input: |
  a[i] = b
expected: |
  =
    []
      a
      i
    b
method:  parseAssignment
class:  AssignmentExpression
#
---
name:  ParseExpression1
input: |
  color = i % 2 == 0 ? '#FFCCCC' : '#CCCCFF'
expected: |
  =
    color
    ?:
      ==
        %
          i
          2
        0
      "#FFCCCC"
      "#CCCCFF"
method:  parseExpression
class:  AssignmentExpression
#
