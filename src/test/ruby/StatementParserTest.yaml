###
### $Release$
### $Rev$
###
---
name:  ParseBlockStatement1
desc:  
#
input: |-
  { print(foo); print(bar); print(baz); }
#
expected: |
  :block
    :print
      foo
    :print
      bar
    :print
      baz
#
method:  parseBlockStatement
class:   BlockStatement
#
---
name:  ParseBlockStatement2
desc:  
#
input: |-
  { i=0; i+=1; ; }
#
expected: |
  :block
    :expr
      =
        i
        0
    :expr
      +=
        i
        1
    :empty_stmt
#
method:  parseBlockStatement
class:   BlockStatement
#
---
name:  ParsePrintStatement1
desc:  print('foo');
#
input: |-
  print('foo');
#
expected: |
  :print
    "foo"
#
method:  parsePrintStatement
class:   PrintStatement
#
---
name:  ParsePrintStatement2
desc:  print(a, 'foo'.+b, 100);
#
input: |-
  print(a, 'foo'.+b, 100);
#
expected: |
  :print
    a
    .+
      "foo"
      b
    100
#
method:  parsePrintStatement
class:   PrintStatement
#
---
name:  ParseExpressionStatement1
desc:  x = 100;
#
input: |-
  x = 100;
#
expected: |
  :expr
    =
      x
      100
#
method:  parseExpressionStatement
class:   ExpressionStatement
#
---
name:  ParseExpressionStatement2
desc:  'x[i][j] = i > j ? 0 : 1'
#
input: |-
  x[i][j] = i > j ? 0 : 1;
#
expected: |
  :expr
    =
      []
        []
          x
          i
        j
      ?:
        >
          i
          j
        0
        1
#
method:  parseExpressionStatement
class:   ExpressionStatement
#
---
name:  ParseForeachStatement1
desc:  
#
input: |-
  foreach(item in list) { print(item); }
#
expected: |
  :foreach
    item
    list
    :block
      :print
        item
#
method:  parseForeachStatement
class:   ForeachStatement
#
---
name:  ParseForeachStatement2
desc:  
#
input: |-
  foreach(item in list) print(item);
#
expected: |
  :foreach
    item
    list
    :print
      item
#
method:  parseForeachStatement
class:   ForeachStatement
#
---
name:  ParseIfStatement1
desc:  
#
input: |-
  if (flag) print(flag);
#
expected: |
  :if
    flag
    :print
      flag
#
method:  parseIfStatement
class:   IfStatement
#
---
name:  ParseIfStatement2
desc:  
#
input: |-
  if (flag) print(true); else print(false);
#
expected: |
  :if
    flag
    :print
      true
    :print
      false
#
method:  parseIfStatement
class:   IfStatement
#
---
name:  ParseIfStatement3
desc:  
#
input: |-
  if (flag1) print(aaa); else if (flag2) print(bbb); elseif(flag3) print(ccc); else print(ddd);
#
expected: |
  :if
    flag1
    :print
      aaa
    :if
      flag2
      :print
        bbb
      :if
        flag3
        :print
          ccc
        :print
          ddd
#
method:  parseIfStatement
class:   IfStatement
#
---
name:  ParseWhileStatement1
desc:  
#
input: |-
  while (i < max) i += 1;
#
expected: |
  :while
    <
      i
      max
    :expr
      +=
        i
        1
#
method:  parseWhileStatement
class:   WhileStatement
#
---
name:  ParseExpandStatement1
desc:  
#
input: |-
  @stag;
#
expected: |
  @stag
#
method:  parseExpandStatement
class:   ExpandStatement
---
name:  ParseExpandStatement2
desc:  
#
input: |-
  @cont;
#
expected: |
  @cont
#
method:  parseExpandStatement
class:   ExpandStatement
---
name:  ParseExpandStatement3
desc:  
#
input: |-
  @etag;
#
expected: |
  @etag
#
method:  parseExpandStatement
class:   ExpandStatement
---
name:  ParseExpandStatement4
desc:  
#
input: |-
  @content(foo);
#
expected: |
  @content(foo)
#
method:  parseExpandStatement
class:   ExpandStatement
---
name:  ParseExpandStatement5
desc:  
#
input: |-
  @element(foo);
#
expected: |
  @element(foo)
#
method:  parseExpandStatement
class:   ExpandStatement
---
name:  ParseExpandStatement6
desc:  
#
input: |-
  @foo;
#
expected: |
#
exception*:
  java:  SyntaxException
#
method:  parseExpandStatement
---
name:  ParseStatementList1
desc:  
#
input: |
  print("<table>\n");
  i = 0;
  foreach(item in list) {
    i += 1;
    color = i % 2 == 0 ? '#FFCCCC' : '#CCCCFF';
    print("<tr bgcolor=\"", color, "\">\n");
    print("<td>", item, "</td>\n");
    print("</tr>\n");
  }
  print("</table>\n");
#
expected: |
  :print
    "<table>\n"
  :expr
    =
      i
      0
  :foreach
    item
    list
    :block
      :expr
        +=
          i
          1
      :expr
        =
          color
          ?:
            ==
              %
                i
                2
              0
            "#FFCCCC"
            "#CCCCFF"
      :print
        "<tr bgcolor=\""
        color
        "\">\n"
      :print
        "<td>"
        item
        "</td>\n"
      :print
        "</tr>\n"
  :print
    "</table>\n"
#
method:  parseStatementList
