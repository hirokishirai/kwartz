###
### $Release$
### $Rev$
###
---
name:  EscapeFunction1
input: |
  s = "<em>\"A&B\"</em>\n";
  print(E(s));
  print(X(s));
  print(escape_xml(s));
  print(escape_url('http://localhost/~user/index?arg=<tag attr="foo">'), "\n");
  print(escape_sql("'quote'" .+ '"doublequote"' .+ '\\escape'), "\n");
expected: |
  &lt;em&gt;&quot;A&amp;B&quot;&lt;/em&gt;
  <em>"A&B"</em>
  &lt;em&gt;&quot;A&amp;B&quot;&lt;/em&gt;
  http%3A%2F%2Flocalhost%2F%7Euser%2Findex%3Farg%3D%3Ctag+attr%3D%22foo%22%3E
  \'quote\'\"doublequote\"\\escape
#
---
name:  StringFunction1
input: |
  s = " abc DEF";
  print(str_length(s), "\n");
  print(str_tolower(s), "\n");
  print(str_toupper(s), "\n");
  print(str_trim(s), "\n");
  print(str_empty(s) ? "empty" : "not empty", "\n");
  print(str_empty("") ? "empty" : "not empty", "\n");
expected: |
  8
   abc def
   ABC DEF
  abc DEF
  not empty
  empty
#
---
name:  ListFunction1
input: |
  list = list_new();
  print(list_length(list), "\n");
  print(list_empty(list) ? "empty" : "not empty", "\n");
  list[0] = "a";
  print(list[0], "\n");
  list_add(list, 123);
  print(list[1], "\n");
  print(list_empty(list) ? "empty" : "not empty", "\n");
expected: |
  0
  empty
  a
  123
  not empty
#
---
name:  HashFunction1
input: |
  hash = hash_new();
  print(hash_length(hash), "\n");
  print(hash_empty(hash) ? "empty" : "not empty", "\n");
  hash['foo'] = "FOO";
  print(hash['foo'], "\n");
  hash[:bar]  = "BAR";
  print(hash[:bar], "\n");
  list = hash_keys(hash);
  print(list_length(list), "\n");
  print("<", hash['null'], ">\n");
  print(hash_length(hash), "\n");
  print(hash_empty(hash) ? "empty" : "not empty", "\n");
expected: |
  0
  empty
  FOO
  BAR
  2
  <>
  2
  not empty
#
