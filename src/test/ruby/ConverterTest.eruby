/**
 *  @(#) ConverterTest.java
 *  @Id  $Id$
 *  @copyright $Copyright$
 *  @release $Release$
 */
package kwartz;

import kwartz.node.*;
import kwartz.DefaultConverter;
import junit.framework.TestCase;
import java.util.*;

public class ConverterTest extends TestCase {

    Class     _klass;
    String    _method;
    Class[]   _argtypes;
    Object    _receiver;
    Object[]  _args;
    Object    _result;
    String    _input;
    String    _expected;
    String    _actual;
    boolean   _print = false;

    public void _testFetchAll() {
        DefaultConverter converter = new DefaultConverter();
        List list = converter.fetchAll(_input);
        StringBuffer actual = new StringBuffer();
        for (Iterator it = list.iterator(); it.hasNext(); ) {
            Tag tag = (Tag)it.next();
            actual.append(tag._inspect().toString());
            actual.append("\n");
        }
        assertEquals(_expected, actual.toString());
    }


    public void _testAttribute() throws Exception {
        java.lang.reflect.Method m = _klass.getDeclaredMethod(_method, _argtypes);
        m.setAccessible(true);
        if (_receiver == null) _receiver = _klass.newInstance();
        _result = m.invoke(_receiver, _args);
        if (_result instanceof Expression) {
            _actual = ((Expression)_result)._inspect().toString();
        }
        if (_expected != null) assertEquals(_expected, _actual);
    }


    private void _testConverter() {
        Converter converter = new DefaultConverter();
        Statement[] stmts = converter.convert(_input);
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < stmts.length; i++) {
            sb.append(stmts[i]._inspect().toString());
        }
        String actual = sb.toString();
        if (_print) {
            System.out.println("*** actual=|" + actual + "|\n");
        } else {
            assertEquals(_expected, actual);
        }
    }


    public static void main(String[] args) {
       junit.textui.TestRunner.run(ConverterTest.class);
    }


    // -----


<% docs = context[:docs] %>
<% for doc in docs do %>
<%   raise "'name:' is not found." unless doc['name'] %>
<%   %w[desc input].each do |key| %>
<%     raise "'#{key}:' is not found (name=#{doc['name']})." unless doc[key] %>
<%   end %>
    // <%= doc['desc'] %>
    public void test<%= doc['name'].split(/_/).collect{|s| s.capitalize}.join("") %>() {

<%   if doc['input'] %>
        _input = ""
<%     doc['input'].each_line do |line| %>
            + <%= line.inspect %>
<%     end %>
            ;
<%   end %>

<%   if doc['expected'] %>
        _expected = ""
<%     doc['expected'].each_line do |line| %>
            + <%= line.inspect %>
<%     end %>
            ;
<%   end %>
<%   if doc.key?('print') %>
        _print = <%= doc['print'].inspect %>;

<%   end %>
<%
     case doc['name']
     when /^fetch/   ;  test_method = "_testFetchAll()"
     when /^attr/    ;  test_method = "_testAttribute()"
     when /^convert/ ;  test_method = "_testConverter()"
     end
%>
<%   if doc['exception'] %>
        try {
            <%= test_method %>;
            fail("<%= doc['exception'] %> expected but nothing happened.");
        } catch (<%= doc['exception'] %> ex) {
            // OK
        }
<%   else %>
        <%= test_method %>;
<%   end %>
    }

<% end %>

    // -------

    public void testAttribute01() throws Exception {  // _parseKdAttribute()
        String pdata = ""
                       + "<div id=\"foo\" class=\"klass\" kw:d=\"value:val\">\n"
                       + "text\n"
                       + "</div>\n"
                       ;
        DefaultConverter converter = new DefaultConverter();
        List taglist = converter.fetchAll(pdata);
        Tag tag = (Tag)taglist.get(0);
        //
        _expected = null;
        _klass    = DefaultConverter.class;
        _method   = "_parseKdAttribute";
        _argtypes = new Class[] {String.class, Tag.class};
        //
        _input    = "mark:bar";                   // valid directive
        _args     = new Object[] {_input, tag};
        _testAttribute();
        assertEquals("mark", tag.directive_name);
        assertEquals("bar",  tag.directive_arg);
        //
        _input    = "Mark:bar";                   // invalid directive
        _args     = new Object[] {_input, tag};
        try {
            _testAttribute();
            fail("ConversionException expected but nothing happened.");
        } catch (java.lang.reflect.InvocationTargetException ex) {
            if (! (ex.getCause() instanceof ConvertionException)) {
                fail("ConversionException expected but got " + ex.toString());
                throw ex;
            }
        }
        //
        Object[] tuples = {
            new String[] { "  mark",        "bar" },
            new String[] { "value",       "var+1" },
            new String[] { "Value",       "var+2" },
            new String[] { "VALUE",       "var+3" },
            new String[] { "foreach",     "item=list" },
            new String[] { "Foreach",     "item=list" },
            new String[] { "FOREACH",     "item=list" },
            new String[] { "list",        "item=list" },
            new String[] { "List",        "item=list" },
            new String[] { "LIST",        "item=list" },
            new String[] { "while",       "i>0" },
            new String[] { "list",        "i<0" },
            new String[] { "set",         "var=value" },
            new String[] { "if",          "error!=null" },
            new String[] { "elseif",      "warning!=null" },
            new String[] { "else",        "" },
            new String[] { "dummy",       "d1" },
            new String[] { "replace",     "elem1" },
            new String[] { "placeholder", "elem2" },
            new String[] { "include",     "'filename'" },
        };
        for (int i = 0; i < tuples.length; i++) {
            String[] tuple = (String[])tuples[i];
            String dname = tuple[0];
            String darg  = tuple[1];
            _input    = dname + ":" + darg;
            _args     = new Object[] {_input, tag};
            _testAttribute();
            assertEquals(dname.trim(), tag.directive_name);
            assertEquals(darg,  tag.directive_arg);
        }
    }


    public void testAttribute02() throws Exception {  // _parseKdAttribute()
        String pdata = ""
                       + "<div id=\"foo\" class=\"klass\" kw:d=\"value:val\">\n"
                       ;
        DefaultConverter converter = new DefaultConverter();
        List taglist = converter.fetchAll(pdata);
        Tag tag = (Tag)taglist.get(0);
        //
        _expected = null;
        _klass    = DefaultConverter.class;
        _method   = "_parseKdAttribute";
        _argtypes = new Class[] {String.class, Tag.class};
        //
        _input    = "attr:class:klass";
        _args     = new Object[] {_input, tag};
        _testAttribute();
        assertEquals(null, tag.directive_name);
        assertEquals(null, tag.directive_arg);
        assertTrue(tag.attrs != null);
        assertEquals(1, tag.attrs.size());
        Attr attr = (Attr)tag.attrs.get(0);
        assertEquals("class", attr.name);
        assertEquals(VariableExpression.class, attr.value.getClass());
        //
        _input    = "Attr:class:klass";
        _args     = new Object[] {_input, tag};
        _testAttribute();
        attr = (Attr)tag.attrs.get(0);
        assertEquals(FunctionExpression.class, attr.value.getClass());
        assertEquals("E", ((FunctionExpression)attr.value).getFunctionName());
        //
        _input    = "ATTR:class:klass";
        _args     = new Object[] {_input, tag};
        _testAttribute();
        attr = (Attr)tag.attrs.get(0);
        assertEquals(FunctionExpression.class, attr.value.getClass());
        assertEquals("X", ((FunctionExpression)attr.value).getFunctionName());
        //
        _input    = "append:' checked'";
        _args     = new Object[] {_input, tag};
        _testAttribute();
        assertEquals(null, tag.directive_name);
        assertEquals(null, tag.directive_arg);
        assertTrue(tag.append_exprs != null);
        assertEquals(1, tag.append_exprs.size());
        Object expr = tag.append_exprs.get(0);
        assertEquals(StringExpression.class, expr.getClass());
        //
        _input    = "Append:' selected'";
        _args     = new Object[] {_input, tag};
        _testAttribute();
        assertEquals(2, tag.append_exprs.size());
        expr = tag.append_exprs.get(1);
        assertEquals(FunctionExpression.class, expr.getClass());
        assertEquals("E", ((FunctionExpression)expr).getFunctionName());
        //
        _input    = "APPEND:' DELETED'";
        _args     = new Object[] {_input, tag};
        _testAttribute();
        assertEquals(3, tag.append_exprs.size());
        expr = tag.append_exprs.get(2);
        assertEquals(FunctionExpression.class, expr.getClass());
        assertEquals("X", ((FunctionExpression)expr).getFunctionName());
        //
    }

    public void testAttribute03() throws Exception {  // _parseKdAttribute()
        String pdata = ""
                       + "<div id=\"foo\" class=\"klass\" kw:d=\"value:val\">\n"
                       ;
        DefaultConverter converter = new DefaultConverter();
        List taglist = converter.fetchAll(pdata);
        Tag tag = (Tag)taglist.get(0);
        //
        _expected = null;
        _klass    = DefaultConverter.class;
        _method   = "_parseKdAttribute";
        _argtypes = new Class[] {String.class, Tag.class};
        //
        _input    = "attr:class:klass; append:' checked'; mark:foo[:key]";
        _args     = new Object[] {_input, tag};
        _testAttribute();
        assertEquals("mark", tag.directive_name);
        assertEquals("foo[:key]", tag.directive_arg);
        assertTrue(tag.attrs != null);
        assertEquals(1, tag.attrs.size());
        Attr attr = (Attr)tag.attrs.get(0);
        assertEquals("class", attr.name);
        assertEquals(VariableExpression.class, attr.value.getClass());
        assertTrue(tag.append_exprs != null);
        assertEquals(1, tag.append_exprs.size());
        Object expr = tag.append_exprs.get(0);
        assertEquals(StringExpression.class, expr.getClass());
    }

    public void testAttribute04() throws Exception { // _parseAttributes() {
        _expected = null;
        _klass    = DefaultConverter.class;
        _method   = "_parseAttributes";
        _argtypes = new Class[] {Tag.class};
        //
        Tag tag = new Tag();
        tag.attr_str = " class=\"even\" bgcolor=\"#FFCCCC\" xml:ns=\"foo\"";
        _args     = new Object[] {tag};
        _testAttribute();
        //
        assertTrue(tag.attrs != null);
        assertEquals(3, tag.attrs.size());
        Attr attr = (Attr)tag.attrs.get(0);
        assertEquals("class", attr.name);
        assertEquals("even",  attr.value);
        attr = (Attr)tag.attrs.get(1);
        assertEquals("bgcolor", attr.name);
        assertEquals("#FFCCCC",  attr.value);
        attr = (Attr)tag.attrs.get(2);
        assertEquals("xml:ns", attr.name);
        assertEquals("foo",  attr.value);
    }

    public void testAttribute05() throws Exception { // _parseAttributes() {
        _expected = null;
        _klass    = DefaultConverter.class;
        _method   = "_parseAttributes";
        _argtypes = new Class[] {Tag.class};
        //
        Tag tag = new Tag();
        tag.attr_str = " class=\"even\" bgcolor=\"#FFCCCC\" id=\"foo\"";
        _args     = new Object[] {tag};
        _testAttribute();
        //
        assertEquals("mark", tag.directive_name);
        assertEquals("foo", tag.directive_arg);
        assertEquals(3, tag.attrs.size());
        Attr attr = (Attr)tag.attrs.get(2);
        assertEquals("id", attr.name);
        assertEquals("foo",  attr.value);
        //
        tag = new Tag();
        tag.attr_str = " class=\"even\"  bgcolor=\"#FFCCCC\" id=\"mark:foo\" ";
        _args     = new Object[] {tag};
        _testAttribute();
        //
        assertEquals("mark", tag.directive_name);
        assertEquals("foo", tag.directive_arg);
        assertEquals(2, tag.attrs.size());
        attr = (Attr)tag.attrs.get(0);
        assertEquals("class", attr.name);
        attr = (Attr)tag.attrs.get(1);
        assertEquals("bgcolor", attr.name);
        //
        tag = new Tag();
        tag.attr_str = " class=\"even\" id=\"foo\" id=\"value:var\"";
        _args     = new Object[] {tag};
        _testAttribute();
        //
        assertEquals("value", tag.directive_name);
        assertEquals("var", tag.directive_arg);
        assertEquals(2, tag.attrs.size());
        attr = (Attr)tag.attrs.get(1);
        assertEquals("id", attr.name);
        assertEquals("foo",  attr.value);
    }


    public void testAttribute06() throws Exception { // _parseAttributes() {
        _expected = null;
        _klass    = DefaultConverter.class;
        _method   = "_parseAttributes";
        _argtypes = new Class[] {Tag.class};
        //
        Tag tag = new Tag();
        tag.attr_str = " class=\"even\" bgcolor=\"#FFCCCC\" kw:d=\"mark:foo\"";
        _args     = new Object[] {tag};
        _testAttribute();
        //
        assertEquals("mark", tag.directive_name);
        assertEquals("foo", tag.directive_arg);
        assertEquals(2, tag.attrs.size());
        //
        tag = new Tag();
        tag.attr_str = " id=\"foo\" bgcolor=\"#FFCCCC\" kw:d=\"value:var\"";
        _args     = new Object[] {tag};
        _testAttribute();
        //
        assertEquals("value", tag.directive_name);
        assertEquals("var", tag.directive_arg);
        assertEquals(2, tag.attrs.size());
        //
    }

    public void testAttribute07() throws Exception { // _parseAttributes() {
        _expected = null;
        _klass    = DefaultConverter.class;
        _method   = "_parseAttributes";
        _argtypes = new Class[] {Tag.class};
        //
        Tag tag = new Tag();
        tag.attr_str = "id=\"foo\" bgcolor=\"#FFCCCC\""
                     + " kw:d=\"mark:bar;attr:id:xid;attr:class:klass;append:flag?' checked':''\"";
        _args     = new Object[] {tag};
        _testAttribute();
        //
        assertEquals("mark", tag.directive_name);
        assertEquals("bar", tag.directive_arg);
        assertEquals(3, tag.attrs.size());
        Attr attr = (Attr)tag.attrs.get(0);
        assertEquals("id", attr.name);
        assertEquals(VariableExpression.class, attr.value.getClass());
        attr = (Attr)tag.attrs.get(1);
        assertEquals("bgcolor", attr.name);
        assertEquals(String.class, attr.value.getClass());
        attr = (Attr)tag.attrs.get(2);
        assertEquals("class", attr.name);
        assertEquals(VariableExpression.class, attr.value.getClass());
        assertTrue(tag.append_exprs != null);
        assertEquals(ConditionalExpression.class, tag.append_exprs.get(0).getClass());
    }

}
