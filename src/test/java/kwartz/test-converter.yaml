### $Date$
### $Release$
### $Copyright$

### ----------------------------------------

###
- name:		convert_fetch1
  pdata: |
	foo
	bar
	<table>
	 <tr>
	  <td id="mark:item">foo</td>
	 </tr>
	</table>
	baz<br/>
	end
  plogic: |
  expected: |
	linenum    : 3
	prev_text  : "foo\nbar\n"
	tag_text   : "<table>\n"
	head_space : ""
	is_etag    : false
	tagname    : "table"
	attr_str   : ""
	extra_space: ""
	is_empty   : false
	tail_space : "\n"
	
	linenum    : 4
	prev_text  : ""
	tag_text   : " <tr>\n"
	head_space : " "
	is_etag    : false
	tagname    : "tr"
	attr_str   : ""
	extra_space: ""
	is_empty   : false
	tail_space : "\n"
	
	linenum    : 5
	prev_text  : ""
	tag_text   : "  <td id=\"mark:item\">"
	head_space : "  "
	is_etag    : false
	tagname    : "td"
	attr_str   : " id=\"mark:item\""
	extra_space: ""
	is_empty   : false
	tail_space : null
	
	linenum    : 5
	prev_text  : "foo"
	tag_text   : "</td>\n"
	head_space : null
	is_etag    : true
	tagname    : "td"
	attr_str   : ""
	extra_space: ""
	is_empty   : false
	tail_space : "\n"
	
	linenum    : 6
	prev_text  : ""
	tag_text   : " </tr>\n"
	head_space : " "
	is_etag    : true
	tagname    : "tr"
	attr_str   : ""
	extra_space: ""
	is_empty   : false
	tail_space : "\n"
	
	linenum    : 7
	prev_text  : ""
	tag_text   : "</table>\n"
	head_space : ""
	is_etag    : true
	tagname    : "table"
	attr_str   : ""
	extra_space: ""
	is_empty   : false
	tail_space : "\n"
	
	linenum    : 8
	prev_text  : "baz"
	tag_text   : "<br/>\n"
	head_space : null
	is_etag    : false
	tagname    : "br"
	attr_str   : ""
	extra_space: ""
	is_empty   : true
	tail_space : "\n"
	
	rest: "end\n"

### -------------------------------------------

###
- name:	   convert_pdata1
  desc:    basic test
  pdata: |
	<ul>
	  <li>foo</li>
	</ul>
  plogic: 
  expected*:
    ruby: &convert01_expected |
	print("<ul>\n")
	print("  <li>")
	print("foo")
	print("</li>\n")
	print("</ul>\n")
    php: *convert01_expected
    java: |
	:PRINT
	  "<ul>\n  <li>foo</li>\n</ul>\n"
    obsolete: |
	:PRINT
	  "<ul>\n"
	:PRINT
	  "  <li>"
	:PRINT
	  "foo"
	:PRINT
	  "</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:	   convert_pdata2
  desc:    marked element
  pdata: |
	<ul id="list">
	  <li id="mark:item">foo</li>
	</ul>
  plogic:
  expected*:
    ruby: &convert02_expected |
	print("<ul id=\"list\">\n")
	print("  <li>")
	print("foo")
	print("</li>\n")
	print("</ul>\n")
    php: *convert02_expected
    java: |
	:PRINT
	  "<ul id=\"list\">\n"
	:BLOCK
	  :PRINT
	    "  <li>"
	  :BLOCK
	    :PRINT
	      "foo"
	  :PRINT
	    "</li>\n"
	:PRINT
	  "</ul>\n"
    obsolete: |
	:BLOCK
	  :PRINT
	    "<ul id=\"list\">\n"
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :BLOCK
	        :PRINT
	          "foo"
	      :PRINT
	        "</li>\n"
	  :PRINT
	    "</ul>\n"


###
- name:	   convert_pdata3
  desc:    nested element
  pdata: |
        <div>
	  <div>
	    <div id="list">
	      <div id="mark:item">
	        <div>foo</div>
	      </div>
	    </div>
	  </div>
	</div>
  plogic:
  expected*:
    ruby: &convert03_expected |
	print("<div>\n")
	print("  <div>\n")
	print("    <div id=\"list\">\n")
	print("      <div>\n")
	print("        <div>")
	print("foo")
	print("</div>\n")
	print("      </div>\n")
	print("    </div>\n")
	print("  </div>\n")
	print("</div>\n")
    php: *convert03_expected
    java: |
	:PRINT
	  "<div>\n  <div>\n"
	:PRINT
	  "    <div id=\"list\">\n"
	:BLOCK
	  :PRINT
	    "      <div>\n"
	  :BLOCK
	    :PRINT
	      "        <div>"
	    :PRINT
	      "foo"
	    :PRINT
	      "</div>\n"
	  :PRINT
	    "      </div>\n"
	:PRINT
	  "    </div>\n"
	:PRINT
	  "  </div>\n</div>\n"
    obsolete: |
	:PRINT
	  "<div>\n"
	:PRINT
	  "  <div>\n"
	:BLOCK
	  :PRINT
	    "    <div id=\"list\">\n"
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "      <div>\n"
	      :BLOCK
	        :PRINT
	          "        <div>"
                :PRINT
	          "foo"
	        :PRINT
	          "</div>\n"
	      :PRINT
	        "      </div>\n"
	  :PRINT
	    "    </div>\n"
	:PRINT
	  "  </div>\n"
	:PRINT
	  "</div>\n"


###
- name:	   convert_pdata4
  desc:    rest text
  pdata: |
        foo
	bar
	<ul id="mark:list">
	</ul>
	baz
	boo
  plogic:
  expected*:
    ruby: &convert04_expected |
	print("foo\nbar\n")
	print("<ul>\n")
	print("</ul>\n")
	print("baz\nboo\n")
    php:  *convert04_expected
    java: |
	:PRINT
	  "foo\nbar\n"
	:PRINT
	  "<ul>\n"
	:BLOCK
	:PRINT
	  "</ul>\n"
	:PRINT
	  "baz\nboo\n"
    obsolete: |
	:PRINT
	  "foo\nbar\n"
	:BLOCK
	  :PRINT
	    "<ul>\n"
	  :BLOCK
	  :PRINT
	    "</ul>\n"
	:PRINT
	  "baz\nboo\n"


###
- name:	   convert_pdata5
  desc:    no tags
  pdata: |
        foo
	bar
	baz
  plogic:
  expected*:
    ruby: &convert05_expected |
	print("foo\nbar\nbaz\n")
    php:  *convert05_expected
    java: |
	:PRINT
	  "foo\nbar\nbaz\n"


###
- name:	   convert_pdata6
  desc:    not well-formed
  pdata: |
	<div id="foo">
  	 <p><span></b>
	</div>
  plogic:
  expected*:
    ruby: &convert06_expected |
	print("<div id=\"foo\">\n")
	print(" <p>")
	print("<span>")
	print("</b>\n")
	print("</div>\n")
    php:  *convert06_expected
    java: |
	:PRINT
	  "<div id=\"foo\">\n"
	:BLOCK
	  :PRINT
	    " <p><span></b>\n"
	:PRINT
	  "</div>\n"
    obsolete: |
	:BLOCK
	  :PRINT
	    "<div id=\"foo\">\n"
	  :BLOCK
	    :PRINT
	      " <p>"
	    :PRINT
	      "<span>"
	    :PRINT
	      "</b>\n"
	  :PRINT
	    "</div>\n"


###
- name:		convert_pdata7
  desc:		empty tag
  pdata: |
	<input type="text" id="user_name"/>
	<input type="text" id="user_mail">
	<img src="foo.jpg" id="mark:image">
	<br id="mark:br">
	<hr id="mark:hr">
	<meta id="mark:meta">
	<link id="mark:link">
  plogic:
  expected*:
    ruby: |
    php: |
    java: |
	:PRINT
	  "<input type=\"text\" id=\"user_name\"/>\n"
	:BLOCK
	:PRINT
	  ""
	:PRINT
	  "<input type=\"text\" id=\"user_mail\">\n"
	:BLOCK
	:PRINT
	  ""
	:PRINT
	  "<img src=\"foo.jpg\">\n"
	:BLOCK
	:PRINT
	  ""
	:PRINT
	  "<br>\n"
	:BLOCK
	:PRINT
	  ""
	:PRINT
	  "<hr>\n"
	:BLOCK
	:PRINT
	  ""
	:PRINT
	  "<meta>\n"
	:BLOCK
	:PRINT
	  ""
	:PRINT
	  "<link>\n"
	:BLOCK
	:PRINT
	  ""


###
- name:	   convert_pdata9
  desc:    tag is not closed
  pdata: |
        <span>
	<div id="list">
	  <div id="mark:item">
	    <div>foo
	  </div>
	</div>
	</span>
  plogic: 
  exception*:
    ruby:  Kwartz::ConvertError
    php:   KwartzConvertionException
    java:  kwartz.ConvertException
  errormsg*:
    ruby:  "test-converter.html:2: '<div>' is not closed."
    php:   "test-converter.html:2: '<div>' is not closed."
    java:  "test-converter.html:2: '<div>' is not closed."


### ----------------------------------------

###
- name:    convert_prop_stag1
  desc:    stag property
  pdata: |
	<a id="mark:link">link</a>
  plogic*:
    ruby: |
	#link {
	  stag:  start_link_tag 'list' :controller=>'user';
	}
    php: |
	#link {
	  stag: start_link_tag("user/list");
	}
    java: |
	#link {
	  stag: start_link_tag("user", "list");
	}
  expected*:
    ruby: |
	print(<%start_link_tag 'list' :controller=>'user'%>)
	print("link</a>\n")
    php:  |
	print(<%start_link_tag 'list' :controller=>'user'%>)
	print("link</a>\n")
    java: |
	:PRINT
	  start_link_tag()
	    "user"
	    "list"
	:BLOCK
	  :PRINT
	    "link"
	:PRINT
	  "</a>\n"

###
- name:    convert_prop_etag1
  desc:    etag property
  pdata: |
	<form id="mark:form1">
 	  foo
	</form>
  plogic*:
    ruby: |
	#form1 {
	  etag: end_form_tag;
	}
    php: |
	#form1 {
	  etag: end_form_tag();
	}
    java: |
        #form1 {
          etag: end_form_tag;
        }
  expected*:
    ruby: |
	print("<form>\n")
	print("  foo\n")
	print(<%end_form_tag%>)
	print("\n")
    php:  |
	print("<form>\n")
	print("  foo\n")
	print(<%end_form_tag()%>)
	print("\n")
    java: |
	:PRINT
	  "<form>\n"
	:BLOCK
	  :PRINT
	    "  foo\n"
	:PRINT
	  end_form_tag
	  "\n"


###
- name:    convert_prop_cont1
  desc:    cont property
  pdata: |
	<b id="mark:item">foo</b>
  plogic*:
    ruby: |
	#item {
	  cont: item;
	}
    php: |
    	#item {
    	  cont: $item;
    	}
    java: |
    	#item {
    	  cont: item;
    	}
  expected*:
    ruby: |
    	print("<b>")
    	print(item)
    	print("</b>\n")
    php:  |
    	print("<b>")
    	print($item)
    	print("</b>\n")
    java: |
	:PRINT
	  "<b>"
	:PRINT
	  item
	:PRINT
	  "</b>\n"


###
- name:    convert_prop_elem1
  desc:    elem property
  pdata: |
	<span>
	  <a href="foo" id="mark:link">link</a>
	</span>
  plogic*:
    ruby: |
	#link {
	  elem: link_to 'Back', 'list', controller=>'user';
	}
    php: |
	#link {
	  elem: link_to('Back', "user/list");
	}
    java: |
	#link {
	  elem: link_to('Back', "user", "list");
	}
  expected*:
    ruby: |
	print("<span>\n")
	print("  ")
	print(link_to 'Back', 'list', controller=>'user')
	print("\n")
	print("</span>\n")
    php:  |
	print("<span>\n")
	print("  ")
	print(link_to('Back', "user/list"))
	print("\n")
	print("</span>\n")
    java: |
	:PRINT
	  "<span>\n"
	:PRINT
	  "  "
	  link_to()
	    "Back"
	    "user"
	    "list"
	  "\n"
	:PRINT
	  "</span>\n"


###
- name:    convert_prop_value1
  desc:    value property
  pdata: |
	<b id="mark:item">foo</b>
  plogic*:
    ruby: |
	#item {
	  value: item;
	}
    php: |
    	#item {
    	  value: $item;
    	}
    java: |
    	#item {
    	  value: item;
    	}
  expected*:
    ruby: |
    	print("<b>")
    	print(item)
    	print("</b>\n")
    php:  |
    	print("<b>")
    	print($item)
    	print("</b>\n")
    java: |
	:PRINT
	  "<b>"
	:PRINT
	  item
	:PRINT
	  "</b>\n"


###
- name:    convert_prop_attrs1
  desc:    attrs property
  pdata: |
	<span id="mark:error" class="foo">ERROR</span>
  plogic*:
    ruby: |
	#error {
	  attrs:  'class' klass,
	          "bgcolor" color,
	          'style'  get_style("size", size);
	}
    php: |
	#error {
	  attrs:  'class' $class,
	          "bgcolor" $color,
	          'style'  get_style("size", $size);
	}
    java: |
	#error {
	  attrs: 'class' klass, "bgcolor" color,
	         "style" get_style("size", size);
	}
  expected*:
    ruby: |
    php:  |
    java: |
	:PRINT
	  "<span class=\""
	  klass
	  "\" style=\""
	  get_style()
	    "size"
	    size
	  "\" bgcolor=\""
	  color
	  "\">"
	:BLOCK
	  :PRINT
	    "ERROR"
	:PRINT
	  "</span>\n"


###
- name:    convert_prop_append1
  desc:    append property
  pdata: |
	<form>
	<input type="checkbox" id="user_name"/>
	</form>
  plogic*:
    ruby: |
	#user_name {
	  append: flag ? ' checked="checked"' : '';
	}
    php: |
	#user_name {
	  append: $flag ? ' checked="checked"' : '';
	}
    java: |
	#user_name {
	  append: flag ? ' checked="checked"' : '';
	}
 
  expected*:
    ruby: |
	print("<form>\n")
	print("<input type=\"checkbox\" id=\"user_name\"")
	print(flag ? ' checked="checked"' : '')
	print("/>\n")
	print("</form>\n")
    php:  |
	print("<form>\n")
	print("<input type=\"checkbox\" id=\"user_name\"")
	print($flag ? ' checked="checked"' : '')
	print("/>\n")
	print("</form>\n")
    java: |
	:PRINT
	  "<form>\n"
	:PRINT
	  "<input type=\"checkbox\" id=\"user_name\""
	  ?:
	    flag
	    " checked=\"checked\""
	    ""
	  "/>\n"
	:BLOCK
	:PRINT
	  ""
	:PRINT
	  "</form>\n"


###
- name:    convert_prop_remove1
  desc:    remove property
  pdata: |
	<b class="foo" id="item" title="title">xxx</b>
  plogic*:
    ruby: |
	#item {
	  remove: "id", 'title';
	}
    php: |
	#item {
	  remove: "id", 'title';
	}
    java: |
	#item {
	  remove: "id", 'title';
	}
  expected*:
    ruby: |
    php:  |
    java: |
	:PRINT
	  "<b class=\"foo\">"
	:BLOCK
	  :PRINT
	    "xxx"
	:PRINT
	  "</b>\n"


###
- name:    convert_prop_logic1
  desc:    logic property
  pdata: |
	<ul id="mark:list">
	  <li>foo</li>
	</ul>
  plogic*:
    ruby: |
	#list {
	  logic: {
	    _stag
	    for item in list do
	      _cont
	    end
	    _etag
	  }
	}
    php: |
	#list {
	  logic: {
	    _stag();
	    foreach ($list as $item) {
	      _cont();
	    }
	    _etag();
	  }
	}
    java: |
	#list {
	  logic: {
	    _stag;
	    foreach (item in list) {
	      _cont;
	    }
	    _etag;
	  }
	}
  expected*:
    ruby: |
  	print("<ul>\n")
	<%    for item in list do%>
	print("  <li>foo</li>\n")
	<%    end%>
  	print("</ul>\n")
    php: |
  	print("<ul>\n")
	<%    foreach ($list as $item) {%>
	print("  <li>foo</li>\n")
	<%    }%>
  	print("</ul>\n")
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>foo</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:    convert_prop_before1
  desc:    before property
  pdata: |
	<ul id="mark:userlist">
	  <li>foo</li>
	</ul>
	<ol id="mark:grouplist">
	  <li>admin</li>
	</ol>
  plogic*:
    ruby: |
	#userlist {
	  before: {
	    list = @users
	  }
	}
	#grouplist {
	  before: {
	    list = @groups
	  }
	}
	#userlist, grouplist {
	  logic: {
	    _stag
	    for item in list do
	      _cont
	    end
	    _etag
	  }
	}
    php: |
	#userlist {
	  before: {
	    $list = $_SESSION['users'];
	  }
	}
	#grouplist {
	  before: {
	    $list = $_SESSION['groups'];
	  }
	}
	#userlist, #grouplist {
	  logic: {
	    _stag();
	    foreach ($list as $item) {
	      _cont();
	    }
	    _etag();
	  }
	}
    java: |
	#userlist {
	  before: {
	    list = context['users'];
	  }
	}
	#grouplist {
	  before: {
	    list = context['groups'];
	  }
	}
	#userlist, #grouplist {
	  logic: {
	    _stag;
	    foreach (item in list) {
	      _cont;
	    }
	    _etag;
	  }
	}
  expected*:
    ruby: |
	<%    list = context['users'] %>
  	print("<ul>\n")
	<%    for item in list do%>
	print("  <li>foo</li>\n")
	<%    end%>
  	print("</ul>\n")
	<%    list = context['groups'] %>
  	print("<ol>\n")
	<%    for item in list do%>
	print("  <li>foo</li>\n")
	<%    end%>
  	print("</ol>\n")
    php: |
	<%    $list = $_SESSION['users']; %> 
  	print("<ul>\n")
	<%    foreach ($list as $item) {%>
	print("  <li>foo</li>\n")
	<%    }%>
  	print("</ul>\n")
	<%    $list = $_SESSION['groups']; %> 
  	print("<ol>\n")
	<%    foreach ($list as $item) {%>
	print("  <li>foo</li>\n")
	<%    }%>
  	print("</ol>\n")
    java: |
	:EXPR
	  =
	    list
	    []
	      context
	      "users"
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>foo</li>\n"
	:PRINT
	  "</ul>\n"
	:EXPR
	  =
	    list
	    []
	      context
	      "groups"
	:PRINT
	  "<ol>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>foo</li>\n"
	:PRINT
	  "</ol>\n"


###
- name:		convert_prop_after1
  desc:		after property
  pdata: |
	<i id="mark:word1">foo</i>
	<b id="mark:word2">bar</b>
  plogic*:
    ruby: |
    php: |
    java: |
	#word1, #word2 {
	  value: word;
	  after: {
	    print("<!-- comment -->\n");
	  }
	}
  expected*:
    java: |
	:PRINT
	  "<i>"
	:PRINT
	  word
	:PRINT
	  "</i>\n"
	:PRINT
	  "<!-- comment -->\n"
	:PRINT
	  "<b>"
	:PRINT
	  word
	:PRINT
	  "</b>\n"
	:PRINT
	  "<!-- comment -->\n"
  


### ----------------------------------------

###
- name:		convert_directive_dummy1
  pdata: |
	<tr>
	  <td>foo</td>
	  <td id="dummy:d1">bar</td>
	  <td id="dummy:d2">baz</td>
	</tr>
  plogic: |
  expected*:
    java: |
	:PRINT
	  "<tr>\n  <td>foo</td>\n"
	:PRINT
	  "</tr>\n"

###
- name:		convert_directive_mark1
  pdata: |
	<ul id="mark:list">
	  <li id="mark:item">foo</li>
	</ul>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:BLOCK
	  :PRINT
	    "  <li>"
	  :BLOCK
	    :PRINT
	      "foo"
	  :PRINT
	    "</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		convert_directive_stag1
  pdata: |
	<div>
	  <form id="stag:start_form_tag()">
	  ...
	  </form>
	</div>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<div>\n"
	:PRINT
	  "  "
	  start_form_tag()
	  "\n"
	:BLOCK
	  :PRINT
	    "  ...\n"
	:PRINT
	  "  </form>\n"
	:PRINT
	  "</div>\n"


###
- name:	convert_directive_stag2
  pdata: |
	<p id="stag:val1">foo</p>
	<p id="Stag:val2">bar</p>
	<p id="STAG:val3">baz</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  val1
	:BLOCK
	  :PRINT
	    "foo"
	:PRINT
	  "</p>\n"
	:PRINT
	  E()
	    val2
	:BLOCK
	  :PRINT
	    "bar"
	:PRINT
	  "</p>\n"
	:PRINT
	  X()
	    val3
	:BLOCK
	  :PRINT
	    "baz"
	:PRINT
	  "</p>\n"
	  
	  
###
- name:		convert_directive_etag1
  pdata: |
	<div>
	  <form id="etag:end_form_tag()">
	  ...
	  </form>
	</div>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<div>\n"
	:PRINT
	  "  <form>\n"
	:BLOCK
	  :PRINT
	    "  ...\n"
	:PRINT
	  "  "
	  end_form_tag()
	  "\n"
	:PRINT
	  "</div>\n"


###
- name:	convert_directive_etag2
  pdata: |
	<p id="etag:val1">foo</p>
	<p id="Etag:val2">bar</p>
	<p id="ETAG:val3">baz</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<p>"
	:BLOCK
	  :PRINT
	    "foo"
	:PRINT
	  val1
	  "\n"
	:PRINT
	  "<p>"
	:BLOCK
	  :PRINT
	    "bar"
	:PRINT
	  E()
	    val2
	  "\n"
	:PRINT
	  "<p>"
	:BLOCK
	  :PRINT
	    "baz"
	:PRINT
	  X()
	    val3
	  "\n"

	    
###
- name:		convert_directive_cont1
  pdata: |
	<div>
	  <p id="cont:val(x)">
	  ...
	  </p>
	</div>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<div>\n"
	:PRINT
	  "  <p>"
	:PRINT
	  val()
	    x
	:PRINT
	  "</p>\n"
	:PRINT
	  "</div>\n"


###
- name:	convert_directive_cont2
  pdata: |
	<p id="cont:val1">foo</p>
	<p id="Cont:val2">bar</p>
	<p id="CONT:val3">baz</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<p>"
	:PRINT
	  val1
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p>"
	:PRINT
	  E()
	    val2
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p>"
	:PRINT
	  X()
	    val3
	:PRINT
	  "</p>\n"

	    
###
- name:		convert_directive_elem1
  pdata: |
	<div>
	  <p id="elem:val(x)">
	  ...
	  </p>
	</div>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<div>\n"
	:PRINT
	  "  "
	  val()
	    x
	  "\n"
	:PRINT
	  "</div>\n"


###
- name:	convert_directive_elem2
  pdata: |
	<p id="elem:val1">foo</p>
	<p id="Elem:val2">bar</p>
	<p id="ELEM:val3">baz</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  val1
	  "\n"
	:PRINT
	  E()
	    val2
	  "\n"
	:PRINT
	  X()
	    val3
	  "\n"

	    
###
- name:		convert_directive_value1
  pdata: |
	<div>
	  <p id="value:val(x)">
	  ...
	  </p>
	</div>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<div>\n"
	:PRINT
	  "  <p>"
	:PRINT
	  val()
	    x
	:PRINT
	  "</p>\n"
	:PRINT
	  "</div>\n"


###
- name:	convert_directive_value2
  pdata: |
	<p id="value:val1">foo</p>
	<p id="Value:val2">bar</p>
	<p id="VALUE:val3">baz</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<p>"
	:PRINT
	  val1
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p>"
	:PRINT
	  E()
	    val2
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p>"
	:PRINT
	  X()
	    val3
	:PRINT
	  "</p>\n"

	    
###
- name:		convert_directive_attr1
  pdata: |
	<p bgcolor="#FFC" id="attr:class=klass;attr:bgcolor:color">
	  ...
	</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<p bgcolor=\""
	  color
	  "\" class=\""
	  klass
	  "\">\n"
	:BLOCK
	  :PRINT
	    "  ...\n"
	:PRINT
	  "</p>\n"


###
- name:	convert_directive_attr2
  pdata: |
	<p id="attr:class=val1">foo</p>
	<p id="Attr:class=val2">bar</p>
	<p id="ATTR:class=val3">baz</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<p class=\""
	  val1
	  "\">"
	:BLOCK
	  :PRINT
	    "foo"
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p class=\""
	  E()
	    val2
	  "\">"
	:BLOCK
	  :PRINT
	    "bar"
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p class=\""
	  X()
	    val3
	  "\">"
	:BLOCK
	  :PRINT
	    "baz"
	:PRINT
	  "</p>\n"


###
- name:		convert_directive_append1
  pdata: |
	<input type="checkbox" id="user_name" kw:d="append:flag?' checked':''"/>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<input type=\"checkbox\" id=\"user_name\""
	  ?:
	    flag
	    " checked"
	    ""
	  "/>\n"
	:BLOCK
	:PRINT
	  ""


###
- name:	convert_directive_append2
  pdata: |
	<p id="append:val1">foo</p>
	<p id="Append:val2">bar</p>
	<p id="APPEND:val3">baz</p>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<p"
	  val1
	  ">"
	:BLOCK
	  :PRINT
	    "foo"
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p"
	  E()
	    val2
	  ">"
	:BLOCK
	  :PRINT
	    "bar"
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p"
	  X()
	    val3
	  ">"
	:BLOCK
	  :PRINT
	    "baz"
	:PRINT
	  "</p>\n"


###
- name:		convert_directive_replace1
  pdata: |
	<ul id="mark:menulist">
	  <li id="value:menu">menu1</li>
	</ul>
	<p>...</p>
	<ol id="replace_element_with_element:menulist">
	  <li>menu1</li>
	</ol>
  plogic*:
    java: |
	#menulist {
	  logic: {
	    _stag;
	    foreach (menu = menulist) {
	      _cont;
	    }
	    _etag;
	  }
	}
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  menu
	  menulist
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        menu
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  "<p>...</p>\n"
	:BLOCK
	  :PRINT
	    "<ul>\n"
	  :FOREACH
	    menu
	    menulist
	    :BLOCK
	      :BLOCK
	        :PRINT
	          "  <li>"
	        :PRINT
	          menu
	        :PRINT
	          "</li>\n"
	  :PRINT
	    "</ul>\n"


###
- name:		convert_directive_replace2
  pdata: |
	<ul id="mark:menulist">
	  <li id="value:menu">menu1</li>
	</ul>
	<p>...</p>
	  <ol id="replace_element_with_content:menulist">
	  <li>menu1</li>
	  </ol>
  plogic*:
    java: |
	#menulist {
	  logic: {
	    _stag;
	    foreach (menu = menulist) {
	      _cont;
	    }
	    _etag;
	  }
	}
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  menu
	  menulist
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        menu
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  "<p>...</p>\n"
	:BLOCK
	  :PRINT
	  :FOREACH
	    menu
	    menulist
	    :BLOCK
	      :BLOCK
	        :PRINT
	          "  <li>"
	        :PRINT
	          menu
	        :PRINT
	          "</li>\n"
	  :PRINT
    obsolete: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  menu
	  menulist
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        menu
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  "<p>...</p>\n"
	:BLOCK
	  :BLOCK
	    :PRINT
	      "  <li>"
	    :PRINT
	      menu
	    :PRINT
	      "</li>\n"


###
- name:		convert_directive_replace3
  pdata: |
	<ul id="mark:menulist">
	  <li id="value:menu">menu1</li>
	</ul>
	<p>...</p>
	<ol id="replace_content_with_element:menulist">
	  <li>menu1</li>
	</ol>
  plogic*:
    java: |
	#menulist {
	  logic: {
	    _stag;
	    foreach (menu = menulist) {
	      _cont;
	    }
	    _etag;
	  }
	}
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  menu
	  menulist
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        menu
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  "<p>...</p>\n"
	:PRINT
	  "<ol>\n"
	:BLOCK
	  :PRINT
	    "<ul>\n"
	  :FOREACH
	    menu
	    menulist
	    :BLOCK
	      :BLOCK
	        :PRINT
	          "  <li>"
	        :PRINT
	          menu
	        :PRINT
	          "</li>\n"
	  :PRINT
	    "</ul>\n"
	:PRINT
	  "</ol>\n"


###
- name:		convert_directive_replace4
  pdata: |
	<ul id="mark:menulist">
	  <li id="value:menu">menu1</li>
	</ul>
	<p>...</p>
	<ol id="replace_content_with_content:menulist">
	  <li>menu1</li>
	</ol>
  plogic*:
    java: |
	#menulist {
	  logic: {
	    _stag;
	    foreach (menu = menulist) {
	      _cont;
	    }
	    _etag;
	  }
	}
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  menu
	  menulist
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        menu
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  "<p>...</p>\n"
	:PRINT
	  "<ol>\n"
	:BLOCK
	  :PRINT
	  :FOREACH
	    menu
	    menulist
	    :BLOCK
	      :BLOCK
	        :PRINT
	          "  <li>"
	        :PRINT
	          menu
	        :PRINT
	          "</li>\n"
	  :PRINT
	:PRINT
	  "</ol>\n"
    obsolete: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  menu
	  menulist
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        menu
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  "<p>...</p>\n"
	:PRINT
	  "<ol>\n"
	:BLOCK
	  :BLOCK
	    :PRINT
	      "  <li>"
	    :PRINT
	      menu
	    :PRINT
	      "</li>\n"
	:PRINT
	  "</ol>\n"


###
- name:		convert_directive_replace9
  pdata: |
	<ul id="mark:menulist">
	  <li id="value:menu">menu1</li>
	</ul>
	<p>...</p>
	<ol id="replace_element_with_element:list">
	  <li>menu1</li>
	</ol>
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	"test-converter.html:5: 'replace_element_with_element:list': element not found."


###
- name:		convert_directive_set1
  pdata: |
	<table>
	  <tr id="set:i=0">
	    <td>foo</td>
	  </tr>
	</table>
  plogic: |
  expected*:
    java: |
	:PRINT
	  "<table>\n"
	:EXPR
	  =
	    i
	    0
	:PRINT
	  "  <tr>\n"
	:BLOCK
	  :PRINT
	    "    <td>foo</td>\n"
	:PRINT
	  "  </tr>\n"
	:PRINT
	  "</table>\n"

###
- name:		convert_directive_set2
  pdata: |
	<td id="set:i+=1">foo</td>
  plogic: |
  expected*:
    java: |
	:EXPR
	  +=
	    i
	    1
	:PRINT
	  "<td>"
	:BLOCK
	  :PRINT
	    "foo"
	:PRINT
	  "</td>\n"


###
- name:		convert_directive_if1
  pdata: |
	<div id="if:error">
	  error happened.
	</div>
  plogic: |
  expected*:
    java: |
	:IF
	  error
	  :BLOCK
	    :PRINT
	      "<div>\n"
	    :BLOCK
	      :PRINT
	        "  error happened.\n"
	    :PRINT
	      "</div>\n"


###
- name:		convert_directive_elseif1
  pdata: |
	<div id="if:status=='error'">
	  error happened.
	</div>
	<div id="elseif:status=='warning'">
	  warning.
	</div>
  plogic: |
  expected*:
    java: |
	:IF
	  ==
	    status
	    "error"
	  :BLOCK
	    :PRINT
	      "<div>\n"
	    :BLOCK
	      :PRINT
	        "  error happened.\n"
	    :PRINT
	      "</div>\n"
	  :IF
	    ==
	      status
	      "warning"
	    :BLOCK
	      :PRINT
	        "<div>\n"
	      :BLOCK
	        :PRINT
	          "  warning.\n"
	      :PRINT
	        "</div>\n"


###
- name:		convert_directive_elseif2
  pdata: |
	<div id="if:status=='error'">
	  error happened.
	</div>
	<div id="elseif:status=='warning'">
	  warning.
	</div>
	<div id="elseif:status=='normal'">
	  no errors nor warnings.
	</div>
  plogic: |
  expected*:
    java: |
	:IF
	  ==
	    status
	    "error"
	  :BLOCK
	    :PRINT
	      "<div>\n"
	    :BLOCK
	      :PRINT
	        "  error happened.\n"
	    :PRINT
	      "</div>\n"
	  :IF
	    ==
	      status
	      "warning"
	    :BLOCK
	      :PRINT
	        "<div>\n"
	      :BLOCK
	        :PRINT
	          "  warning.\n"
	      :PRINT
	        "</div>\n"
	    :IF
	      ==
	        status
	        "normal"
	      :BLOCK
	        :PRINT
	          "<div>\n"
	        :BLOCK
	          :PRINT
	            "  no errors nor warnings.\n"
	        :PRINT
	          "</div>\n"


###
- name:		convert_directive_elseif9
  desc:		erro if previous statement is not if-statement 
  pdata: |
	<div id="if:status=='error'">
	  error happened.
	</div>
	
	<div id="elseif:status=='warning'">
	  warning.
	</div>
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	"test-converter.html:5: 'elseif:status=='warning'': previous is not if-statement nor elseif-statement."


###
- name:		convert_directive_else1
  pdata: |
	<div id="if:status=='error'">
	  error happened.
	</div>
	<div id="else:">
	  no errors.
	</div>
  plogic: |
  expected*:
    java: |
	:IF
	  ==
	    status
	    "error"
	  :BLOCK
	    :PRINT
	      "<div>\n"
	    :BLOCK
	      :PRINT
	        "  error happened.\n"
	    :PRINT
	      "</div>\n"
	  :BLOCK
	    :PRINT
	      "<div>\n"
	    :BLOCK
	      :PRINT
	        "  no errors.\n"
	    :PRINT
	      "</div>\n"


###
- name:		convert_directive_else2
  pdata: |
	<div id="if:status=='error'">
	  error happened.
	</div>
	<div id="elseif:status=='warning'">
	  warning.
	</div>
	<div id="else:">
	  no errors, no warnings.
	</div>
  plogic: |
  expected*:
    java: |
	:IF
	  ==
	    status
	    "error"
	  :BLOCK
	    :PRINT
	      "<div>\n"
	    :BLOCK
	      :PRINT
	        "  error happened.\n"
	    :PRINT
	      "</div>\n"
	  :IF
	    ==
	      status
	      "warning"
	    :BLOCK
	      :PRINT
	        "<div>\n"
	      :BLOCK
	        :PRINT
	          "  warning.\n"
	      :PRINT
	        "</div>\n"
	    :BLOCK
	      :PRINT
	        "<div>\n"
	      :BLOCK
	        :PRINT
	          "  no errors, no warnings.\n"
	      :PRINT
	        "</div>\n"


###
- name:		convert_directive_else9
  desc:		erro if previous statement is not if-statement 
  pdata: |
	<div id="if:status=='error'">
	  error happened.
	</div>
	
	<div id="else:">
	  warning.
	</div>
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	"test-converter.html:5: 'else:': previous is not if-statement nor elseif-statement."


###
- name:		convert_directive_while1
  pdata: |
	<ul id="while:i>0">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:WHILE
	  >
	    i
	    0
	  :BLOCK
	    :PRINT
	      "<ul>\n"
	    :BLOCK
	      :PRINT
	        "  <li>123</li>\n"
	    :PRINT
	      "</ul>\n"


###
- name:		convert_directive_loop1
  pdata: |
	<ul id="loop:i>0">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:WHILE
	  >
	    i
	    0
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>123</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		convert_directive_foreach1
  pdata: |
	<ul id="foreach:item=list">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "<ul>\n"
	      :BLOCK
	        :PRINT
	          "  <li>123</li>\n"
	      :PRINT
	        "</ul>\n"


###
- name:		convert_directive_foreach2
  pdata: |
	<ul id="Foreach:item=list">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:EXPR
	  =
	    item_ctr
	    0
	:FOREACH
	  item
	  list
	  :BLOCK
	    :EXPR
	      +=
	        item_ctr
	        1
	    :BLOCK
	      :PRINT
	        "<ul>\n"
	      :BLOCK
	        :PRINT
	          "  <li>123</li>\n"
	      :PRINT
	        "</ul>\n"


###
- name:		convert_directive_foreach3
  pdata: |
	<ul id="FOREACH:item=list">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:EXPR
	  =
	    item_ctr
	    0
	:FOREACH
	  item
	  list
	  :BLOCK
	    :EXPR
	      +=
	        item_ctr
	        1
	    :EXPR
	      =
	        item_tgl
	        ?:
	          ==
	            %
	              item_ctr
	              2
	            0
	          "even"
	          "odd"
	    :BLOCK
	      :PRINT
	        "<ul>\n"
	      :BLOCK
	        :PRINT
	          "  <li>123</li>\n"
	      :PRINT
	        "</ul>\n"


###
- name:		convert_directive_foreach4
  desc:		even and odd property
  pdata: |
	<ul id="FOREACH:item=list">
	  <li>123</li>
	</ul>
  plogic: |
  properties:
    odd:	"'#CCF'"
    even:	"'#FCC'"
  expected*:
    java: |
	:EXPR
	  =
	    item_ctr
	    0
	:FOREACH
	  item
	  list
	  :BLOCK
	    :EXPR
	      +=
	        item_ctr
	        1
	    :EXPR
	      =
	        item_tgl
	        ?:
	          ==
	            %
	              item_ctr
	              2
	            0
	          "#FCC"
	          "#CCF"
	    :BLOCK
	      :PRINT
	        "<ul>\n"
	      :BLOCK
	        :PRINT
	          "  <li>123</li>\n"
	      :PRINT
	        "</ul>\n"


###
- name:		convert_directive_foreach9
  pdata: |
	<ul id="foreach:item.name=list">
	  <li>123</li>
	</ul>
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	"test-converter.html:1: 'foreach:item.name=list': invalid directive syntax."


###
- name:		convert_directive_list1
  pdata: |
	<ul id="list:item=list">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>123</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		convert_directive_list2
  pdata: |
	<ul id="List:item=list">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:EXPR
	  =
	    item_ctr
	    0
	:FOREACH
	  item
	  list
	  :BLOCK
	    :EXPR
	      +=
	        item_ctr
	        1
	    :BLOCK
	      :PRINT
	        "  <li>123</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		convert_directive_list3
  pdata: |
	<ul id="LIST:item=list">
	  <li>123</li>
	</ul>
  plogic: |
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:EXPR
	  =
	    item_ctr
	    0
	:FOREACH
	  item
	  list
	  :BLOCK
	    :EXPR
	      +=
	        item_ctr
	        1
	    :EXPR
	      =
	        item_tgl
	        ?:
	          ==
	            %
	              item_ctr
	              2
	            0
	          "even"
	          "odd"
	    :BLOCK
	      :PRINT
	        "  <li>123</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		convert_directive_list9
  pdata: |
	<ul id="list:item.name=list">
	  <li>123</li>
	</ul>
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	"test-converter.html:1: 'list:item.name=list': invalid directive syntax."


###
- name:		convert_directive_default1
  pdata: |
	Hello <em id="default:user">guest</em>!
  plogic: |
  expected*:
    java: |
	:PRINT
	  "Hello "
	:PRINT
	  "<em>"
	:IF
	  !
	    str_empty()
	      user
	  :BLOCK
	    :PRINT
	      user
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "guest"
	:PRINT
	  "</em>"
	:PRINT
	  "!\n"


###
- name:		convert_directive_error1
  desc:		unknown directive
  pdata: |
	<ul>
	  <li id="vlaue:x">foo</li>
	</ul>
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	"test-converter.html:2: 'vlaue:x': unknown directive."


###
- name:		convert_directive_error2
  desc:		directives are not available at one time. 
  pdata: |
	<ul>
	  <li id="mark:item;value:x">foo</li>
	</ul>
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	"test-converter.html:2: 'value:x': not available with other directive 'mark' at one time."


###
- name:		convert_directive_combination1
  pdata*:
    java: |
	<table>
	  <tbody id="set:i=0;list:item=items;append:' title=foo'">
	    <tr id="set:i+=1;set:color=i%2==0?'#FCC':'#CCF';attr:bgcolor=color">
	      <td id="value:item">foo</td>
	    </tr>
	  </tbody>
	</table>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<table>\n"
	:EXPR
	  =
	    i
	    0
	:PRINT
	  "  <tbody"
	  " title=foo"
	  ">\n"
	:FOREACH
	  item
	  items
	  :BLOCK
	    :BLOCK
	      :EXPR
	        +=
	          i
	          1
	      :EXPR
	        =
	          color
	          ?:
	            ==
	              %
	                i
	                2
	              0
	            "#FCC"
	            "#CCF"
	      :PRINT
	        "    <tr bgcolor=\""
	        color
	        "\">\n"
	      :BLOCK
	        :PRINT
	          "      <td>"
	        :PRINT
	          item
	        :PRINT
	          "</td>\n"
	      :PRINT
	        "    </tr>\n"
	:PRINT
	  "  </tbody>\n"
	:PRINT
	  "</table>\n"


### ----------------------------------------

###
- name:		converter01
  desc:		basic example
  pdata: |
	<table>
	 <tr id="mark:list">
	  <td id="mark:item">foo</td>
	 </tr>
	</table>
  plogic: |
	#list {
	  logic: {
	    foreach (item = list) {
	      _stag;
	      _cont;
	      _etag;
	    }
	  }
	}
	#item { value: item; }
  expected*:
    java: |
	:PRINT
	  "<table>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :PRINT
	      " <tr>\n"
	    :BLOCK
	      :PRINT
	        "  <td>"
	      :PRINT
	        item
	      :PRINT
	        "</td>\n"
	    :PRINT
	      " </tr>\n"
	:PRINT
	  "</table>\n"
    obsolete: |
	:PRINT
	  "<table>\n"
	:BLOCK
	  :FOREACH
	    item
	    list
	    :BLOCK
	      :PRINT
	        " <tr>\n"
	      :BLOCK
	        :BLOCK
	          :PRINT
	            "  <td>"
	          :PRINT
	            item
	          :PRINT
	            "</td>\n"
	      :PRINT
	        " </tr>\n"
	:PRINT
	  "</table>\n"

###
- name:		converter02
  desc:		complex example
  pdata: |
	<table>
	 <tr id="mark:list">
	  <td id="mark:item">foo</td>
	 </tr>
	</table>
  plogic: |
	#list {
	  attrs: 'bgcolor' color;
	  logic: {
	    i = 0;
	    foreach (item = list) {
	      i += 1;
	      color = i % 2 == 0 ? '#FCC' : '#CCF';
	      _stag;
	      _cont;
	      _etag;
	    }
	  }
	}
	#item { value: item; }
  expected*:
    java: |
	:PRINT
	  "<table>\n"
	:EXPR
	  =
	    i
	    0
	:FOREACH
	  item
	  list
	  :BLOCK
	    :EXPR
	      +=
	        i
		1
	    :EXPR
	      =
		color
		?:
		  ==
		    %
	              i
	              2
		    0
	          "#FCC"
	          "#CCF"
	    :PRINT
	      " <tr bgcolor=\""
	      color
	      "\">\n"
	    :BLOCK
	      :PRINT
	        "  <td>"
	      :PRINT
	        item
	      :PRINT
	        "</td>\n"
	    :PRINT
	      " </tr>\n"
	:PRINT
	  "</table>\n"
    obsolete: |
	:PRINT
	  "<table>\n"
	:BLOCK
	  :EXPR
	    =
	      i
	      0
	  :FOREACH
	    item
	    list
	    :BLOCK
	      :EXPR
	        +=
	          i
		  1
	      :EXPR
	        =
		  color
		  ?:
		    ==
		      %
	                i
	                2
		      0
	            "#FCC"
	            "#CCF"
	      :PRINT
	        " <tr bgcolor=\""
		color
		"\">\n"
	      :BLOCK
	        :BLOCK
	          :PRINT
	            "  <td>"
	          :PRINT
	            item
	          :PRINT
	            "</td>\n"
	      :PRINT
	        " </tr>\n"
	:PRINT
	  "</table>\n"

###
- name:		converter03
  desc:		empty logic
  pdata: |
        <div>
	 <ul id="mark:list">
	  <li id="mark:item">foo</li>
	 </ul>
	</div>
  plogic: |
	#list {
	  logic: {
	  }
	}
	#item {
	  value: item;
	}
  expected*:
    ruby: &convert12_expected |
  	print("<div>\n")
  	print("</div>\n")
    php:  *convert12_expected
    java: |
	:PRINT
	  "<div>\n"
	:PRINT
	  "</div>\n"

###
- name:		converter04
  desc:		multi selectors
  pdata: |
	<ul id="mark:list1">
	  <li id="mark:item1">foo</li>
	</ul>
	<ol id="mark:list2">
	  <li id="mark:item2">bar</li>
	</ol>
	<dl id="mark:list3">
	  <dd id="mark:item3>baz</dd>
	</dl>
  plogic*:
    java: |
	#list1, #list2, #list3 {
	  logic: {
	    _stag;
	    foreach (item in list) {
	      _cont;
	    }
	    _etag;
	  }
	}
	#item1, #item2, #item3 {
	  value: item;
	}
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        item
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  "<ol>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        item
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ol>\n"
	:PRINT
	  "<dl>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
	      :PRINT
	        item
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</dl>\n"



### ----------------------------------------

###
- name:		converter_selector_id1
  desc:		id attribute
  pdata: |
	<ul id="list">
	 <li id="item">foo</li>
	</ul>
  plogic: |
	#list {
	  logic: {
	    _stag;
	    foreach (item = list) {
	      _cont;
	    }
	    _etag;
	  }
	}
	#item { value: item; }
  expected*:
    java: |
	:PRINT
	  "<ul id=\"list\">\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        " <li id=\"item\">"
	      :PRINT
	        item
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
    obsolete: |
	:BLOCK
	  :PRINT
	    "<ul id=\"list\">\n"
	  :FOREACH
	    item
	    list
	    :BLOCK
	      :BLOCK
	        :BLOCK
	          :PRINT
	            " <li id=\"item\">"
	          :PRINT
	            item
	          :PRINT
	            "</li>\n"
	  :PRINT
	    "</ul>\n"


###
- name:		converter_selector_class1
  desc:		class attribute
  pdata: |
	<ul class="list">
	 <li class="item">foo</li>
	</ul>
  plogic: |
	.list {
	  logic: {
	    _stag;
	    foreach (item = list) {
	      _cont;
	    }
	    _etag;
	  }
	}
	.item { value: item; }
  expected*:
    java: |
	:PRINT
	  "<ul class=\"list\">\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        " <li class=\"item\">"
	      :PRINT
	        item
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"

    obsolete: |
	:BLOCK
	  :PRINT
	    "<ul class=\"list\">\n"
	  :FOREACH
	    item
	    list
	    :BLOCK
	      :BLOCK
	        :BLOCK
	          :PRINT
	            " <li class=\"item\">"
	          :PRINT
	            item
	          :PRINT
	            "</li>\n"
	  :PRINT
	    "</ul>\n"


###
- name:		converter_selector_tag1
  desc:		tagname
  pdata: |
	<ul>
	 <li>foo</li>
	</ul>
  plogic: |
	ul {
	  logic: {
	    _stag;
	    foreach (item = list) {
	      _cont;
	    }
	    _etag;
	  }
	}
	li { value: item; }
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        " <li>"
	      :PRINT
	        item
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"
    obsolete: |
	:BLOCK
	  :PRINT
	    "<ul>\n"
	  :FOREACH
	    item
	    list
	    :BLOCK
	      :BLOCK
	        :BLOCK
	          :PRINT
	            " <li>"
	          :PRINT
	            item
	          :PRINT
	            "</li>\n"
	  :PRINT
	    "</ul>\n"


###
- name:		converter_selector_mixed1
  desc:		combination of tag&class, class&id, id&tag
  pdata: |
	<p class="small">
	  foo
	</p>
	<p id="mark:name1">
	  bar
	</p>
	<span class="small" id="mark:name2">
	  baz
	</span>
  plogic: |
 	p   {
 	  attrs: 'title' desc;
 	}
 	.small {
 	  append:  ' style="font-size:small"'; 
 	}
	#name1 {
	  value: value1;
	}
	#name2 {
	  value: value2;
	} 
  expected*:
    java: |
	:PRINT
	  "<p class=\"small\" title=\""
	  desc
	  "\""
	  " style=\"font-size:small\""
	  ">\n"
	:BLOCK
	  :PRINT
	    "  foo\n"
	:PRINT
	  "</p>\n"
	:PRINT
	  "<p title=\""
	  desc
	  "\">\n"
	:PRINT
	  value1
	:PRINT
	  "</p>\n"
	:PRINT
	  "<span class=\"small\""
	  " style=\"font-size:small\""
	  ">\n"
	:PRINT
	  value2
	:PRINT
	  "</span>\n"


###
- name:		converter_selector_mixed2
  desc:		combination of tag, class, and id
  pdata: |
	<ul id="mark:list" class="small">
	 <li>foo</li>
	</ul>
  plogic: |
 	ul   {
 	  attrs: 'title' desc;
 	}
 	.small {
 	  append:  ' style="font-size:small"'; 
 	}
	#list {
	  logic: {
	    _stag;
	    foreach (item = list) {
	      _cont;
	    }
	    _etag;
	  }
	}
	li { value: item; }
  expected*:
    java: |
	:PRINT
	  "<ul class=\"small\" title=\""
	  desc
	  "\""
	  " style=\"font-size:small\""
	  ">\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        " <li>"
	      :PRINT
	        item
	      :PRINT
	        "</li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		converter_selector_mixed3
  desc:		tag, class, and id selectors
  pdata: |
	<b>foo</b>
	<span class="val">bar</span>
	<span id="name1">baz</span>
  plogic: |
	b, .val, #name1 {
	  value: value;
	}
  expected*:
    java: |
	:PRINT
	  "<b>"
	:PRINT
	  value
	:PRINT
	  "</b>\n"
	:PRINT
	  "<span class=\"val\">"
	:PRINT
	  value
	:PRINT
	  "</span>\n"
	:PRINT
	  "<span id=\"name1\">"
	:PRINT
	  value
	:PRINT
	  "</span>\n"


###
- name:		converter_selector_priority1
  desc:		'kw:d="mark:foo" is prior to id="bar"'
  pdata: |
	<b id="mark:bar" kw:d="mark:foo">baz</b>
  plogic: |
	#bar {
	  value: var_bar;
	}
	#foo {
	  value: var_foo;
	}
  expected*:
    java: |
	:PRINT
	  "<b id=\"mark:bar\">"
	:PRINT
	  var_foo
	:PRINT
	  "</b>\n"


###
- name:		converter_selector_priority2
  desc:		sequence of 'append:' properties
  pdata: |
	<b id="mark:foo" class="bar">foo</b>
  plogic: |
	#foo {
	  append: ' checked';
	}
	.bar {
	  append: ' selected';
	}
	b {
	  append: ' disabled';
	}
  expected*:
    java: |
	:PRINT
	  "<b class=\"bar\""
	  " disabled"
	  " selected"
	  " checked"
	  ">"
	:BLOCK
	  :PRINT
	    "foo"
	:PRINT
	  "</b>\n"


###
- name:		converter_selector_priority3
  desc:		applied even when 'attr:' directive
  pdata: |
	<b id="attr:bgcolor:color" class="foo">foo</b>
  plogic: |
	.foo {
	  attrs: 'title' title;
	}
	b {
	  value: value;
	}
  expected*:
    java: |
	:PRINT
	  "<b class=\"foo\" title=\""
	  title
	  "\" bgcolor=\""
	  color
	  "\">"
	:PRINT
	  value
	:PRINT
	  "</b>\n"


### ----------------------------------------

###
- name:		converter_embedexpr1
  desc:		@{expr}@ and @!{expr}@
  pdata: |
	Hello @{user}@!
	<ul>
	  <li>@!{item}@</li>
	</ul>
	@!{copyright}@
  plogic*:
    java: |
	ul {
	  logic: {
	    _stag;
	    foreach (item = list) {
	      _cont;
	    }
	    _etag;
	  }
	}
  expected*:
    java: |
	:PRINT
	  "Hello "
	  E()
	    user
	  "!\n"
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>"
		X()
	          item
	        "</li>\n"
	:PRINT
	  "</ul>\n"
	:PRINT
	  X()
	    copyright
	  "\n"


###
- name:		converter_embedexpr2
  desc:		@{expr}@ in attr value with marking
  pdata: |
	<ul>
	  <li>
	    <a name="@{user.id}@" href="mailto:@{user.email}@" id="mark:user">foo</a>
	  </li>
	</ul>
  plogic*:
    java: |
	li {
	  logic: {
	    foreach (item in list) {
	      _elem;
	    }
	  }
	}
	#user {
	  value: user.name;
	}
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>\n"
	      :BLOCK
	        :PRINT
	          "    <a name=\""
	          E()
	            .
	              user
	              .id
	          "\" href=\""
	          .+
	            "mailto:"
	            E()
	              .
	                user
	                .email
	          "\">"
	        :PRINT
	          .
	            user
	            .name
	        :PRINT
	          "</a>\n"
	      :PRINT
	        "  </li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		converter_embedexpr3
  desc:		@{expr}@ in attr value, without ruleset matching
  pdata: |
	<ul>
	  <li>
	    <a name="@{user.id}@" href="mailto:@{user.email}@">@{user.name}@</a>
	  </li>
	</ul>
  plogic*:
    java: |
	li {
	  logic: {
	    foreach (item in list) {
	      _elem;
	    }
	  }
	}
  expected*:
    java: |
	:PRINT
	  "<ul>\n"
	:FOREACH
	  item
	  list
	  :BLOCK
	    :BLOCK
	      :PRINT
	        "  <li>\n"
	      :BLOCK
	        :PRINT
	          "    <a name=\""
	          E()
	            .
	              user
	              .id
	          "\" href=\"mailto:"
	          E()
	            .
	              user
	              .email
	          "\">"
	          E()
	            .
	              user
	              .name
	          "</a>\n"
	      :PRINT
	        "  </li>\n"
	:PRINT
	  "</ul>\n"


###
- name:		converter_embedexpr4
  desc:		@{expr}@ in plogic has no means
  pdata: |
	<a href="mailto:foo@mail.com" id="mark:user">foo</a>
  plogic*:
    java: |
 	#user {
 	  value: "@{user.name}@";
 	  attrs: 'href' "mailto:@{user.email}@";
 	}
  expected*:
    java: |
	:PRINT
	  "<a href=\"mailto:@{user.email}@\">"
	:PRINT
	  "@{user.name}@"
	:PRINT
	  "</a>\n"


###
- name:		converter_embedexpr5
  desc:		@{expr}@ is not available with directive attribute
  pdata: |
	<div id="@{user_id}@">
	  <p kw:d="@{user_title}@">...</p>
	</div>
  plogic:
  expected*:
    java: |
	:PRINT
	  "<div id=\""
	  E()
	    user_id
	  "\">\n  <p kw:d=\""
	  E()
	    user_title
	  "\">...</p>\n</div>\n"


###
- name:		converter_embedexpr7
  desc:		syntax error at @{expr}@ in text 
  pdata: |
	foo
	bar
	baz@{expr,}@
  plogic:
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	'test-converter.html:3: @{expr,}@: embedded expression has syntax error.'


###
- name:		converter_embedexpr8
  desc:		syntax error at @{expr}@ in tag 
  pdata: |
	<div id="section">
	  <ul id="mark:list">
	    <li id="mark:item">@{expr,}@</li>
	  </ul>
	</div>
  plogic:
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	'test-converter.html:3: @{expr,}@: embedded expression has syntax error.'


###
- name:		converter_embedexpr9
  desc:		syntax error at @{expr}@ in attr 
  pdata: |
	<div id="section">
	  <ul id="mark:list">
	    <li id="@{expr,}@"</li>
	  </ul>
	</div>
  plogic:
  exception*:
    java:	kwartz.ConvertException
  errormsg*:
    java:	'test-converter.html:3: @{expr,}@: embedded expression has syntax error.'
 
 
 
### ----------------------------------------

###
- name:    converter_delspan1
  desc:    <span> and id="mark:foo"
  properties:  { delspan : true }
  pdata*:
    eruby: |
	<p>
	  <span id="foo">FOO</span>
	  <span id="mark:bar">BAR</span>
	  <span kw:d="id: baz">BAZ</span>
	  <span kw:d="mark:poo" class="foo">POO</span>
	</p>

    php: &delspan1_pdata |
	<p>
	  <span id="foo">FOO</span>
	  <span id="mark:bar">BAR</span>
	  <span kw:d="id(baz)">BAZ</span>
	  <span kw:d="mark(poo)" class="foo">POO</span>
	</p>

    jstl: *delspan1_pdata
    
    eperl: *delspan1_pdata

    java: |
	<p>
	  <span id="foo">FOO</span>
	  <span id="mark:bar">BAR</span>
	  <span kw:d="id:baz">BAZ</span>
	  <span kw:d="mark:poo" class="foo">POO</span>
	</p>

  expected*:
    eruby: &delspan2_expected |
	print("<p>\n")
	print("  <span id=\"foo\">")
	print("FOO")
	print("</span>\n")
	print()
	print("BAR")
	print()
	print()
	print("BAZ")
	print()
	print("  <span class=\"foo\">")
	print("POO")
	print("</span>\n")
	print("</p>\n")

    php: *delspan2_expected

    jstl: *delspan2_expected

    eperl: *delspan2_expected

    java: |
	:PRINT
	  "<p>\n"
	:PRINT
	  "  <span id=\"foo\">"
	:BLOCK
	  :PRINT
	    "FOO"
	:PRINT
	  "</span>\n"
	:PRINT
	  "  "
	:BLOCK
	  :PRINT
	    "BAR"
	:PRINT
	  "\n"
	:PRINT
	  "  "
	:BLOCK
	  :PRINT
	    "BAZ"
	:PRINT
	  "\n"
	:PRINT
	  "  <span class=\"foo\">"
	:BLOCK
	  :PRINT
	    "POO"
	:PRINT
	  "</span>\n"
	:PRINT
	  "</p>\n"


###
- name:		converter_delspan2
  desc:		<span> with head space and tail space
  properties:	{ delspan: true }
  pdata*:
    eruby: |
	<p>
	  <span id="foo">
	    FOO
	  </span>
	  <span id="mark:bar">
	    BAR
	  </span>
	  <span kw:d="id: baz">
	    BAZ
	  </span>
	  <span kw:d="mark:poo" class="foo">
	    POO
	  </span>
	</p>

    php: &delspan2_pdata |
	<p>
	  <span id="foo">
	    FOO
	  </span>
	  <span id="mark:bar">
	    BAR
	  </span>
	  <span kw:d="id(baz)">
	    BAZ
	  </span>
	  <span kw:d="mark(poo)" class="foo">
	    POO
	  </span>
	</p>

    jstl: *delspan2_pdata
    
    eperl: *delspan2_pdata

    java: |
	<p>
	  <span id="foo">
	    FOO
	  </span>
	  <span id="mark:bar">
	    BAR
	  </span>
	  <span kw:d="id:baz">
	    BAZ
	  </span>
	  <span kw:d="mark:poo" class="foo">
	    POO
	  </span>
	</p>

  plogic:
  expected*:
    java: |
	:PRINT
	  "<p>\n"
	:PRINT
	  "  <span id=\"foo\">\n"
	:BLOCK
	  :PRINT
	    "    FOO\n"
	:PRINT
	  "  </span>\n"
	:PRINT
	:BLOCK
	  :PRINT
	    "    BAR\n"
	:PRINT
	:PRINT
	:BLOCK
	  :PRINT
	    "    BAZ\n"
	:PRINT
	:PRINT
	  "  <span class=\"foo\">\n"
	:BLOCK
	  :PRINT
	    "    POO\n"
	:PRINT
	  "  </span>\n"
	:PRINT
	  "</p>\n"

 
###
- name:    converter_delspan3
  desc:    <span> and 'attr:' or 'append:'
  properties:  { delspan : true }
  pdata*:
    eruby: |
	<p>
	  <span kw:d="attr: 'class' classname">ATTR</span>
	  <span kw:d="append: ' checked'">APPEND</span>
	  <span kw:d="append: ' checked'" class="foo">APPEND</span>
	</p>

    php: |
	<p>
	  <span kw:d="attr('class', $classname)">ATTR</span>
	  <span kw:d="append(' checked')">APPEND</span>
	  <span kw:d="append(' checked')" class="foo">APPEND</span>
	</p>

    jstl: |
	<p>
	  <span kw:d="attr('class', classname)">ATTR</span>
	  <span kw:d="append(' checked')">APPEND</span>
	  <span kw:d="append(' checked')" class="foo">APPEND</span>
	</p>

    eperl: |
	<p>
	  <span kw:d="attr('class', $classname)">ATTR</span>
	  <span kw:d="append(' checked')">APPEND</span>
	  <span kw:d="append(' checked')" class="foo">APPEND</span>
	</p>

    java: |
	<p>
	  <span kw:d="attr:class=classname">ATTR</span>
	  <span kw:d="append:' checked'">APPEND</span>
	  <span kw:d="append:' checked'" class="foo">APPEND</span>
	</p>

  expected*:
    eruby: |
	print("<p>\n")
	print("  <span class=\"", <%=classname%>, "\">")
	print("ATTR")
	print("</span>\n")
	print("  <span", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("  <span class=\"foo\"", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("</p>\n")

    php: |
	print("<p>\n")
	print("  <span class=\"", <%=$classname%>, "\">")
	print("ATTR")
	print("</span>\n")
	print("  <span", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("  <span class=\"foo\"", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("</p>\n")

    jstl: |
	print("<p>\n")
	print("  <span class=\"", <%=classname%>, "\">")
	print("ATTR")
	print("</span>\n")
	print("  <span", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("  <span class=\"foo\"", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("</p>\n")

    eperl: |
	print("<p>\n")
	print("  <span class=\"", <%=$classname%>, "\">")
	print("ATTR")
	print("</span>\n")
	print("  <span", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("  <span class=\"foo\"", <%=' checked'%>, ">")
	print("APPEND")
	print("</span>\n")
	print("</p>\n")

    java: |
	:PRINT
	  "<p>\n"
	:PRINT
	  "  <span class=\""
	  classname
	  "\">"
	:BLOCK
	  :PRINT
	    "ATTR"
	:PRINT
	  "</span>\n"
	:PRINT
	  "  <span"
	  " checked"
	  ">"
	:BLOCK
	  :PRINT
	    "APPEND"
	:PRINT
	  "</span>\n"
	:PRINT
	  "  <span class=\"foo\""
	  " checked"
	  ">"
	:BLOCK
	  :PRINT
	    "APPEND"
	:PRINT
	  "</span>\n"
	:PRINT
	  "</p>\n"


###
- name:    converter_delspan4
  desc:    <span> and 'value:'
  properties:  { delspan : true }
  pdata*:
    eruby: |
	<p>
	  <span kw:d="value: expr">EXPR</span>
	  <span kw:d="value: expr" class="foo">EXPR</span>
	</p>

    php: |
	<p>
	  <span kw:d="value($expr)">EXPR</span>
	  <span kw:d="value($expr)" class="foo">EXPR</span>
	</p>

    jstl: |
	<p>
	  <span kw:d="value(expr)">EXPR</span>
	  <span kw:d="value(expr)" class="foo">EXPR</span>
	</p>

    eperl: |
	<p>
	  <span kw:d="value($expr)">EXPR</span>
	  <span kw:d="value($expr)" class="foo">EXPR</span>
	</p>

    java: |
	<p>
	  <span id="value:expr">EXPR</span>
	  <span id="value:expr" class="foo">EXPR</span>
	</p>

  expected*:
    eruby: |
	print("<p>\n")
	print(<%=expr%>)
	print("  <span class=\"foo\">", <%=expr%>, "</span>\n")
	print("</p>\n")

    php: |
	print("<p>\n")
	print(<%=$expr%>)
	print("  <span class=\"foo\">", <%=$expr%>, "</span>\n")
	print("</p>\n")

    jstl: |
	print("<p>\n")
	print(<%=expr%>)
	print("  <span class=\"foo\">", <%=expr%>, "</span>\n")
	print("</p>\n")

    eperl: |
	print("<p>\n")
	print(<%=$expr%>)
	print("  <span class=\"foo\">", <%=$expr%>, "</span>\n")
	print("</p>\n")

    java: |
	:PRINT
	  "<p>\n"
	:PRINT
	  "  "
	:PRINT
	  expr
	:PRINT
	  "\n"
	:PRINT
	  "  <span class=\"foo\">"
	:PRINT
	  expr
	:PRINT
	  "</span>\n"
	:PRINT
	  "</p>\n"

	  
###
- name:    converter_delspan5
  desc:    <span> and 'if:', 'elsif:', 'else:'
  properties:  { delspan : true }
  pdata*:
    eruby: |
	<p>
	  <span kw:d="if x > 0">positive</span>
	  <span kw:d="elsif x < 0">negative</span>
	  <span kw:d="else">zero</span>
	</p>

    php: |
	<p>
	  <span kw:d="if($x > 0)">positive</span>
	  <span kw:d="elseif($x < 0)">negative</span>
	  <span kw:d="else">zero</span>
	</p>

    jstl: |
	<p>
	  <span kw:d="if(x > 0)">positive</span>
	  <span kw:d="elseif(x < 0)">negative</span>
	  <span kw:d="else">zero</span>
	</p>

    eperl: |
	<p>
	  <span kw:d="if($x > 0)">positive</span>
	  <span kw:d="elsif($x < 0)">negative</span>
	  <span kw:d="else">zero</span>
	</p>

    java: |
	<p>
	  <span id="if:x>0">
	    positive
	  </span>
	  <span id="elseif:x<0">
	    negative
	  </span>
	  <span id="else:">
	    zero
	  </span>
	</p>

  plogic: |
  expected*:
    eruby: |
	print("<p>\n")
	<%if x > 0 then%>
	print()
	print("positive")
	print()
	<%elsif x < 0 then%>
	print()
	print("negative")
	print()
	<%else%>
	print()
	print("zero")
	print()
	<%end%>
	print("</p>\n")

    php: |
	print("<p>\n")
	<%if ($x > 0) {%>
	print()
	print("positive")
	print()
	<%} elseif ($x < 0) {%>
	print()
	print("negative")
	print()
	<%} else {%>
	print()
	print("zero")
	print()
	<%}%>
	print("</p>\n")

    jstl: |
	print("<p>\n")
	<%<c:choose><c:when test="${x > 0}">%>
	print()
	print("positive")
	print()
	<%</c:when><c:when test="${x < 0}">%>
	print()
	print("negative")
	print()
	<%</c:when><c:otherwise>%>
	print()
	print("zero")
	print()
	<%</c:otherwise></c:choose>%>
	print("</p>\n")

    eperl: |
	print("<p>\n")
	<%if ($x > 0) {%>
	print()
	print("positive")
	print()
	<%} elsif ($x < 0) {%>
	print()
	print("negative")
	print()
	<%} else {%>
	print()
	print("zero")
	print()
	<%}%>
	print("</p>\n")

    java: |
	:PRINT
	  "<p>\n"
	:IF
	  >
	    x
	    0
	  :BLOCK
	    :PRINT
	    :BLOCK
	      :PRINT
	        "    positive\n"
	    :PRINT
	  :IF
	    <
	      x
	      0
	    :BLOCK
	      :PRINT
	      :BLOCK
	        :PRINT
	          "    negative\n"
	      :PRINT
	    :BLOCK
	      :PRINT
	      :BLOCK
	        :PRINT
	          "    zero\n"
	      :PRINT
	:PRINT
	  "</p>\n"

	  
### ----------------------------------------

- name:		convert_document1
  pdata: &convert_document1_pdata |
	<html>
	 <body>
	  <h1>...</h1>
	 </body>
	</html>
  plogic*:
    java: |
	#DOCUMENT {
	  begin: {
	    title = context['title'];
	  }
	  end: {
	    print("<!-- end -->\n");
	  }
	}
	h1 {
	  value: title;
	}
  expected*:
    java: &convert_document1_expected_java |
	:EXPR
	  =
	    title
	    []
	      context
	      "title"
	:PRINT
	:BLOCK
	  :PRINT
	    "<html>\n <body>\n"
	  :PRINT
	    "  <h1>"
	  :PRINT
	    title
	  :PRINT
	    "</h1>\n"
	  :PRINT
	    " </body>\n</html>\n"
	:PRINT
	:PRINT
	  "<!-- end -->\n"


###
- name:		convert_document2
  pdata: *convert_document1_pdata
  plogic*:
    java: |
	#DOCUMENT {
	  before: {
	    title = context['title'];
	  }
	  after: {
	    print("<!-- end -->\n");
	  }
	}
	h1 {
	  value: title;
	}
  expected*:
    java: *convert_document1_expected_java
    
	  
###
- name:		convert_document3
  pdata: |
	<html>
	 <body>
	  <ul id="mark:list">
	   <li id="mark:item">foo</li>
	  </ul>
	 </body>
	</html>
  plogic*:
    java: |
	#list {
	  logic: {
	    _stag;
	    foreach (item = list) {
	      _cont;
	    }
	    _etag;
	  }
	}
	#item {
	  value: item;
	}
	#DOCUMENT {
	  logic: {
	    _element(list);
	  }
	}
  expected*:
    java: |
	:BLOCK
	  :PRINT
	    "  <ul>\n"
	  :FOREACH
	    item
	    list
	    :BLOCK
	      :BLOCK
	        :PRINT
	          "   <li>"
	        :PRINT
	          item
	        :PRINT
	          "</li>\n"
	  :PRINT
	    "  </ul>\n"
