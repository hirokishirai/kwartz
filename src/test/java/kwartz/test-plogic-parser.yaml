### $Date$
### $Release$
### $Copyright$

###
- name:		ruleset1
  input: |
	#foo { value: s; }
  expected: |
	#foo {
	  value:
	    s
	}

- name:		ruleset2
  input: |
	#mark2 {
	  stag: start_tag();
	  cont: content();
	  etag: end_tag();
	  elem: element();
	}
  expected: |
	#mark2 {
	  stag:
	    start_tag()
	  cont:
	    content()
	  etag:
	    end_tag()
	  elem:
	    element()
	}

- name:		ruleset3
  input: |
	#mark3 {
	  value: value();
	  attrs: 'class' klass, 'name' name, 'href' 'http://'.+host;
	  append: checked ? ' checked="checked"' : '';
	  remove: 'id', 'value', "title";
	  tagname: "html:anchor";
	}
  expected: |
	#mark3 {
	  value:
	    value()
	  attrs:
	    - 'class'
	      klass
	    - 'href'
	      .+
	        "http://"
		host
	    - 'name'
	      name
	  append:
	    ?:
	      checked
	      " checked=\"checked\""
	      ""
	  remove:
	    - 'id'
	    - 'value'
	    - 'title'
	  tagname: 'html:anchor'
	}

- name:		ruleset4
  input: |
	#mark4 {
	  stag:  s;
	  etag:  e;
	  cont:  c;
	  elem:  m;
	  value: v;
	  attrs: 'a1' v1,
	         "a2" v2;
	  append:  e1, e2;
	}
	#mark4E {
	  Stag:  s;
	  Etag:  e;
	  Cont:  c;
	  Elem:  m;
	  Value: v;
	  Attrs: 'a1' v1,
	         "a2" v2;
	  Append:  e1, e2;
	}
	#mark4X {
	  STAG:  s;
	  ETAG:  e;
	  CONT:  c;
	  ELEM:  m;
	  VALUE: v;
	  ATTRS: 'a1' v1,
	         "a2" v2;
	  APPEND:  e1, e2;
	}
  expected: |
	#mark4 {
	  stag:
	    s
	  cont:
	    c
	  etag:
	    e
	  elem:
	    m
	  value:
	    v
	  attrs:
	    - 'a1'
	      v1
	    - 'a2'
	      v2
	  append:
	    e1
	    e2
	}
	#mark4E {
	  stag:
	    E()
	      s
	  cont:
	    E()
	      c
	  etag:
	    E()
	      e
	  elem:
	    E()
	      m
	  value:
	    E()
	      v
	  attrs:
	    - 'a1'
	      E()
	        v1
	    - 'a2'
	      E()
	        v2
	  append:
	    E()
	      e1
	    E()
	      e2
	}
	#mark4X {
	  stag:
	    X()
	      s
	  cont:
	    X()
	      c
	  etag:
	    X()
	      e
	  elem:
	    X()
	      m
	  value:
	    X()
	      v
	  attrs:
	    - 'a1'
	      X()
	        v1
	    - 'a2'
	      X()
	        v2
	  append:
	    X()
	      e1
	    X()
	      e2
	}

- name:		ruleset5
  desc:		"'logic:' part"
  input: |
	#elem5 {
	  logic: {
	    i = 0;
	    foreach (value in list) {
	      i += 1;
	      _stag;
	      _cont;
	      _etag;
	    }
	  }
	}
  expected: |
	#elem5 {
	  logic: {
	    :EXPR
	      =
	        i
		0
	    :FOREACH
	      value
	      list
	      :BLOCK
	        :EXPR
		  +=
		    i
		    1
		_stag
		_cont
		_etag
	  }
	}

- name:		ruleset6
  desc:		"'begin:', 'end:', 'before:', 'after:'"
  input: |
	#DOCUMENT {
	  begin: {
	    title = content['title'];
	  }
	  end: {
	    print("copyright(c) 2006 kuwata-lab.com all rights reserved.");
	  }
	}
	#elem6 {
	  before: {
	    list = user_list;
	    print("<!-- start -->\n");
	  }
	  after: {
	    print("<!-- end -->\n");
	  }
	}
  expected: |
	#DOCUMENT {
	  begin: {
	    :EXPR
	      =
	        title
	        []
	          content
	          "title"
	  }
	  end: {
	    :PRINT
	      "copyright(c) 2006 kuwata-lab.com all rights reserved."
	  }
	}
	#elem6 {
	  before: {
	    :EXPR
	      =
	        list
	        user_list
	    :PRINT
	      "<!-- start -->\n"
	  }
	  after: {
	    :PRINT
	      "<!-- end -->\n"
	  }
	}

- name:		ruleset7
  desc:		empty logic
  input: |
	#foo {
	  logic: {
	  
	  }
	  before: {}
	  after: {
	  }
	}
	#DOCUMENT {
	  begin: {}
	  end: {}
	}
  expected: |
	#foo {
	  logic: {
	  }
	  before: {
	  }
	  after: {
	  }
	}
	#DOCUMENT {
	  begin: {
	  }
	  end: {
	  }
	}


- name:		ruleset8
  desc:		complex rulesets
  input: |
	#title { Value: doctitle; }
	#h1    { VALUE: doctitle; }
	#tr {
	  attrs: 'bgcolor' color;
	  logic: {
	    _stag;
	    i = 0;
	    foreach (item in list) {
	      i += 1;
	      color = i % 2 == 0 ? '#FCC' : '#CCF';
	      _cont;
	    }
	    _etag;
	  }
	}
	#td {
	  Value: item; 
	}
  expected: |
	#title {
	  value:
	    E()
	      doctitle
	}
	#h1 {
	  value:
	    X()
	      doctitle
	}
	#tr {
	  attrs:
	    - 'bgcolor'
	      color
	  logic: {
	    _stag
	    :EXPR
	      =
	        i
	        0
	    :FOREACH
	      item
	      list
	      :BLOCK
	        :EXPR
	          +=
	            i
	            1
	        :EXPR
	          =
	            color
	            ?:
	              ==
	                %
	                  i
	                  2
	                0
	              "#FCC"
	              "#CCF"
	        _cont
	    _etag
	  }
	}
	#td {
	  value:
	    E()
	      item
	}

###
- name:		selector1
  desc:		.class
  input: |
	.foo {
	   value: x;
	}
  expected: |
	.foo {
	  value:
	    x
	}

- name:		selector2
  desc:		tag
  input: |
	h1 {
	  value: doctitle;
	}
	title {
	  value: doctitle;
	}
  expected: |
	h1 {
	  value:
	    doctitle
	}
	title {
	  value:
	    doctitle
	}

- name:		selector3
  desc:		combination of #foo, .foo, and foo
  input: |
	#list, .users, table {
	  logic: {
	    foreach (item in list) {
	      _elem;
	    }
	  }
	}
  expected: |
	#list, .users, table {
	  logic: {
	    :FOREACH
	      item
	      list
	      :BLOCK
	        _elem
	  }
	}

###
- name:		command1
  desc:		@import command
  input: |
	@import 'link.plogic';
	@import 'show.plogic';
	
	#list {
	  logic: {
	    foreach (user in users) {
	      _elem;
	    }
	  }
	}
  expected: |
	#link_to_list {
	  elem:
	    link_to()
	      "List"
	      "/user/list"
	}
	#link_to_create {
	  elem:
	    link_to()
	      "Create"
	      "/user/create"
	}
	#user_name {
	  value:
	    .
	      user
	      .name
	}
	#user_email {
	  value:
	    .
	      user
	      .email
	}
	#user_age {
	  value:
	    .
	      user
	      .age
	}
	#list {
	  logic: {
	    :FOREACH
	      user
	      users
	      :BLOCK
	        _elem
	  }
	}
  tmpfiles:
    - name:	link.plogic
      content: |
	#link_to_list {
	  elem:  link_to("List", "/user/list");
	}
	#link_to_create {
	  elem:  link_to("Create", "/user/create");
	}
    - name:	show.plogic
      content: |
	#user_name  { value: user.name; }
	#user_email { value: user.email; }
	#user_age   { value: user.age; }

- name:		command2
  desc:		import file is missing
  input: |
	
	@import 'foobar.plogic';
	
  exception*:
    ruby:	Kwartz::SemanticError
    java:	kwartz.SemanticException
  errormsg*:
    ruby:	file 'foobar.plogic' is not found.
    java:	'2:1: foobar.plogic (No such file or directory)'


###
- name:		comment1
  desc:		region comment
  input: |
	/*
	 *  region comment
	 */
	   /* comment */
	#foo { value: x; }
  expected: |
	#foo {
	  value:
	    x
	}

- name:		comment2
  desc:		line comment
  input: |
	// line comment
	// line comment
	   // line comment
	#foo { // line comment
	   value: x;
	}
  expected: |
	#foo {
	  value:
	    x
	}

- name:		comment3
  desc:		complexed comment
  input: |
	/* region comment /* */
	#foo { /* region
	     comment */
	  logic: {
	     // line comment
	     _elem /* region comment */;
	  } // line comment
	}
  expected: |
	#foo {
	  logic: {
	    _elem
	  }
	}


### ----------------------------------------

###
- name:		syntaxerr_ruleset1
  input: |
	#foo (
	  value: x;
	)
  exception:	kwartz.SyntaxException
  errormsg:	"1:6: '{' expected."


- name:		syntaxerr_ruleset2
  input: |
	#foo {
	  value: x;
	  logic: {
	    _cont;
	  }
  exception:	kwartz.SyntaxException
  errormsg:	"1:6: '{' is not closed."


###
- name:		syntaxerr_selector1
  input: |
	#foo, {
	  value: x;
	  logic: {
	    _cont;
	  }
  exception:	kwartz.SyntaxException
  errormsg:	"1:7: selector expected."


- name:		syntaxerr_selector2
  input: |
	.bar {
	  value: x;
	}
	foo .bar {
	  value: x;
	}
  exception:	kwartz.SyntaxException
  #errormsg:	"4:5: '{' expected."
  errormsg:	"4:5: compound selector is not available."


- name:		syntaxerr_selector3
  input: |
	.bar {
	  value: x;
	}
	#name, foo .bar, #baz {
	  value: x;
	}
  exception:	kwartz.SyntaxException
  #errormsg:	"4:12: '{' expected."
  errormsg:	"4:12: compound selector is not available."


- name:		syntaxerr_selector4
  input: |
	,foo {
	  value: x;
	}

  exception:	kwartz.SyntaxException
  errormsg:	"1:1: syntax error"


###
- name:		syntaxerr_stag1
  input: |
	#foo {
	  stag: x
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:10: ';' expected."


- name:		syntaxerr_cont1
  input: |
	#foo {
	  cont: x
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:10: ';' expected."


- name:		syntaxerr_etag1
  input: |
	#foo {
	  etag: x
	  logic: {
	  }
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:10: ';' expected."


- name:		syntaxerr_elem1
  input: |
	#foo {
	  elem: x
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:10: ';' expected."


###
- name:		syntaxerr_value1
  input: |
	#foo {
	  value: x
	  attr: 'class' klass; 
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:11: ';' expected."


- name:		syntaxerr_value2
  input: |
	#foo {
	  value: x[1,];
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:13: expression syntax error."


###
- name:		syntaxerr_attrs1
  input: |
	#foo {
	  value: x;
	  attrs: 'class' klass 
	}
  exception:	kwartz.SyntaxException
  errormsg:	"3:23: ';' expected."


- name:		syntaxerr_attrs2
  input: |
	#foo {
	  value: x;
	  attrs: class=klass; 
	}
  exception:	kwartz.SyntaxException
  errormsg:	"3:10: attribute name expected."


- name:		syntaxerr_attrs3
  input: |
	#foo {
	  value: x;
	  attrs: "class" klass(x,); 
	}
  exception:	kwartz.SyntaxException
  errormsg:	"3:26: expression syntax error."


- name:		syntaxerr_attrs4
  input: |
	#foo {
	  attr: 'class' klass; 
	  value: x;
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:3: 'attr' may be typo of 'attrs'."


###
- name:		syntaxerr_append1
  input: |
	#foo {
	  append: flag ? ' checked="checked"' : ''
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:43: ';' expected."


- name:		syntaxerr_append2
  input: |
	#foo {
	  append: flag ? " checked="checked\"" : '';
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:29: expression syntax error."


###
- name:		syntaxerr_remove1
  input: |
	#foo {
	  remove:  'foo', "bar"
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:24: ';' expected."


- name:		syntaxerr_remove2
  input: |
	#foo {
	  append: 'foo', "bar",
	}
  exception:	kwartz.SyntaxException
  errormsg:	"3:1: expression syntax error."


###
- name:		syntaxerr_logic1
  input: |
	#foo {
	  logic: {

  exception:	kwartz.SyntaxException
  #errormsg:	"2:10: '{' is not closed."
  errormsg:	"1:6: '{' is not closed."
  

- name:		syntaxerr_logic2
  input: |
	#foo {
	  logic: val;
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:10: '{' expected."
  

- name:		syntaxerr_before1
  input: |
	#foo {
	  before: {

  exception:	kwartz.SyntaxException
  #errormsg:	"2:11: '{' is not closed."
  errormsg:	"1:6: '{' is not closed."
  

- name:		syntaxerr_before2
  input: |
	#foo {
	  before: val;
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:11: '{' expected."
  

- name:		syntaxerr_after1
  input: |
	#foo {
	  after: {

  exception:	kwartz.SyntaxException
  #errormsg:	"2:10: '{' is not closed."
  errormsg:	"1:6: '{' is not closed."


- name:		syntaxerr_after2
  input: |
	#foo {
	  after: val;
	}
  exception:	kwartz.SyntaxException
  errormsg:	"2:10: '{' expected."
  


###
- name:		syntaxerr_command1
  input: |
	@import 'foo.plogic'
	#foo {
	  value: x;
	}
  exception:	kwartz.SyntaxException
  errormsg:	"1:21: ';' expected."


- name:		syntaxerr_command2
  input: |
	@import foo.plogic;
	#foo {
	  value: x;
	}
  exception:	kwartz.SyntaxException
  errormsg:	"1:9: syntax error"


- name:		syntaxerr_command3
  input: |
	@inport "foo.plogic";
	#foo {
	  value: x;
	}
  exception:	kwartz.SyntaxException
  errormsg:	"1:1: '@inport': unknown command."




### ----------------------------------------

###
- name:		rcurly1
  desc:		closing curly bracket check of ruleset
  input: |
	#foo {
	}
	#bar {
	  logic: {
	    if (x > 0) {
	      print(x);
	    }
	  } 
	  }
	}
  exception*:
    ruby:	Kwartz::SyntaxError
    java:	kwartz.SyntaxException
  errormsg*:
    ruby:	"9:3: '}': column of closing curly bracket is not matched with of selector '#bar' starting at line 3, column 1."
    java:	"9:3: '}': column of closing curly bracket is not matched with of selector '#bar' starting at line 3, column 1."


- name:		rcurly2
  desc:		closing curly bracket check of logic
  input: |
	#foo {
	}
	#bar {
	  logic: {
	    if (x > 0) {
	        print(x);
	      }
	    }
	  }
	}
  exception*:
    ruby:	Kwartz::SyntaxError
    java:	kwartz.SyntaxException
  errormsg*:
    ruby:   	"8:5: '}': column of closing curly bracket is not matched with of property 'logic' starting at line 4, column 3."
    java:   	"8:5: '}': column of closing curly bracket is not matched with of property 'logic' starting at line 4, column 3."


- name:		rcurly3
  desc:		one-liner is OK
  input: |
  	#foo { value: x; }
  	#bar {
  	  logic: { _elem; }
  	}
	#baz { logic: { print(x); } }
  expected: |
	#foo {
	  value:
	    x
	}
	#bar {
	  logic: {
	    _elem
	  }
	}
	#baz {
	  logic: {
	    :PRINT
	      x
	  }
	}

 