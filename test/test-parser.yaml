---
- name:  scanner1_css
  parser: CssStyleParser
  input: |
    /* comment */
    #list {
      value
      attrs
      append
      logic {
      }
    }
  expected: |
    2:2: token=35, value="#"
    2:6: token=:ident, value="list"
    2:8: token=:"{", value="{"
    3:8: token=:value, value="value"
    4:8: token=:attrs, value="attrs"
    5:9: token=:append, value="append"
    6:8: token=:logic, value="logic"
    6:10: token=:"{", value="{"
    7:4: token=:"}", value="}"
    8:2: token=:"}", value="}"

- name:  scanner1_ruby
  parser: RubyStyleParser
  input: |
    # comment
    element "list" {
      value
      attrs
      append
      logic {
      }
    }
  expected: |
    2:8: token=:element, value="element"
    2:15: token=:string, value="list"
    2:17: token=:"{", value="{"
    3:8: token=:value, value="value"
    4:8: token=:attrs, value="attrs"
    5:9: token=:append, value="append"
    6:8: token=:logic, value="logic"
    6:10: token=:"{", value="{"
    7:4: token=:"}", value="}"
    8:2: token=:"}", value="}"

---
- name:  parse_elem1_css
  parser: CssStyleParser
  input: |
    #list {
    }
  expected: &elem1|
    - name: "list"

- name:  parse_elem1_ruby
  parser: RubyStyleParser
  input: |
    element "list" {
    }
  expected: *elem1

---
- name:  parse_value_part1_css
  parser: CssStyleParser
  desc:  value part
  input: |
    #list {
      value:  @user['name'];
    }
  expected: &value1|
    - name: "list"
      cont: "@user['name']"

- name:  parse_value_part1_ruby
  parser: RubyStyleParser
  desc:  value part
  input: |
    element "list" {
      value @user['name']
    }
  expected: *value1

---
- name:  parse_attrs_part1_css
  parser: CssStyleParser
  input: |
    #list {
      attrs:  "class" @class,
              'color' @prop[:color];
    }
  expected: &attrs1|
    - name: "list"
      attrs:
        - name:  "class"
          value: "@class"
        - name:  "color"
          value: "@prop[:color]"

- name:  parse_attrs_part1_ruby
  parser: RubyStyleParser
  input: |
    element "list" {
      attrs  "class"=>@class, 'color' => @prop[:color]
    }
  expected: *attrs1

---
- name:  parse_append_part1_css
  parser: CssStyleParser
  input: |
    #list1 {
      append:  @name==item['name'] ? " checked='checked'" : '',
               chk(@name);
    }
    #list2 {
      append:  aaa, bbb,ccc;
    }
  expected: &append1|
    - name: "list1"
      append:
        - "@name==item['name'] ? \" checked='checked'\" : ''"
        - "chk(@name)"
    - name: "list2"
      append:
        - "aaa, bbb,ccc"

- name:  parse_append_part1_ruby
  parser: RubyStyleParser
  input: |
    element "list1" {
      append  @name==item['name'] ? " checked='checked'" : '', chk(@name)
    }
    element "list2" {
      append aaa, bbb,ccc
    }
  expected: |
    - name: "list1"
      append:
        - "@name==item['name'] ? \" checked='checked'\" : ''"
        - "chk(@name)"
    - name: "list2"
      append:
        - "aaa"
	- "bbb,ccc"

---
- name:  parse_remove_part1_css
  parser: CssStyleParser
  input: |
    #list {
      remove: "foo", "bar", 'baz';
    }
  expected: &remove1|
    - name: "list"
      remove:
        - "foo"
        - "bar"
        - "baz"

- name:  parse_remove_part1_ruby
  parser: RubyStyleParser
  input: |
    element "list" {
      remove "foo", "bar", 'baz'
    }
  expected: *remove1

---
- name:  parse_tagname_part1_css
  parser: CssStyleParser
  input: |
    #list {
      tagname:   'html:html';
    }
  expected: &tagname1|
    - name: "list"
      tagname: "html:html"

- name:  parse_tagname_part1_ruby
  parser: RubyStyleParser
  input: |
    element "list" {
      tagname   'html:html'
    }
  expected: *tagname1

---
- name:  parse_logic_part1_css
  parser: CssStyleParser
  input: |
    #list {
      logic: {
        @list.each { |item|
          _stag
          _cont
          _etag
        }
      }
    }
  expected: &logic1|
    - name: "list"
      logic:
        - "    @list.each { |item|"
        - _stag
        - _cont
        - _etag
        - "    }"

- name:  parse_logic_part1_ruby
  parser: RubyStyleParser
  input: |
    element "list" {
      logic {
        @list.each { |item|
          _stag
          _cont
          _etag
        }
      }
    }
  expected: *logic1

---
- name:  parse_logic_part2_css
  parser: CssStyleParser
  input: |
    #list {
      logic: {
        @list.each_with_index { |item, i|
          if i % 2 == 0
            _element("foo")
          else
            _content('foo')
          end
        }
      }
    }
  expected: &logic2|
    - name: "list"
      logic:
        - "    @list.each_with_index { |item, i|"
        - "      if i % 2 == 0"
        - _element("foo")
        - "      else"
        - _content("foo")
        - "      end"
        - "    }"

- name:  parse_logic_part2_ruby
  parser: RubyStyleParser
  input: |
    element "list" {
      logic {
        @list.each_with_index { |item, i|
          if i % 2 == 0
            _element("foo")
          else
            _content('foo')
          end
        }
      }
    }
  expected: *logic2

---
- name:   parse_import_command1_css
  parser: CssStyleParser
  input: |
      @import 'common.plogic';
      #item {
        value: item;
      }
  expected: |
      - name: "page_link"
        cont: "page.label"
	attrs:
	  - name:  "href"
	    value: "page.url"
	logic:
	  - "    if page"
	  - _elem
	  - "    end"
      - name: "item"
        cont: "item"
  setup: |
      common_plogic = <<END
      #page_link {
        value: page.label;
	attrs: 'href' page.url;
        logic: {
	  if page
	    _elem
	  end
	}
      }
      END
      File.open('common.plogic', 'w') { |f| f.write(common_plogic) }
  teardown: |
      filename = 'common.plogic'
      File.unlink filename if test(?f, filename)

---
- name:  parse_document
  parser: CssStyleParser
  input: |
      #DOCUMENT {
        local:  i, item, title, list;
	global: _context;
        begin: {
	  title = _context[:title]
	  list = _context[:list]
	}
	end: {
	  print "*** debug:\n"
	  _context.each do |key, value|
	     print "*** key=#{key}, value=#{value.inspect}"
	  end
	}
      }
  expected: |
      - name: "DOCUMENT"
        global:
          - _context
        local:
          - i
          - item
          - title
          - list
        begin:
          - "    title = _context[:title]"
          - "    list = _context[:list]"
        end:
          - [ <%="*** debug:\n"%>]
          - "    _context.each do |key, value|"
          - [ <%="*** key=#{key}, value=#{value.inspect}"%>]
          - "    end"


---
- name:  parse_element_all1_css
  parser: CssStyleParser
  input: |
    #list {
      value:   item.name;
      attrs:   'title' item.desc,
               'class' klass;
      append:  item==current_item ? ' checked="checked"' : '';
      logic:  {
        @list.each_with_index { |item, i|
          klass = i % 2 == 0 ? 'even' : 'odd'
          _stag     # start tag
          _cont     # content
          _etag     # end tag
        }
      }
    }
  expected: &all1|
    - name: "list"
      cont: "item.name"
      attrs:
        - name:  "class"
          value: "klass"
        - name:  "title"
          value: "item.desc"
      append:
        - "item==current_item ? ' checked=\"checked\"' : ''"
      logic:
        - "    @list.each_with_index { |item, i|"
        - "      klass = i % 2 == 0 ? 'even' : 'odd'"
        - _stag
        - _cont
        - _etag
        - "    }"

- name:  parse_element_all1_ruby
  parser: RubyStyleParser
  input: |
    element "list" {
      value   item.name
      attrs   'title'=>item.desc, 'class'=>klass
      append  item==current_item ? ' checked="checked"' : ''
      logic  {
        @list.each_with_index { |item, i|
          klass = i % 2 == 0 ? 'even' : 'odd'
          _stag     # start tag
          _cont     # content
          _etag     # end tag
        }
      }
    }
  expected: *all1

