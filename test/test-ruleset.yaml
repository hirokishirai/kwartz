###
- name:   elem
  title:  elem, Elem, ELEM
  desc: |
        {{,elem:,}}, {{,Elem:,}}, and {{,ELEM:,}} properties replaces the element
        with expression value.

        {{,Elem:,}} always escape expression value while {{,ELEM:,}} never escape it.
        {{,elem:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <p id="mark:name1">aaa</p>
        <p id="mark:name2">bbb</p>
        <p id="mark:name3">ccc</p>

  plogic*:
    eruby: |
        #name1 {
          {{*elem:*}} user[:name];
        }
        #name2 {
          {{*Elem:*}} user[:name];
        }
        #name3 {
          {{*ELEM:*}} user[:name];
        }
    php: |
        #name1 {
          {{*elem:*}} $user['name'];
        }
        #name2 {
          {{*Elem:*}} $user['name'];
        }
        #name3 {
          {{*ELEM:*}} $user['name'];
        }
    eperl: |
        #name1 {
          {{*elem:*}} $user{'name'};
        }
        #name2 {
          {{*Elem:*}} $user{'name'};
        }
        #name3 {
          {{*ELEM:*}} $user{'name'};
        }
    jstl: |
        #name1 {
          {{*elem:*}} user.name;
        }
        #name2 {
          {{*Elem:*}} user.name;
        }
        #name3 {
          {{*ELEM:*}} user.name;
        }

  expected*:
    eruby: |
        {{*<%= user[:name] %>*}}
        {{*<%=h user[:name] %>*}}
        {{*<%= user[:name] %>*}}
    php: |
        {{*<?php echo $user['name']; ?>*}}
        {{*<?php echo htmlspecialchars($user['name']); ?>*}}
        {{*<?php echo $user['name']; ?>*}}
    eperl: |
        {{*<?= $user{'name'} !>*}}
        {{*<?= encode_entities($user{'name'}) !>*}}
        {{*<?= $user{'name'} !>*}}
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        {{*${user.name}*}}
        {{*${user.name}*}}
        {{*<c:out value="${user.name}" escapeXml="false"/>*}}

###
- name:   cont
  title:  cont, Cont, CONT
  desc: |
        {{,cont:,}}, {{,Cont:,}}, and {{,CONT:,}} properties replaces the element
        with expression value.

        {{,Cont:,}} always escape expression value while {{,CONT:,}} never escape it.
        {{,cont:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <p id="mark:name1">aaa</p>
        <p id="mark:name2">bbb</p>
        <p id="mark:name3">ccc</p>

  plogic*:
    eruby: |
        #name1 {
          {{*cont:*}} user[:name];
        }
        #name2 {
          {{*Cont:*}} user[:name];
        }
        #name3 {
          {{*CONT:*}} user[:name];
        }
    php: |
        #name1 {
          {{*cont:*}} $user['name'];
        }
        #name2 {
          {{*Cont:*}} $user['name'];
        }
        #name3 {
          {{*CONT:*}} $user['name'];
        }
    eperl: |
        #name1 {
          {{*cont:*}} $user{'name'};
        }
        #name2 {
          {{*Cont:*}} $user{'name'};
        }
        #name3 {
          {{*CONT:*}} $user{'name'};
        }
    jstl: |
        #name1 {
          {{*cont:*}} user.name;
        }
        #name2 {
          {{*Cont:*}} user.name;
        }
        #name3 {
          {{*CONT:*}} user.name;
        }

  expected*:
    eruby: |
        <p>{{*<%= user[:name] %>*}}</p>
        <p>{{*<%=h user[:name] %>*}}</p>
        <p>{{*<%= user[:name] %>*}}</p>
    php: |
        <p>{{*<?php echo $user['name']; ?>*}}</p>
        <p>{{*<?php echo htmlspecialchars($user['name']); ?>*}}</p>
        <p>{{*<?php echo $user['name']; ?>*}}</p>
    eperl: |
        <p>{{*<?= $user{'name'} !>*}}</p>
        <p>{{*<?= encode_entities($user{'name'}) !>*}}</p>
        <p>{{*<?= $user{'name'} !>*}}</p>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p>{{*${user.name}*}}</p>
        <p>{{*${user.name}*}}</p>
        <p>{{*<c:out value="${user.name}" escapeXml="false"/>*}}</p>

###
- name:   value
  title:  value, Value, VALUE
  desc: |
        {{,value:,}}, {{,Value:,}}, and {{,VALUE:,}} properties replaces the element
        with expression value.
	These are the same as {{,cont:,}}, {{,Cont:,}}, and {{,CONT:,}} properties
	respectively.

  pdata: |
        <p id="mark:name1">aaa</p>
        <p id="mark:name2">bbb</p>
        <p id="mark:name3">ccc</p>

  plogic*:
    eruby: |
        #name1 {
          {{*value:*}} user[:name];
        }
        #name2 {
          {{*Value:*}} user[:name];
        }
        #name3 {
          {{*VALUE:*}} user[:name];
        }
    php: |
        #name1 {
          {{*value:*}} $user['name'];
        }
        #name2 {
          {{*Value:*}} $user['name'];
        }
        #name3 {
          {{*VALUE:*}} $user['name'];
        }
    eperl: |
        #name1 {
          {{*value:*}} $user{'name'};
        }
        #name2 {
          {{*Value:*}} $user{'name'};
        }
        #name3 {
          {{*VALUE:*}} $user{'name'};
        }
    jstl: |
        #name1 {
          {{*value:*}} user.name;
        }
        #name2 {
          {{*Value:*}} user.name;
        }
        #name3 {
          {{*VALUE:*}} user.name;
        }

  expected*:
    eruby: |
        <p>{{*<%= user[:name] %>*}}</p>
        <p>{{*<%=h user[:name] %>*}}</p>
        <p>{{*<%= user[:name] %>*}}</p>
    php: |
        <p>{{*<?php echo $user['name']; ?>*}}</p>
        <p>{{*<?php echo htmlspecialchars($user['name']); ?>*}}</p>
        <p>{{*<?php echo $user['name']; ?>*}}</p>
    eperl: |
        <p>{{*<?= $user{'name'} !>*}}</p>
        <p>{{*<?= encode_entities($user{'name'}) !>*}}</p>
        <p>{{*<?= $user{'name'} !>*}}</p>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p>{{*${user.name}*}}</p>
        <p>{{*${user.name}*}}</p>
        <p>{{*<c:out value="${user.name}" escapeXml="false"/>*}}</p>

###
- name:   stag
  title:  stag, Stag, STAG
  desc: |
        {{,stage:,}}, {{,Stag:,}}, and {{,STAG:,}} properties replaces the start-tag
        with expression value.

        {{,Stag:,}} always escape expression value while {{,STAG:,}} never escape it.
        {{,stag:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
	<a href="#" id="mark:link1"><img src="button1.png"></a>
	<a href="#" id="mark:link2"><img src="button2.png"></a>
	<a href="#" id="mark:link3"><img src="button3.png"></a>

  plogic*:
    eruby: |
        #link1 {
          {{*stag:*}} start_link_tag :action=>'list';
        }
        #link2 {
          {{*Stag:*}} start_link_tag :action=>'list';
        }
        #link3 {
          {{*STAG:*}} start_link_tag :action=>'list';
        }
    php: |
        #link1 {
          {{*stag:*}} start_link_tag('member/list');
        }
        #link2 {
          {{*Stag:*}} start_link_tag('member/list');
        }
        #link3 {
          {{*STAG:*}} start_link_tag('member/list');
        }
    eperl: |
        #link1 {
          {{*stag:*}} start_link_tag('member/list');
        }
        #link2 {
          {{*Stag:*}} start_link_tag('member/list');
        }
        #link3 {
          {{*STAG:*}} start_link_tag('member/list');
        }
    jstl: |
        #link1 {
          {{*stag:*}} fn:start_link_tag('member', 'list');
        }
        #link2 {
          {{*Stag:*}} fn:start_link_tag('member', 'list');
        }
        #link3 {
          {{*STAG:*}} fn:start_link_tag('member', 'list');
        }

  expected*:
    eruby: |
	{{*<%= start_link_tag :action=>'list' %>*}}<img src="button1.png"></a>
	{{*<%=h start_link_tag :action=>'list' %>*}}<img src="button2.png"></a>
	{{*<%= start_link_tag :action=>'list' %>*}}<img src="button3.png"></a>
    php: |
	{{*<?php echo start_link_tag('member/list'); ?>*}}<img src="button1.png"></a>
	{{*<?php echo htmlspecialchars(start_link_tag('member/list')); ?>*}}<img src="button2.png"></a>
	{{*<?php echo start_link_tag('member/list'); ?>*}}<img src="button3.png"></a>
    eperl: |
	{{*<?= start_link_tag('member/list') !>*}}<img src="button1.png"></a>
	{{*<?= encode_entities(start_link_tag('member/list')) !>*}}<img src="button2.png"></a>
	{{*<?= start_link_tag('member/list') !>*}}<img src="button3.png"></a>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	{{*${fn:start_link_tag('member', 'list')}*}}<img src="button1.png"></a>
	{{*${fn:start_link_tag('member', 'list')}*}}<img src="button2.png"></a>
	{{*<c:out value="${fn:start_link_tag('member', 'list')}" escapeXml="false"/>*}}<img src="button3.png"></a>

###
- name:   etag
  title:  etag, Etag, ETAG
  desc: |
        {{,stage:,}}, {{,Etag:,}}, and {{,ETAG:,}} properties replaces the end-tag
        with expression value.

        {{,Etag:,}} always escape expression value while {{,ETAG:,}} never escape it.
        {{,etag:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
	<li id="mark:item1">foo</li>
	<li id="mark:item2">bar</li>
	<li id="mark:item3">baz</li>

  plogic*:
    eruby: |
        #item1 {
          {{*etag:*}} is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} is_xml ? '</li>' : '';
        }
    php: |
        #item1 {
          {{*etag:*}} $is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} $is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} $is_xml ? '</li>' : '';
        }
    eperl: |
        #item1 {
          {{*etag:*}} $is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} $is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} $is_xml ? '</li>' : '';
        }
    jstl: |
        #item1 {
          {{*etag:*}} is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} is_xml ? '</li>' : '';
        }

  expected*:
    eruby: |
	<li>foo{{*<%= is_xml ? '</li>' : '' %>*}}
	<li>bar{{*<%=h is_xml ? '</li>' : '' %>*}}
	<li>baz{{*<%= is_xml ? '</li>' : '' %>*}}
    php: |
	<li>foo{{*<?php echo $is_xml ? '</li>' : ''; ?>*}}
	<li>bar{{*<?php echo htmlspecialchars($is_xml ? '</li>' : ''); ?>*}}
	<li>baz{{*<?php echo $is_xml ? '</li>' : ''; ?>*}}
    eperl: |
	<li>foo{{*<?= $is_xml ? '</li>' : '' !>*}}
	<li>bar{{*<?= encode_entities($is_xml ? '</li>' : '') !>*}}
	<li>baz{{*<?= $is_xml ? '</li>' : '' !>*}}
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	<li>foo{{*${is_xml ? '</li>' : ''}*}}
	<li>bar{{*${is_xml ? '</li>' : ''}*}}
	<li>baz{{*<c:out value="${is_xml ? '</li>' : ''}" escapeXml="false"/>*}}

###
- name:   attrs
  title:  attrs, Attrs, ATTRS
  desc: |
        {{,attrs:,}}, {{,Attrs:,}}, {{,ATTRS:,}}, property replaces or adds attributes.

        {{,Attrs:,}} always escape expression value while {{,ATTRS:,}} never escape it.
        {{,attrs:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <p id="mark:item" class="para">
          AAA
        </p>

  plogic*:
    eruby: |
        #item {
          {{*attrs:*}} 'class' klass,
                 'style' style;
        }
    php: |
        #item {
          {{*attrs:*}} 'class' $class,
                 'style' $style;
        }
    jstl: |
        #item {
          {{*attrs:*}} 'class' klass,
                 'style' style;
        }
    eperl: |
        #item {
          {{*attrs:*}} 'class' $class,
                 'style' $style;
        }

  expected*:
    eruby: |
        <p {{*class="<%= klass %>"*}} {{*style="<%= style %>"*}}>
          AAA
        </p>
    php: |
        <p {{*class="<?php echo $class; ?>"*}} {{*style="<?php echo $style; ?>"*}}>
          AAA
        </p>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p {{*class="${klass}"*}} {{*style="${style}"*}}>
          AAA
        </p>
    eperl: |
        <p {{*class="<?= $class !>"*}} {{*style="<?= $style !>"*}}>
          AAA
        </p>

  postscript: |
        Notice that the follwing will be parse error
        because Kwartz parses {{,attrs:,}} property with pattern matching.

        .--------------------
        #foo {
          attrs: 'class' klass, 'style' style;
        }
        .--------------------

###
- name:   append
  title:  append, Append, APPEND
  desc: |
        {{,append:,}}, {{,Append:,}}, {{,APPEND:,}} directive appends
        expressions to the start tag.

        {{,Append:,}} always escape expression value while {{,APPEND:,}} never escape it.
        {{,append:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <input type="checkboxk" id="mark:remember" value="y">Remeber me

  plogic*:
    eruby: |
        #remember {
          {{*append:*}} flag ? ' checked' : '';
        }
    php: |
        #remember {
          {{*append:*}} $flag ? ' checked' : '';
        }
    jstl: |
        #remember {
          {{*append:*}} flag ? ' checked' : '';
        }
    eperl: |
        #remember {
          {{*append:*}} $flag ? ' checked' : '';
        }

  expected*:
    eruby: |
        <input type="checkboxk" value="y"{{*<%= flag ? ' checked' : '' %>*}}>Remeber me
    php: |
        <input type="checkboxk" value="y"{{*<?php echo $flag ? ' checked' : ''; ?>*}}>Remeber me
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <input type="checkboxk" value="y"{{*${flag ? ' checked' : ''}*}}>Remeber me
    eperl: |
        <input type="checkboxk" value="y"{{*<?= $flag ? ' checked' : '' !>*}}>Remeber me

  postscript: |
        The following is an example to append several expressions.

        .--------------------
        #remember {
          append:  expr1,
                   expr2,
                   expr3;
        }
        .--------------------

        Notice that the following will be parse error.

        .--------------------
        #remember {
          append:  expr1, expr2, expr3;
        }
        .--------------------

###
- name:   remove
  title:  remove
  common:  yes
  desc: |
        {{,remove:,}} property removes attributes.

  pdata: |
        <p id="foo" class="paragraph" style="color: red">
         AAA
        </p>

  plogic*:
    eruby: &remove_pdata |
        #foo {
          {{*remove:*}} 'id', 'style';
        }
    php: *remove_pdata
    jstl: *remove_pdata
    eperl: *remove_pdata

  expected*:
    eruby: &remove_expected |
        <p class="paragraph">
         AAA
        </p>
    php:   *remove_expected
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p class="paragraph">
         AAA
        </p>
    eperl: *remove_expected

###
- name:   logic
  title:  logic
  desc: |
        {{,logic:,}} property represents the presentation logic body of the element.
        In the {{,logic:,}} property, the folllowings are available.
        .[ {{,_elem,}} ]
		represents the element
        .[ {{,_stag,}} ]
		represents start-tag of the element
        .[ {{,_cont,}} ]
		represents content of the element
        .[ {{,_stag,}} ]
		represents end-tag of the element
        .[ {{,_element({{/name/}}),}} ]
		represents the other element marked as {{/name/}}.
        .[ {{,_content({{/name/}}),}} ]
		represents the content of other element marked as {{/name/}}.

        In the {{,logic:,}} property, it is able to write statements in target language
        (Ruby, PHP, Java, Perl, and so on).

  pdata: |
        <ul>
          <li id="mark:items">AAA</li>
        </ul>

  plogic*:
    eruby: |
        #items {
          value: item;
          {{*logic:*}} {
            @list.each do |item|
              {{*_stag*}}
              {{*_cont*}}
              {{*_etag*}}
            end
          }
        }
    php: |
        #items {
          value: $item;
          {{*logic:*}} {
            foreach ($list as $item) {
              {{*_stag();*}}
              {{*_cont();*}}
              {{*_etag();*}}
            }
          }
        }
    jstl: |
        #items {
          value: item;
          {{*logic:*}} {
            <c:forEach var="item" items="${list}">
              {{*_stag();*}}
              {{*_cont();*}}
              {{*_etag();*}}
            </c:forEach>
          }
        }
    eperl: |
        #items {
          value: $item;
          {{*logic:*}} {
            foreach ($item in @list) {
              {{*_stag();*}}
              {{*_cont();*}}
              {{*_etag();*}}
            }
          }
        }

  expected*:
    eruby: |
        <ul>
        {{*<%     @list.each do |item| %>*}}
          <li><%= item %></li>
        {{*<%     end %>*}}
        </ul>
    php: |
        <ul>
        {{*<?php     foreach ($list as $item) { ?>*}}
          <li><?php echo $item; ?></li>
        {{*<?php     } ?>*}}
        </ul>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <ul>
            {{*<c:forEach var="item" items="${list}">*}}
          <li>${item}</li>
            {{*</c:forEach>*}}
        </ul>
    eperl: |
        <ul>
        {{*<?     foreach ($item in @list) { !>*}}
          <li><?= $item !></li>
        {{*<?     } !>*}}
        </ul>

###
- name:   before
  title:  before, after
  desc: |
        {{,before:,}} and {{,after:,}} property represents the prework and postwork
	of each element's presentation logics.
	These properties enables to share or reuse presentation logics.
	.#These properties takes target code block and are available only with
	.#'#DOCUMENT' selector.

  pdata: |
        <!-- Groups -->
	<ul id="mark:groups">
	  <li class="item"></li>
	</ul>
	
        <!-- Members -->
	<ol id="mark:members">
	  <li class="item"></li>
	</ol>
	
  plogic*:
    eruby: |
        #groups {
	  {{*before:*}} {
	    {{*list = @groups*}}
	  }
	  {{*after:*}} {
	    {{*group_count = count*}}
	  }
	}
        #members {
	  {{*before:*}} {
	    {{*list = @members*}}
	  }
	  {{*after:*}} {
	    {{*member_count = count*}}
	  }
	}
	
	/* common 'logic:' part */
	#groups, #members {
	  logic: {
	    count = 0
	    _stag
	    for item in list
	      unless item.obsolete?
	        count += 1
	        _cont
	      end
	    end
	    _etag
	  }
	}
	
	.item {
	  value: item.name;
	}

    php: |
        #groups {
	  {{*before:*}} {
	    {{*$list = $groups;*}}
	  }
	  {{*after:*}} {
	    {{*$group_count = $count;*}}
	  }
	}
        #members {
	  {{*before:*}} {
	    {{*$list = $members;*}}
	  }
	  {{*after:*}} {
	    {{*$member_count = $count;*}}
	  }
	}
	
	/* common 'logic:' part */
	#groups, #members {
	  logic: {
	    $count = 0;
	    _stag();
	    foreach ($list as $item) {
	      if (! $item->obsolete) {
	        $count++;
	        _cont();
	      }
	    }
	    _etag();
	  }
	}
	
	.item {
	  value: $item->name;
	}

    jstl: |
        #groups {
	  {{*before:*}} {
	    {{*<c:set var="list" value="${groups}" />*}}
	  }
	  {{*after:*}} {
	    {{*<c:set var="group_count" value="${count}" />*}}
	  }
	}
        #members {
	  {{*before:*}} {
	    {{*<c:set var="list" value="${members}" />*}}
	  }
	  {{*after:*}} {
	    {{*<c:set var="members_count" value="${count}" />*}}
	  }
	}
	
	/* common 'logic:' part */
	#groups, #members {
	  logic: {
	    <c:set var="count" value="${0}" />
	    _stag()
	    <c:forEach var="item" items="${list}" />
	      <c:if test="${not item.obsolete}" />
	        <c:set var="count" value="${count+1}" />
	        _cont()
	      </c:if>
	    </c:forEach>
	    _etag()
	  }
	}
	
	.item {
	  value: item.name;
	}

    eperl: |
        #groups {
	  {{*before:*}} {
	    {{*@list = @groups;*}}
	  }
	  {{*after:*}} {
	    {{*$group_count = $count;*}}
	  }
	}
        #members {
	  {{*before:*}} {
	    {{*@list = @members;*}}
	  }
	  {{*after:*}} {
	    {{*$member_count = $count;*}}
	  }
	}
	
	/* common 'logic:' part */
	#groups, #members {
	  logic: {
	    $count = 0;
	    _stag();
	    foreach $item (@list) {
	      if (! $item['obsolete']) {
	        $count++;
	        _cont();
	      }
	    }
	    _etag();
	  }
	}
	
	.item {
	  value: $item['name'];
	}

  expected*:
    eruby: |
        <!-- Groups -->
	<%     {{*list = @groups*}} %>
	<%     count = 0 %>
	<ul>
	<%     for item in list %>
	<%       unless item.obsolete? %>
	<%         count += 1 %>
	  <li class="item"><%= item.name %></li>
	<%       end %>
	<%     end %>
	</ul>
	<%     {{*group_count = count*}} %>
	
        <!-- Members -->
	<%     {{*list = @members*}} %>
	<%     count = 0 %>
	<ol>
	<%     for item in list %>
	<%       unless item.obsolete? %>
	<%         count += 1 %>
	  <li class="item"><%= item.name %></li>
	<%       end %>
	<%     end %>
	</ol>
	<%     {{*member_count = count*}} %>

    php: |
        <!-- Groups -->
	<?php     {{*$list = $groups;*}} ?>
	<?php     $count = 0; ?>
	<ul>
	<?php     foreach ($list as $item) { ?>
	<?php       if (! $item->obsolete) { ?>
	<?php         $count++; ?>
	  <li class="item"><?php echo $item->name; ?></li>
	<?php       } ?>
	<?php     } ?>
	</ul>
	<?php     {{*$group_count = $count;*}} ?>
	
        <!-- Members -->
	<?php     {{*$list = $members;*}} ?>
	<?php     $count = 0; ?>
	<ol>
	<?php     foreach ($list as $item) { ?>
	<?php       if (! $item->obsolete) { ?>
	<?php         $count++; ?>
	  <li class="item"><?php echo $item->name; ?></li>
	<?php       } ?>
	<?php     } ?>
	</ol>
	<?php     {{*$member_count = $count;*}} ?>

    jstl: |
	<%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
	<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <!-- Groups -->
	    {{*<c:set var="list" value="${groups}" />*}}
	    <c:set var="count" value="${0}" />
	<ul>
	    <c:forEach var="item" items="${list}" />
	      <c:if test="${not item.obsolete}" />
	        <c:set var="count" value="${count+1}" />
	  <li class="item">${item.name}</li>
	      </c:if>
	    </c:forEach>
	</ul>
	    {{*<c:set var="group_count" value="${count}" />*}}
	
        <!-- Members -->
	    {{*<c:set var="list" value="${members}" />*}}
	    <c:set var="count" value="${0}" />
	<ol>
	    <c:forEach var="item" items="${list}" />
	      <c:if test="${not item.obsolete}" />
	        <c:set var="count" value="${count+1}" />
	  <li class="item">${item.name}</li>
	      </c:if>
	    </c:forEach>
	</ol>
	    {{*<c:set var="members_count" value="${count}" />*}}

    eperl: |
        <!-- Groups -->
	<?     {{*@list = @groups;*}} !>
	<?     $count = 0; !>
	<ul>
	<?     foreach $item (@list) { !>
	<?       if (! $item['obsolete']) { !>
	<?         $count++; !>
	  <li class="item"><?= $item['name'] !></li>
	<?       } !>
	<?     } !>
	</ul>
	<?     {{*$group_count = $count;*}} !>
	
        <!-- Members -->
	<?     {{*@list = @members;*}} !>
	<?     $count = 0; !>
	<ol>
	<?     foreach $item (@list) { !>
	<?       if (! $item['obsolete']) { !>
	<?         $count++; !>
	  <li class="item"><?= $item['name'] !></li>
	<?       } !>
	<?     } !>
	</ol>
	<?     {{*$member_count = $count;*}} !>


###
- name:   begin
  title:  begin, end
  desc: |
	{{,begin:,}} and {{,end:,}} properties are equal to {{,before:,}} and {{,after:,}}.
	{{*These are obsolete and leaved for compatibility*}}.
	
	{{,begin:,}} and {{,end:,}} were aimed to add prework and postwork of document,
	and restricted to be available only with '#DOCUMENT' selector.
	Currently {{,before:,}} and {{,after:,}} are available with '#DOCUMENT' selector,
	so you should use these properties instead of {{,begin:,}} and {{,end:,}}.
        .#{{,begin:,}} and {{,end:,}} property represents the prework and postwork
	.#of document respectively.
	.#These properties takes target code block and are available only with
	.#'#DOCUMENT' selector.

  pdata: |
        <p>Hello <span id="mark:username">world</span>!</p>
	<ul>
	 <li id="mark:menu">menu item</li>
	</ul>

  plogic*:
    eruby: |
        #DOCUMENT {
	  {{*begin:*}} {
	    username = @context[:username]
	    menulist = @context[:menulist]
	  }
	  {{*end:*}} {
	    print "<!-- document end -->\n"
	  }
	}
	#username {
	  value:  username;
	}
	#menu {
	  value: menu;
	  logic: {
	    for menu in menulist
	      _elem
	    end
	  }
	}
    php: |
        #DOCUMENT {
	  {{*begin:*}} {
	    $username = $context['username'];
	    $menulist = $context['menulist'];
	  }
	  {{*end:*}} {
	    print("<!-- document end -->\n");
	  }
	}
	#username {
	  value:  $username;
	}
	#menu {
	  value: $menu;
	  logic: {
	    foreach ($menulist as $menu) {
	      _elem();
	    }
	  }
	}
    jstl: |
        #DOCUMENT {
	  {{*begin:*}} {
	    <c:set var="username" value="${context.username}"/>
	    <c:set var="menulist" value="${context.menulist}"/>
	  }
	  {{*end:*}} {
	    <c:out value="<!-- document end -->\n"/>
	  }
	}
	#username {
	  value:  username;
	}
	#menu {
	  value:  menu;
	  logic: {
	    <c:forEach var="menu" items="${menulist}">
	      _elem();
	    </c:forEach>
	  }
	}
    eperl: |
        #DOCUMENT {
	  {{*begin:*}} {
	    $username = $context{'username'};
	    @menulist = $context{'menulist'};
	  }
	  {{*end:*}} {
	    print("<!-- document end -->\n");
	  }
	}
	#username {
	  value:  $username;
	}
	#menu {
	  value: $menu;
	  logic: {
	    foreach ($menu in @menulist) {
	      _elem();
	    }
	  }
	}

  expected*:
    eruby: |-
	{{*<%     username = @context[:username] %>*}}
	{{*<%     menulist = @context[:menulist] %>*}}
	<p>Hello <span><%= username %></span>!</p>
        <ul>
        <%     for menu in menulist %>
         <li><%= menu %></li>
        <%     end %>
        </ul>
	{{*<%= "<!-- document end -->\n" %>*}}
    php: |-
        {{*<?php     $username = $context['username']; ?>*}}
        {{*<?php     $menulist = $context['menulist']; ?>*}}
	<p>Hello <span><?php echo $username; ?></span>!</p>
        <ul>
        <?php     foreach ($menulist as $menu) { ?>
         <li><?php echo $menu; ?></li>
        <?php     } ?>
        </ul>
	{{*<?php echo "<!-- document end -->\n"; ?>*}}
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
            {{*<c:set var="username" value="${context.username}"/>*}}
            {{*<c:set var="menulist" value="${context.menulist}"/>*}}
	<p>Hello <span>${username}</span>!</p>
        <ul>
            <c:forEach var="menu" items="${menulist}">
         <li>${menu}</li>
            </c:forEach>
        </ul>
	    {{*<c:out value="<!-- document end -->\n"/>*}}
    eperl: |-
	{{*<?     $username = $context{'username'}; !>*}}
	{{*<?     @menulist = $context{'menulist'}; !>*}}
	<p>Hello <span><?= $username !></span>!</p>
        <ul>
        <?     foreach ($menu in @menulist) { !>
         <li><?= $menu !></li>
        <?     } !>
        </ul>
	{{*<?= "<!-- document end -->\n" !>*}}


###
- name:   attrvar
  title:  Attribute Variable
  desc:  |
	Attribute variable is a notation such as '$(attrname)' which represents attribute value.
	Attribute variable allows presentation logic to refer attribute value in presentation data.

  pdata: |
	<form action="create" {{*method="post"*}}>
	  Username: <input type="text" id="comment_username" {{*size="30"*}}><br>
	  Comment: <textarea id="comment_text" {{*rows="3"*}} {{*cols="50"*}}></textarea><br>
	  <input id="mark:submit" type="submit" {{*value="Send comment"*}}>
	</form>

  plogic*:
    eruby: |
	form {
	  stag:  start_form_tag :action=>'{{*$(action)*}}';
	}
	#comment_username {
	  elem:  text_field 'comment', 'username', :size=>{{*$(size)*}};
	}
	#comment_text {
	  elem:  text_area 'comment', 'text', :rows=>{{*$(rows)*}}, :cols=>{{*$(cols)*}};
	}
	#submit {
	  elem:  submit_tag '{{*$(value)*}}';
	}

    php: |
	form {
	  stag:  form_tag('comment/{{*$(action)*}}');
	}
	#comment_username {
	  elem:  text_field('comment', 'username', array('size'=>{{*$(size)*}}));
	}
	#comment_text {
	  elem:  text_area('comment', 'text', array('rows'=>{{*$(rows)*}}, 'cols'=>{{*$(cols)*}}));
	}
	#submit {
	  elem:  submit_tag('{{*$(value)*}}');
	}

    jstl: |
	form {
	  logic: {
	    <form:form action="{{*$(action)*}}.do">
	    _cont
	    </form:form>
	  }
	}
	#comment_username {
	  logic: {
	    <form:textfield name="username" size="{{*$(size)*}}"/>
	  }
	}
	#comment_text {
	  logic: {
	    <form:textarea name="text", rows="{{*$(rows)*}}" cols="{{*$(cols)*}}"/>
	  }
	}
	#submit {
	  logic: {
	    <form:submit value="{{*$(value)*}}"/>
	  }
	}

    eperl: |
	form {
	  stag:  &form_tag({'action'=>'{{*$(action)*}}'});
	}
	#comment_username {
	  elem:  &text_field('comment', 'username', {'size'=>{{*$(size)*}}});
	}
	#comment_text {
	  elem:  &text_area('comment', 'text', {'rows'=>{{*$(rows)*}}, 'cols'=>{{*$(cols)*}}});
	}
	#submit {
	  elem:  &submit_tag('{{*$(value)*}}');
	}

  expected*:

    eruby: |
	<%= start_form_tag :action=>'{{*create*}}' %>
	  Username: <%= text_field 'comment', 'username', :size=>{{*30*}} %><br>
	  Comment: <%= text_area 'comment', 'text', :rows=>{{*3*}}, :cols=>{{*50*}} %><br>
	  <%= submit_tag '{{*Send comment*}}' %>
	</form>

    php: |
	<?php echo form_tag('comment/{{*create*}}'); ?>
	  Username: <?php echo text_field('comment', 'username', array('size'=>{{*30*}})); ?><br>
	  Comment: <?php echo text_area('comment', 'text', array('rows'=>{{*3*}}, 'cols'=>{{*50*}})); ?><br>
	  <?php echo submit_tag('{{*Send comment*}}'); ?>
	</form>

    eperl: |
	<?= &form_tag({'action'=>'{{*create*}}'}) !>
	  Username: <?= &text_field('comment', 'username', {'size'=>{{*30*}}}) !><br>
	  Comment: <?= &text_area('comment', 'text', {'rows'=>{{*3*}}, 'cols'=>{{*50*}}}) !><br>
	  <?= &submit_tag('{{*Send comment*}}') !>
	</form>

    jstl: |
	<%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
	<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	    <form:form action="{{*create*}}.do">
	  Username:     <form:textfield name="username" size="{{*30*}}"/>
	<br>
	  Comment:     <form:textarea name="text", rows="{{*3*}}" cols="{{*50*}}"/>
	<br>
	    <form:submit value="{{*Send comment*}}"/>
	    </form:form>


###
- name:   attrvar2
  hide:   yes
  title:  Attribute Variable2
  pdata: |
	<h1 class="section">...title...</h1>

  plogic*:
    eruby: |
	h1 {
	  attrs:  'title' escape('$(class)');
	  value:  'class:$(class)';
	  append: flag ? ' klass="$(class)"' : '';
	}

    php: |
	h1 {
	  attrs:  'title' escape('$(class)');
	  value:  'class:$(class)';
	  append: flag ? ' klass="$(class)"' : '';
	}

    jstl: |
	h1 {
	  attrs:  'title' escape('$(class)');
	  value:  'class:$(class)';
	  append: flag ? ' klass="$(class)"' : '';
	}

    eperl: |
	h1 {
	  attrs:  'title' escape('$(class)');
	  value:  'class:$(class)';
	  append: flag ? ' klass="$(class)"' : '';
	}

  expected*:

    eruby: |
	<h1 class="section" title="<%= escape('section') %>"<%= flag ? ' klass="section"' : '' %>><%= 'class:section' %></h1>

    php: |
	<h1 class="section" title="<?php echo escape('section'); ?>"<?php echo flag ? ' klass="section"' : ''; ?>><?php echo 'class:section'; ?></h1>

    eperl: |
	<h1 class="section" title="<?= escape('section') !>"<?= flag ? ' klass="section"' : '' !>><?= 'class:section' !></h1>

    jstl: |
	<%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
	<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	<h1 class="section" title="${escape('section')}"${flag ? ' klass="section"' : ''}>class:section</h1>
#	<h1 class="section" title="${escape('section')}"${flag ? ' klass="section"' : ''}>${'class:section'}</h1>


