---
- name:   elem
  title:  elem, Elem, ELEM
  desc: |
        {{,elem:,}}, {{,Elem:,}}, and {{,ELEM:,}} properties replaces the element
        with expression value.

        {{,Elem:,}} always escape expression value while {{,ELEM:,}} never escape it.
        {{,elem:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <p id="mark:name1">aaa</p>
        <p id="mark:name2">bbb</p>
        <p id="mark:name3">ccc</p>

  plogic*:
    eruby: |
        #name1 {
          {{*elem:*}} user[:name];
        }
        #name2 {
          {{*Elem:*}} user[:name];
        }
        #name3 {
          {{*ELEM:*}} user[:name];
        }
    php: |
        #name1 {
          {{*elem:*}} $user['name'];
        }
        #name2 {
          {{*Elem:*}} $user['name'];
        }
        #name3 {
          {{*ELEM:*}} $user['name'];
        }
    eperl: |
        #name1 {
          {{*elem:*}} $user{'name'};
        }
        #name2 {
          {{*Elem:*}} $user{'name'};
        }
        #name3 {
          {{*ELEM:*}} $user{'name'};
        }
    jstl: |
        #name1 {
          {{*elem:*}} user.name;
        }
        #name2 {
          {{*Elem:*}} user.name;
        }
        #name3 {
          {{*ELEM:*}} user.name;
        }

  expected*:
    eruby: |
        {{*<%= user[:name] %>*}}
        {{*<%=h user[:name] %>*}}
        {{*<%= user[:name] %>*}}
    php: |
        {{*<?php echo $user['name']; ?>*}}
        {{*<?php echo htmlspecialchars($user['name']); ?>*}}
        {{*<?php echo $user['name']; ?>*}}
    eperl: |
        {{*<?= $user{'name'} !>*}}
        {{*<?= encode_entities($user{'name'}) !>*}}
        {{*<?= $user{'name'} !>*}}
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        {{*${user.name}*}}
        {{*${user.name}*}}
        {{*<c:out value="${user.name}" escapeXml="false"/>*}}

##
- name:   cont
  title:  cont, Cont, CONT
  desc: |
        {{,cont:,}}, {{,Cont:,}}, and {{,CONT:,}} properties replaces the element
        with expression value.

        {{,Cont:,}} always escape expression value while {{,CONT:,}} never escape it.
        {{,cont:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <p id="mark:name1">aaa</p>
        <p id="mark:name2">bbb</p>
        <p id="mark:name3">ccc</p>

  plogic*:
    eruby: |
        #name1 {
          {{*cont:*}} user[:name];
        }
        #name2 {
          {{*Cont:*}} user[:name];
        }
        #name3 {
          {{*CONT:*}} user[:name];
        }
    php: |
        #name1 {
          {{*cont:*}} $user['name'];
        }
        #name2 {
          {{*Cont:*}} $user['name'];
        }
        #name3 {
          {{*CONT:*}} $user['name'];
        }
    eperl: |
        #name1 {
          {{*cont:*}} $user{'name'};
        }
        #name2 {
          {{*Cont:*}} $user{'name'};
        }
        #name3 {
          {{*CONT:*}} $user{'name'};
        }
    jstl: |
        #name1 {
          {{*cont:*}} user.name;
        }
        #name2 {
          {{*Cont:*}} user.name;
        }
        #name3 {
          {{*CONT:*}} user.name;
        }

  expected*:
    eruby: |
        <p>{{*<%= user[:name] %>*}}</p>
        <p>{{*<%=h user[:name] %>*}}</p>
        <p>{{*<%= user[:name] %>*}}</p>
    php: |
        <p>{{*<?php echo $user['name']; ?>*}}</p>
        <p>{{*<?php echo htmlspecialchars($user['name']); ?>*}}</p>
        <p>{{*<?php echo $user['name']; ?>*}}</p>
    eperl: |
        <p>{{*<?= $user{'name'} !>*}}</p>
        <p>{{*<?= encode_entities($user{'name'}) !>*}}</p>
        <p>{{*<?= $user{'name'} !>*}}</p>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p>{{*${user.name}*}}</p>
        <p>{{*${user.name}*}}</p>
        <p>{{*<c:out value="${user.name}" escapeXml="false"/>*}}</p>

##
- name:   value
  title:  value, Value, VALUE
  desc: |
        {{,value:,}}, {{,Value:,}}, and {{,VALUE:,}} properties replaces the element
        with expression value.
	These are the same as {{,cont:,}}, {{,Cont:,}}, and {{,CONT:,}} properties
	respectively.

  pdata: |
        <p id="mark:name1">aaa</p>
        <p id="mark:name2">bbb</p>
        <p id="mark:name3">ccc</p>

  plogic*:
    eruby: |
        #name1 {
          {{*value:*}} user[:name];
        }
        #name2 {
          {{*Value:*}} user[:name];
        }
        #name3 {
          {{*VALUE:*}} user[:name];
        }
    php: |
        #name1 {
          {{*value:*}} $user['name'];
        }
        #name2 {
          {{*Value:*}} $user['name'];
        }
        #name3 {
          {{*VALUE:*}} $user['name'];
        }
    eperl: |
        #name1 {
          {{*value:*}} $user{'name'};
        }
        #name2 {
          {{*Value:*}} $user{'name'};
        }
        #name3 {
          {{*VALUE:*}} $user{'name'};
        }
    jstl: |
        #name1 {
          {{*value:*}} user.name;
        }
        #name2 {
          {{*Value:*}} user.name;
        }
        #name3 {
          {{*VALUE:*}} user.name;
        }

  expected*:
    eruby: |
        <p>{{*<%= user[:name] %>*}}</p>
        <p>{{*<%=h user[:name] %>*}}</p>
        <p>{{*<%= user[:name] %>*}}</p>
    php: |
        <p>{{*<?php echo $user['name']; ?>*}}</p>
        <p>{{*<?php echo htmlspecialchars($user['name']); ?>*}}</p>
        <p>{{*<?php echo $user['name']; ?>*}}</p>
    eperl: |
        <p>{{*<?= $user{'name'} !>*}}</p>
        <p>{{*<?= encode_entities($user{'name'}) !>*}}</p>
        <p>{{*<?= $user{'name'} !>*}}</p>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p>{{*${user.name}*}}</p>
        <p>{{*${user.name}*}}</p>
        <p>{{*<c:out value="${user.name}" escapeXml="false"/>*}}</p>

##
- name:   stag
  title:  stag, Stag, STAG
  desc: |
        {{,stage:,}}, {{,Stag:,}}, and {{,STAG:,}} properties replaces the start-tag
        with expression value.

        {{,Stag:,}} always escape expression value while {{,STAG:,}} never escape it.
        {{,stag:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
	<a href="#" id="mark:link1"><img src="button1.png"></a>
	<a href="#" id="mark:link2"><img src="button2.png"></a>
	<a href="#" id="mark:link3"><img src="button3.png"></a>

  plogic*:
    eruby: |
        #link1 {
          {{*stag:*}} start_link_to :action=>'list';
        }
        #link2 {
          {{*Stag:*}} start_link_to :action=>'list';
        }
        #link3 {
          {{*STAG:*}} start_link_to :action=>'list';
        }
    php: |
        #link1 {
          {{*stag:*}} start_link_to('list');
        }
        #link2 {
          {{*Stag:*}} start_link_to('list');
        }
        #link3 {
          {{*STAG:*}} start_link_to('list');
        }
    eperl: |
        #link1 {
          {{*stag:*}} start_link_to('list');
        }
        #link2 {
          {{*Stag:*}} start_link_to('list');
        }
        #link3 {
          {{*STAG:*}} start_link_to('list');
        }
    jstl: |
        #link1 {
          {{*stag:*}} fn:start_link_to('list');
        }
        #link2 {
          {{*Stag:*}} fn:start_link_to('list');
        }
        #link3 {
          {{*STAG:*}} fn:start_link_to('list');
        }

  expected*:
    eruby: |
	{{*<%= start_link_to :action=>'list' %>*}}<img src="button1.png"></a>
	{{*<%=h start_link_to :action=>'list' %>*}}<img src="button2.png"></a>
	{{*<%= start_link_to :action=>'list' %>*}}<img src="button3.png"></a>
    php: |
	{{*<?php echo start_link_to('list'); ?>*}}<img src="button1.png"></a>
	{{*<?php echo htmlspecialchars(start_link_to('list')); ?>*}}<img src="button2.png"></a>
	{{*<?php echo start_link_to('list'); ?>*}}<img src="button3.png"></a>
    eperl: |
	{{*<?= start_link_to('list') !>*}}<img src="button1.png"></a>
	{{*<?= encode_entities(start_link_to('list')) !>*}}<img src="button2.png"></a>
	{{*<?= start_link_to('list') !>*}}<img src="button3.png"></a>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	{{*${fn:start_link_to('list')}*}}<img src="button1.png"></a>
	{{*${fn:start_link_to('list')}*}}<img src="button2.png"></a>
	{{*<c:out value="${fn:start_link_to('list')}" escapeXml="false"/>*}}<img src="button3.png"></a>

##
- name:   etag
  title:  etag, Etag, ETAG
  desc: |
        {{,stage:,}}, {{,Etag:,}}, and {{,ETAG:,}} properties replaces the end-tag
        with expression value.

        {{,Etag:,}} always escape expression value while {{,ETAG:,}} never escape it.
        {{,etag:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
	<li id="mark:item1">foo</li>
	<li id="mark:item2">bar</li>
	<li id="mark:item3">baz</li>

  plogic*:
    eruby: |
        #item1 {
          {{*etag:*}} is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} is_xml ? '</li>' : '';
        }
    php: |
        #item1 {
          {{*etag:*}} $is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} $is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} $is_xml ? '</li>' : '';
        }
    eperl: |
        #item1 {
          {{*etag:*}} $is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} $is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} $is_xml ? '</li>' : '';
        }
    jstl: |
        #item1 {
          {{*etag:*}} is_xml ? '</li>' : '';
        }
        #item2 {
          {{*Etag:*}} is_xml ? '</li>' : '';
        }
        #item3 {
          {{*ETAG:*}} is_xml ? '</li>' : '';
        }

  expected*:
    eruby: |
	<li>foo{{*<%= is_xml ? '</li>' : '' %>*}}
	<li>bar{{*<%=h is_xml ? '</li>' : '' %>*}}
	<li>baz{{*<%= is_xml ? '</li>' : '' %>*}}
    php: |
	<li>foo{{*<?php echo $is_xml ? '</li>' : ''; ?>*}}
	<li>bar{{*<?php echo htmlspecialchars($is_xml ? '</li>' : ''); ?>*}}
	<li>baz{{*<?php echo $is_xml ? '</li>' : ''; ?>*}}
    eperl: |
	<li>foo{{*<?= $is_xml ? '</li>' : '' !>*}}
	<li>bar{{*<?= encode_entities($is_xml ? '</li>' : '') !>*}}
	<li>baz{{*<?= $is_xml ? '</li>' : '' !>*}}
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	<li>foo{{*${is_xml ? '</li>' : ''}*}}
	<li>bar{{*${is_xml ? '</li>' : ''}*}}
	<li>baz{{*<c:out value="${is_xml ? '</li>' : ''}" escapeXml="false"/>*}}

##
- name:   attrs
  title:  attrs, Attrs, ATTRS
  desc: |
        {{,attrs:,}}, {{,Attrs:,}}, {{,ATTRS:,}}, property replaces or adds attributes.

        {{,Attrs:,}} always escape expression value while {{,ATTRS:,}} never escape it.
        {{,attrs:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <p id="mark:item" class="para">
          AAA
        </p>

  plogic*:
    eruby: |
        #item {
          {{*attrs:*}} 'class' klass,
                 'style' style;
        }
    php: |
        #item {
          {{*attrs:*}} 'class' $class,
                 'style' $style;
        }
    jstl: |
        #item {
          {{*attrs:*}} 'class' klass,
                 'style' style;
        }
    eperl: |
        #item {
          {{*attrs:*}} 'class' $class,
                 'style' $style;
        }

  expected*:
    eruby: |
        <p {{*class="<%= klass %>"*}} {{*style="<%= style %>"*}}>
          AAA
        </p>
    php: |
        <p {{*class="<?php echo $class; ?>"*}} {{*style="<?php echo $style; ?>"*}}>
          AAA
        </p>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p {{*class="${klass}"*}} {{*style="${style}"*}}>
          AAA
        </p>
    eperl: |
        <p {{*class="<?= $class !>"*}} {{*style="<?= $style !>"*}}>
          AAA
        </p>

  postscript: |
        Notice that the follwing will be parse error
        because Kwartz parses {{,attrs:,}} property with pattern matching.

        .--------------------
        #foo {
          attrs: 'class' klass, 'style' style;
        }
        .--------------------

##
- name:   append
  title:  append, Append, APPEND
  desc: |
        {{,append:,}}, {{,Append:,}}, {{,APPEND:,}} directive appends
        expressions to the start tag.

        {{,Append:,}} always escape expression value while {{,APPEND:,}} never escape it.
        {{,append:,}} escapes when command-line option '-e' is specified or
        configuration option 'PROPERTY_ESCAPE' is ture.

  pdata: |
        <input type="checkboxk" id="mark:remember" value="y">Remeber me

  plogic*:
    eruby: |
        #remember {
          {{*append:*}} flag ? ' checked' : '';
        }
    php: |
        #remember {
          {{*append:*}} $flag ? ' checked' : '';
        }
    jstl: |
        #remember {
          {{*append:*}} flag ? ' checked' : '';
        }
    eperl: |
        #remember {
          {{*append:*}} $flag ? ' checked' : '';
        }

  expected*:
    eruby: |
        <input type="checkboxk" value="y"{{*<%= flag ? ' checked' : '' %>*}}>Remeber me
    php: |
        <input type="checkboxk" value="y"{{*<?php echo $flag ? ' checked' : ''; ?>*}}>Remeber me
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <input type="checkboxk" value="y"{{*${flag ? ' checked' : ''}*}}>Remeber me
    eperl: |
        <input type="checkboxk" value="y"{{*<?= $flag ? ' checked' : '' !>*}}>Remeber me


  postscript: |
        The following is an example to append several expressions.

        .--------------------
        #remember {
          append:  expr1,
                   expr2,
                   expr3;
        }
        .--------------------

        Notice that the following will be parse error.

        .--------------------
        #remember {
          append:  expr1, expr2, expr3;
        }
        .--------------------

##
- name:   remove
  title:  remove
  common:  yes
  desc: |
        {{,remove:,}} property removes attributes.

  pdata: |
        <p id="foo" class="paragraph" style="color: red">
         AAA
        </p>

  plogic*:
    eruby: &remove_pdata |
        #foo {
          {{*remove:*}} 'id', 'style';
        }
    php: *remove_pdata
    jstl: *remove_pdata
    eperl: *remove_pdata

  expected*:
    eruby: &remove_expected |
        <p class="paragraph">
         AAA
        </p>
    php:   *remove_expected
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <p class="paragraph">
         AAA
        </p>
    eperl: *remove_expected


##
- name:   logic
  title:  logic
  desc: |
        {{,logic:,}} property represents the presentation logic body of the element.
        In the {{,logic:,}} property, the folllowings are available.
        .[ {{,_elem,}} ]
		represents the element
        .[ {{,_stag,}} ]
		represents start-tag of the element
        .[ {{,_cont,}} ]
		represents content of the element
        .[ {{,_stag,}} ]
		represents end-tag of the element
        .[ {{,_element({{/name/}}),}} ]
		represents the other element marked as {{/name/}}.
        .[ {{,_content({{/name/}}),}} ]
		represents the content of other element marked as {{/name/}}.

        In the {{,logic:,}} property, it is able to write statements in target language
        (Ruby, PHP, Java, Perl, and so on).

  pdata: |
        <ul>
          <li id="mark:items">AAA</li>
        </ul>

  plogic*:
    eruby: |
        #items {
          value: item;
          {{*logic:*}} {
            @list.each do |item|
              {{*_stag*}}
              {{*_cont*}}
              {{*_etag*}}
            end
          }
        }
    php: |
        #items {
          value: $item;
          {{*logic:*}} {
            foreach ($list as $item) {
              {{*_stag();*}}
              {{*_cont();*}}
              {{*_etag();*}}
            }
          }
        }
    jstl: |
        #items {
          value: item;
          {{*logic:*}} {
            <c:forEach var="item" items="${list}">
              {{*_stag();*}}
              {{*_cont();*}}
              {{*_etag();*}}
            </c:forEach>
          }
        }
    eperl: |
        #items {
          value: $item;
          {{*logic:*}} {
            foreach ($item in @list) {
              {{*_stag();*}}
              {{*_cont();*}}
              {{*_etag();*}}
            }
          }
        }

  expected*:
    eruby: |
        <ul>
        {{*<%     @list.each do |item| %>*}}
          <li><%= item %></li>
        {{*<%     end %>*}}
        </ul>
    php: |
        <ul>
        {{*<?php     foreach ($list as $item) { ?>*}}
          <li><?php echo $item; ?></li>
        {{*<?php     } ?>*}}
        </ul>
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
        <ul>
            {{*<c:forEach var="item" items="${list}">*}}
          <li>${item}</li>
            {{*</c:forEach>*}}
        </ul>
    eperl: |
        <ul>
        {{*<?     foreach ($item in @list) { !>*}}
          <li><?= $item !></li>
        {{*<?     } !>*}}
        </ul>

##
- name:   begin
  title:  begin, end
  desc: |
        {{,begin:,}} and {{,end:,}} property represents the prework and postwork
	of document respectively.
	These properties takes target code block and are available only with
	'#DOCUMENT' selector.

  pdata: |
        <p>Hello <span id="mark:username">world</span>!</p>
	<ul>
	 <li id="mark:menu">menu item</li>
	</ul>

  plogic*:
    eruby: |
        #DOCUMENT {
	  {{*begin:*}} {
	    username = @context[:username]
	    menulist = @context[:menulist]
	  }
	  {{*end:*}} {
	    print "<!-- document end -->\n"

	  }
	}
	#username {
	  value:  username;
	}
	#menu {
	  value: menu;
	  logic: {
	    for menu in menulist
	      _elem
	    end
	  }
	}
    php: |
        #DOCUMENT {
	  {{*begin:*}} {
	    $username = $context['username'];
	    $menulist = $context['menulist'];
	  }
	  {{*end:*}} {
	    print("<!-- document end -->\n");

	  }
	}
	#username {
	  value:  $username;
	}
	#menu {
	  value: $menu;
	  logic: {
	    foreach ($menulist as $menu) {
	      _elem();
	    }
	  }
	}
    jstl: |
        #DOCUMENT {
	  {{*begin:*}} {
	    <c:set var="username" value="${context.username}"/>
	    <c:set var="menulist" value="${context.menulist}"/>
	  }
	  {{*end:*}} {
	    <c:out value="<!-- document end -->\n"/>
	  }
	}
	#username {
	  value:  username;
	}
	#menu {
	  value:  menu;
	  logic: {
	    <c:forEach var="menu" items="${menulist}">
	      _elem();
	    </c:forEach>
	  }
	}
    eperl: |
        #DOCUMENT {
	  {{*begin:*}} {
	    $username = $context{'username'};
	    @menulist = $context{'menulist'};
	  }
	  {{*end:*}} {
	    print("<!-- document end -->\n");

	  }
	}
	#username {
	  value:  $username;
	}
	#menu {
	  value: $menu;
	  logic: {
	    foreach ($menu in @menulist) {
	      _elem();
	    }
	  }
	}

  expected*:
    eruby: |-
	{{*<%     username = @context[:username] %>*}}
	{{*<%     menulist = @context[:menulist] %>*}}
	<p>Hello <span><%= username %></span>!</p>
        <ul>
        <%     for menu in menulist %>
         <li><%= menu %></li>
        <%     end %>
        </ul>
	{{*<%= "<!-- document end -->\n" %>*}}

    php: |-
        {{*<?php     $username = $context['username']; ?>*}}
        {{*<?php     $menulist = $context['menulist']; ?>*}}
	<p>Hello <span><?php echo $username; ?></span>!</p>
        <ul>
        <?php     foreach ($menulist as $menu) { ?>
         <li><?php echo $menu; ?></li>
        <?php     } ?>
        </ul>
	{{*<?php echo "<!-- document end -->\n"; ?>*}}
    jstl: |
        <%@ taglib prefix="c"  uri="http://java.sun.com/jsp/jstl/core" %>
        <%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
            {{*<c:set var="username" value="${context.username}"/>*}}
            {{*<c:set var="menulist" value="${context.menulist}"/>*}}
	<p>Hello <span>${username}</span>!</p>
        <ul>
            <c:forEach var="menu" items="${menulist}">
         <li>${menu}</li>
            </c:forEach>
        </ul>
	    {{*<c:out value="<!-- document end -->\n"/>*}}
    eperl: |-
	{{*<?     $username = $context{'username'}; !>*}}
	{{*<?     @menulist = $context{'menulist'}; !>*}}
	<p>Hello <span><?= $username !></span>!</p>
        <ul>
        <?     foreach ($menu in @menulist) { !>
         <li><?= $menu !></li>
        <?     } !>
        </ul>
	{{*<?= "<!-- document end -->\n" !>*}}
