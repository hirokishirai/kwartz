
●ElementRulesetとDocumentRuleset

  * 両者をRulesetクラスに統一する？
    - クラスを分ける必然性があまりない
    - parserが面倒をみてくれればそれでよい
    - begin/end をElementRulesetにも加えるなら、統一したほうがよい


●分割Ruleset

  * Rulesetを分割して定義できるようにする？
    - declarationをあとから追加できるようにする
    - 'logic:' は共通化するけど 'value:' は別々、という場合が考えられる。
      ----------
      #list1, #list2 {
        logic: {
	  @list.each do |item|
	    _elem
	  end
	}
      }
      #list1 {
        value: item.name;
      }
      #list2 {
        value: item.password;
      }
      ----------
  * 現在の実装は、marked nameごとに1つのRulesetという前提。
    - name => [ruleset] という関係にするか、
    - ruleset.merge(other_ruleset) を実装するのか
  * 'begin:' と 'end:' をElement Rulesetにも追加すると、便利
    ----------
    #list1, #list2 {
      logic: {
        list.each do |item|
	  _elem
	end
      }
    }
    #list1 {
      begin: {
        list = @list1
      }
    }
    #list2 {
      begin: {
        list = @list2
      }
    }
    ----------


●プレゼンテーションパターン

  * 名前を変えるべき？
    - element replacement with expression
    - element replacement with element
    - element replacement with content
    - content replacement with expression
    - content replacement with element
    - content replacement with content
    - element iteration
    - content iteration
    - element deletion
    - content deletion
    - tag deletion


●Rule

  * CSS2のspecificationによると、
    - 「#foo」はselector
    - 「color: red」はdeclaration
    - 「#foo { color: red }」はruleset
    というらしい。

    .? CSS2構文定義より
    --------------------
    stylesheet  : [ CDO | CDC | S | statement ]*;
    statement   : ruleset | at-rule;
    at-rule     : ATKEYWORD S* any* [ block | ';' S* ];
    block       : '{' S* [ any | block | ATKEYWORD S* | ';' ]* '}' S*;
    ruleset     : selector? '{' S* declaration? [ ';' S* declaration? ]* '}' S*;
    selector    : any+;
    declaration : property ':' S* value;
    property    : IDENT S*;
    value       : [ any | block | ATKEYWORD S* ]+;
    any         : [ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
                  | DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
                  | FUNCTION | DASHMATCH | '(' any* ')' | '[' any* ']' ] S*;
    --------------------


●ディレクティブ用タグ

  * ディレクティブのタグ名
    - id
    - title
    - kw:d
  * titleをtitleとして使いたい場合が面倒


●begin/end

  * 現在は before/after
    --------------------
    #DOCUMENT {
      before: {
        ...
      }
      after: {
        ...
      }
    }
    --------------------
  * これを begin/end に戻すか？
    --------------------
    #DOCUMENT {
      begin: {
        ...
      }
      end: {
        ...
      }
    }
    --------------------
  * Ruby style parserではBEGIN/ENDのほうがよい？
    --------------------
    BEGIN {
      ...
    }
    END {
      ...
    }
    --------------------


●print文

  * 「logic: { ... }」の中にprint文が書けるようにしたい


●コメント

  * 「value: expr; /* コメント */」がsyntax error にならないようにしたい
  


●auto form

  * start_form_tag から end_form_tag までにある<input>や<select>や<textarea>を
    認識して、自動的に<%= text_field %>や<%= select %>に変換する。
  * Nirvanaと同じようなもん。
  * <form action="new" title="rails::autoform">
  * <a href="rails::/controller/new"></a>

  * <input>タグの情報を読み取って、勝手に設定？
  * formはblockか？


●@import

  * import path
  * recursive importの検出
    - 一度importしたものは再度importされないようにする？
  * RubyStyleParserでは require かそれともloadか？


●同名のruleset

  * 同名のrulesetが見つかったとき、どうするか？
    - #DOCUMENTは追加
    - #nameは上書き


●エラー表示

  * parser と converter とでエラー行表示が異なる
  * エラーになったファイル名が表示されない
    - parserではファイル名を保持していない！
  * 使われていないidを警告表示する
    - elementとrulesetの両方
    - id名のtypoを見つけるため
    - '-wc' オプションで表示するとか
  


●directiveの名前

  * elem:     elementをexprの値で置き換える
  * stag:     stagをexprの値で置き換える
  * etag:     etagをexprの値で置き換える
  * cont:     contentをexprの値で置き換える
  * value:    contentをexprの値で置き換える
  * replace:  そのelementを別のelement/contentで置き換える
  * placeholder: conetntを別のelement/contentで置き換える

  * replace: を replace-element-by:, placeholder: を replace-content-by: にしたら？
    - replace-element-by: expr(expr)	  replace-element-by-expr
    - replace-element-by: element(id)	  replace-element-by-element
    - replace-element-by: content(id)	  replace-element-by-content
    - replace-content-by: expr(expr)	  replace-content-by-expr
    - replace-content-by: element(id)	  replace-content-by-element
    - replace-content-by: content(id)	  replace-content-by-content

  * 「elem:」は「elementを式の値で置き換える」という意味で、「_elem」が「そのエレメント」を表すのは不自然か？

  * 
  

●link_to

  * link_to では、ラベルの文字列がpdataとplogicのそれぞれに現れるため、DRYに反する。
    ----------
    <a href="#" title="id: link_to1">click here</a>

    #link_to1 {
      elem:  link_to "click here", :action=>'show', :id=>1;
    }
    ----------

  * これを避けるには、終了タグまで表示するlink_toではなく、開始タグだけを表示するstart_link_toが必要。
    ----------
    <a href="#" title="id: link_to1">click here</a>

    #link_to1 {
      stag:  start_link_to :action=>'show', :id=>1;
           # または anchor :action=>'show', :id=>1
    }
    ----------

  * あるいは、「$(CONTENT)」でcontentを参照できるとか。
    ----------
    #link_to1 {
      stag:  link_to '$(CONTENT)', :action=>'show', :id=>1;
    }
    ----------

  * link_to_if(condition, name, options) を考えると、$(CONTENT)をサポートしたほうがよさそう。


●submit_to

  * submit_toではvalue属性の値が2度出てくる。
    ----------
    <input type="submit" value="OK">
    
    #submit {
      elem:  submit_to "OK";
    }
    ----------

  * これを解決するには属性の値を参照できないといけない？
    ----------
    #submit {
      elem:  sumib_to "$(value)";
    }
    ----------


●XML宣言

  * XML宣言のlangを変えたいという話。テンプレートではlangを固定で指定する。
    ----------
    <?xml version="1.0" lang="EUC-JP"?>
    <html>
    </html>
    ----------
    ----------
    #XMLDECL {
      attr: 'lang' lang;
    }
    ----------
