
precooking: |
  def find_junit_jar()
    junit_jar = "/usr/local/java/j2sdk/jre/lib/ext/junit.jar"
    junit_jar = "/usr/local/java/junit/junit.jar" unless test(?f, junit_jar)
    junit_jar = "./lib/junit.jar" unless test(?f, junit_jar)
    junit_jar
  end

  def get_test_classes(test_path, ruby_path)
    eruby_files = Dir.glob("#{ruby_path}/*.eruby")
    test_names = array_delete_suffix(array_basenames(eruby_files))
    #test_names = eruby_files.basenames.delete_suffix
    #test_names = eruby_files.collect { |f| File.basename(f).gsub(/\.eruby$/, '') }
    test_names << test_names.delete('KwartzTest') if test_names.include?('KwartzTest')
    return array_sandwich(test_names, test_path+'/', '.class')
    #return test_names.sandwich(text_path+'/', '.class')
    #return test_names.collect { |t| "#{test_path}/#{t}.class" }
  end


properties:
  - name:  release
    expr:  "('$Release 0.0.0 $' =~ /[\.\d]+/) && $&"
    desc:  release version
  - { name: source,     value: kwartz-java.rb }
  - { name: package,    value: kwartz }
  - { name: pkg_path,   expr:  "$package.gsub(/\./, '/')" }
  - { name: src_root,   value: src/main/java }
  - { name: test_root,  value: src/test/java }
  - { name: src_path,   value: $(src_root)/$(pkg_path) }
  - { name: test_path,  value: $(test_root)/$(pkg_path) }
  - { name: ruby_path,  value: src/test/ruby }
  - { name: compiledir, value: compile }
  - { name: copyright,  value: copyright(c) 2005 kuwata-lab.com all rights reserved }
  - { name: junit_jar,  expr:  find_junit_jar() }
  - { name: sep,        expr:  'RUBY_PLATFORM =~ /cygwin/ ? ";" : ":"' }
  - { name: classpath,  value: $(compiledir)$(sep)$(src_root)$(sep)$(test_root)$(sep)$(junit_jar) }
 #- { name: classpath,  expr: '[$compiledir, $src_root, $test_root, $junit_jar].join($sep)' }
 #- { name: classpath,  value: $(src_root)$(sep)$(test_root)$(sep)$(junit_jar) }
 #- { name: classpath,  expr:  'get_classpath([$src_root, $test_root, $junit_jar], $sep)' }
  - name:  jikes_pedantic_options
    value: [
	       #"+Pmodifier-order",
	       #"+Predundant-modifiers",
	       #"+Pserial",
	        "+Pshadow",
	        "+Pswitchcheck",
	       #"+Pnaming-convention",
	       #"+Peffective-java",
	        "+Punused-type-imports",
	        "+Punused-package-imports"
	    ]
  - { name: jikes_pedantic_optstr, expr: '$jikes_pedantic_options.join(" ")' }
  - { name: jikes_option, value: "-classpath '$(classpath)' $(jikes_pedantic_optstr)" }
  #- name: eruby_files
  #  expr: 'Dir.glob("#{$ruby_path}/*.eruby")'
  #  #expr: 'Dir.glob("$(ruby_path)/*.eruby")'
  #- name: test_names
  #  expr: $eruby_files.collect{|f| File.basename(f).gsub(/\.eruby$/, '')}
  #- name: test_classes
  #  expr: '$test_names.collect{|t| "#{$test_path}/#{t}.class"}'
  #  #expr: '$test_names.collect{|t| "#{$test_path}/#{t}.class"}'
  #  #ruby: '$test_names.collect{|t| "#{$test_path}/#{t}.class"}'
  - { name: test_classes,  expr: 'get_test_classes($test_path, $ruby_path)' }
  - name: text_files
    value: [README.txt, COPYING, todo.txt, build.xml]



recipes:
  - product:	:all
    desc:	compile and test
    ingreds:	[ :compile, :test ]

  - product:	:compile
    desc:	compile all java files
    method: |
        dir = '$(compiledir)'
	rm_rf dir if test(?d, dir)
	mkdir dir
	sys  "jikes -d #{dir} $(jikes_option) $(src_root)/*/*.java $(src_root)/*/*/*.java"
	files = Dir.glob("$(src_root)/**/*.properties")
	cp files, "#{dir}/$(package)" if files && !files.empty?

  - product:	:test
    desc:	unit test
    ingreds:	[ :compile, $(test_classes) ]
    method: |
	#sys "jikes -classpath '$(classpath)' $(test_path)/*.java"
	sys "java  -classpath '$(classpath)' $(package).KwartzTest 2>&1 | tee test.log"
	#sys "java -classpath '$(classpath)' junit.textui.TestRunner #{$test_classes.join(' ')} 2>&1 | tee test.log"


  - product:	:clean
    method: |
        rm_f "$(src_path)/**/*.class", "$(test_path)/**/*.class"


  - product:   :clear
    ingreds:   [ :clean ]
    method: |
	rm_rf '$(compiledir)', "$(test_path)/**/*.java"


  - product:   :release
    method: |
      unless $release.nil? || $release == '0.0.0'
        rook "kwartz-#{$release}.jar"
        rook "kwartz-java_#{$release}.zip"
      end


  - product:	kwartz*.jar
    desc:	generate jar file
    ingreds:	[ :compile ]
    method: |
	chdir $compiledir do
	    sys "jar cf #{@product} */*.class */*/*.class */*.properties "
	end
	mv "$(compiledir)/#{@product}", "."


  - product:	$(test_path)/*.java
    ingreds:	[ $(ruby_path)/$(1).yaml, $(ruby_path)/$(1).eruby ]
    method: |
	sys "ruby $(ruby_path)/createst.rb #{@ingred} > #{@product}"


  - product:	$(test_path)/*Test.class
    ingreds:	[ $(test_path)/$(1)Test.java ]
    method: |
	sys "jikes $(jikes_option) #{@ingred}"


  - product:	'*Test'
    ingreds:	[ $(test_path)/$(1)Test.class ]
    method: |
	#klass = "#{@matches[1]}Test"
	#java_file = "$(test_path)/#{klass}.java"
	#yaml_file = "$(ruby_path)/#{klass}.yaml"
	#sys "ruby $(ruby_path)/createst.rb #{yaml_file} > #{java_file}"
	#sys "jikes $(jikes_option) #{java_file}"
	sys "java -classpath '$(classpath)' -ea junit.textui.TestRunner $(package).$(1)Test"

  - product:  kwartz-java_*.zip
    desc:     generate kwartz-java_*.zip
    ingreds:  [ kwartz-$(1).jar ]
    coprods:  [ kwartz-java_$(1).tar.bz2 ]
    method: |
	## jar file
	#jarfile = "kwartz-#{@matches[1]}.jar"
	#jarfile = "kwartz.jar"
	jarfile = @ingreds[0]
	
	## delete archives
	zipfile = @product
	tarfile = @coprods[0]
	rm_f zipfile, tarfile if test(?f, zipfile) || test(?f, tarfile)
	
	## mkdir
	release = @matches[1]
	#dir = "kwartz-java_#{release}"
	dir = @product.sub(/\.zip$/, '')
	rm_rf dir if test(?d, dir)
	mkdir_p dir
	
	## copy files
	chdir "examples" do cmd "rook :clear build.xml" end
	store "examples/*/*.{java,html,plogic,xml}", dir
	store $text_files, dir
	mv jarfile, dir
	store "src/**/*.{java,properties}", "src/**/*.{eruby,yaml,rb}", dir
	
	## remove files
	#list = []
	#list.concat Dir.glob("#{dir}/examples/**/Rookbook")
	#list.concat Dir.glob("#{dir}/examples/**/build.kwaff")
	#remove list
	
	## edit $Release$ and $Copyright$
	edit "#{dir}/**/*" do |content, filename|
	  File.chmod(0644, filename)
	  unless filename =~ /\.jar$/
	    content.gsub!(/\$Release.*?\$/, "$Release: #{release} $")
	    content.gsub!(/\$Copyright\$/,  $copyright)
	    if jarfile != 'kwartz.jar' && filename =~ /\/build.xml$/
	      content.gsub!(/\bkwartz.jar\b/, jarfile)
	    end
	  end
	  content
	end
	
	## archive
	zip_r   zipfile, dir
	tar_cjf tarfile, dir
