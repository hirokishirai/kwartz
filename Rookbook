
desc    "compile and test"
recipe  :all		, :compile, :test


source    = "kwartz-java.rb"
package   = "kwartz"
src_root  = "src/main/java"
test_root = "src/test/java"
src_path  = src_root  + "/" + package.gsub(/\./, '/')
test_path = test_root + "/" + package.gsub(/\./, '/')
ruby_path = "src/test/ruby"

junit_jar = "/usr/local/java/j2sdk/jre/lib/ext/junit.jar"
junit_jar = "/usr/local/java/junit/junit.jar" unless test(?f, junit_jar)
junit_jar = "./lib/junit.jar" unless test(?f, junit_jar)

sep = RUBY_PLATFORM =~ /cygwin/ ? ';' : ':'
classpath = [src_root, test_root, junit_jar].join(sep)


jikes_pedantic_options = [
#       "+Pmodifier-order",
#       "+Predundant-modifiers",
#       "+Pserial",
        "+Pshadow",
        "+Pswitchcheck",
#       "+Pnaming-convention",
#       "+Peffective-java",
        "+Punused-type-imports",
        "+Punused-package-imports",
        ]
jikes_option = "-classpath '#{classpath}' #{jikes_pedantic_options.join(' ')}"


desc	"create *.java and compile them"
recipe  :compile			do |r|
	#cmd "ruby #{source}"
	cmd "jikes #{jikes_option} #{src_path}/*.java #{src_path}/*/*.java"
    end


test_names = Dir.glob("#{ruby_path}/*.eruby").collect{|f| File.basename(f).gsub(/\.eruby$/, '')}
test_classes = test_names.collect{|t| "#{test_path}/#{t}.class"}

desc	"unit test"
recipe  :test		, :compile, test_classes	do |r|
	cmd "jikes -classpath '#{classpath}' #{test_path}/*.java"
	cmd "java  -classpath '#{classpath}' #{package}.KwartzTest 2>&1 | tee test.log"
	#cmd "java -classpath '#{classpath}' junit.textui.TestRunner #{test_names.collect{|t| "kwartz.#{t}"}.join(" ")} 2>&1 | tee test.log"
    end

recipe :clean				do |r|
	list = []
	list.concat Dir.glob("#{src_path}/**/*.class")
	list.concat Dir.glob("#{test_path}/**/*.class")
        remove list
    end

recipe :clear				do |r|
	list = []
	list.concat Dir.glob("#{src_path}/**/*.class")
	#list.concat Dir.glob("#{src_path}/*.java")
	#list.concat Dir.glob("#{src_path}/*.properties")
	list.concat Dir.glob("#{test_path}/**/*.class")
	list.concat Dir.glob("#{test_path}/**/*.java")
	remove list
    end

grecipe "kwartz-*.jar"		, :compile		do |r|
	chdir "src/java" do
	    cmd "jar cf ../../#{r.product} com/kuwata_lab/kwartz/kwartz.properties com/kuwata_lab/kwartz/*.class"
	end
	#move "src/java/kwartz-{1}.jar", "."
    end


grecipe "#{test_path}/*.java"		, "#{ruby_path}/{1}.yaml", "#{ruby_path}/{1}.eruby" do |r|
	cmd "ruby #{ruby_path}/createst.rb #{r.ingred} > #{r.product}"
    end

grecipe "#{test_path}/*Test.class"	, "#{test_path}/{1}Test.java"	do |r|
	cmd "jikes #{jikes_option} #{test_path}/{1}Test.java"
    end

grecipe "*Test",	"#{test_path}/{1}Test.class"		do |r|
	#klass = "#{m[1]}Test"
	#java_file = "#{test_path}/#{klass}.java"
	#yaml_file = "#{ruby_path}/#{klass}.yaml"
	#cmd "ruby #{ruby_path}/createst.rb #{yaml_file} > #{java_file}"
	#cmd "jikes #{jikes_option} #{java_file}"
	cmd "java -classpath '#{classpath}' -ea junit.textui.TestRunner #{package}.{1}Test"
    end


#text_files = %w[ChangeLog README.txt COPYING todo.txt]
text_files = %w[README.txt COPYING todo.txt]

grecipe "kwartz-java_*.{tar.gz|tar.bz2|zip}"	, "kwartz-{1}.jar"  do |r|
	#dir = r.product.gsub(/\.zip$/, '')
	dir = r.product.gsub("\.#{m[2]}", '')
	rm_rf dir if test(?d, dir)
	mkdir_p dir
	#copy "kwartz-{1}.jar", dir
	#copy [text_files], dir
	chdir "examples" do cmd "rook :clear build.xml" end
	store "examples/**/*", text_files, dir
	move  "kwartz-{1}.jar", dir
	store "src/**/*.java", "src/**/*.properties", dir
	list = []
	list.concat Dir.glob("#{dir}/examples/**/Rookbook")
	list.concat Dir.glob("#{dir}/examples/**/build.kwaff")
	remove list
	Dir.glob("#{dir}/**/*").each do |filename|
	   next unless test(?f, filename)
	   next if filename =~ /\.jar$/
	   File.open(filename, "r+") do |f|
	      s = f.read()
	      s.gsub!(/\$Release.*?\$/, "$Release: #{m[1]} $")
	      s.gsub!(/\$Copyright\$/,  "copyright(c) 2005 kuwata-lab.com all rights reserved")
	      if filename =~ /\bbuild\.xml\z/
	         s.sub!(/value="\.\.\/\.\.\/src\/java"/, "value=\"../../kwartz-#{m[1]}.jar\"")
	      end
	      f.rewind()
	      f.truncate(0)
	      f.write(s)
	   end
	end
	case m[2]
	when "tar.gz"
	   cmd "tar czf #{r.product} #{dir}"
	when "tar.bz2"
	   cmd "tar cjf #{r.product} #{dir}"
	when "zip"
	   cmd "zip -qr9 #{r.product} #{dir}"
	end
	
    end
