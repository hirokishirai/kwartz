#!/usr/local/bin/php -q
<?php
// vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4:

//
// kwartz-php -- a template system for PHP, Ruby and Java.
//
// Type 'php kwartz.php --help' for help. 
//
// $Id$
//
// Copyright (C) 2004 kuwata-lab All rights reserved.
//

/*
 * Development of Kwartz-php is subsidized by Exploratory Software Project of
 * IPA (Information-Technology Promotion Agency Japan).
 * See http://www.ipa.go.jp/about/english/index.html for details about IPA.
 */

/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

require_once('Kwartz.php');

//namespace Kwartz {

class KwartzCommandOptionError extends KwartzError {
    function __construct($msg) {
        parent::__construct($msg, NULL, NULL);
    }
}

class KwartzCommand {
    // constants
    const REVISION   = '$Rev$';
    const LASTUPDATE = '$Date$';
    
    // instance vars
    private $args;
    private $command_name;
    private $options = array();
    private $toppings = array();
    
    // headers
    public $headers = array(
        // jstl 1.1
        'jstl11' => 
'<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
',
        // jstl 1.0
        'jstl10' =>
'<%@ taglib prefix="c" uri="http://java.sun.com/jstl/core" %>
',
        );
    
    // for test
    function _args() { return $this->args; }
    function _command_name() { return $this->command_name; }
    function _options() { return $this->options; }
    function _toppings() { return $this->toppings; }
    
    // constructor
    function __construct(&$args) {
        $this->args = $args;
        //$this->command_name = $command_name;
    }
    
    // instance methods
    function main() {
        // parse $args and set $command_name, $options and $toppings
        $this->parse_args($this->args);
        
        //echo "*** debug: this->options=", var_dump($this->options);
        //echo "*** debug: this->toppigns=", var_dump($this->toppings);
        //echo "*** debug: this->args=", var_dump($this->args);
        
        // print usage/version message
        $flag_exit = FALSE;
        if ($this->option('h')) {
            $flag_exit = TRUE;
            echo $this->usage();
        }
        if ($this->option('v')) {
            $flag_exit = TRUE;
            echo $this->version();
        }
        if ($flag_exit) {
            return;
        }
        
        // check language
        if ($lang = $this->option('l')) {
            if (!array_key_exists($lang, KwartzCommand::$translator_classnames)) {
                $msg = "'$lang': unsupported language name.";
                throw new KwartzCommandOptionError($msg);
            }
        } else {
            $lang = 'php';
        }
        
        // flag escape
        $flag_escape = ($this->option('s') || $this->option('e') || $this->topping('escape'));
        
        // topping handler
        $this->handle_toppings();
        
        // determine which action to do (default: 'compile')
        $action = $this->option('a') ? $this->option('a') : 'compile';
        
        // presentation logic filenames
        $plogic_filenames = NULL;
        if ($this->option('p')) {
            $plogic_filenames = preg_split('/,/', $this->option('p'));
        }
        
        // input filenames
        if (count($this->args) == 0) {
            $input_filenames = NULL;		// read stdin
        } else {
            $input_filenames = $this->args;
        }
        
        // do action
        $output = $this->do_action($action, $input_filenames, $plogic_filenames, $lang, $flag_escape, $this->toppings);
        return $output;
    }
    

    static $translator_classnames = array(
        'php'    => 'KwartzPhpTranslator',
        'eruby'  => 'KwartzErubyTranslator',
        'erb'    => 'KwartzErbTranslator',
        'jstl11' => 'KwartzJstl11Translator',
        'jstl10' => 'KwartzJstl10Translator',
        'plphp'  => 'KwartzPlphpTranslator',
        );
    
    function do_action(&$action, &$input_filenames, &$plogic_filenames, $lang, $flag_escape=FALSE, $toppings=NULL) {
        // file existence check
        if ($input_filenames) {
            foreach ($input_filenames as $filename) {
                if (! file_exists($filename)) {
                    $msg = "'$filename': not found.";
                    throw new KwartzCommandOptionError($msg);
                }
            }
        } else {
            $input_filenames = array('php://stdin');
        }
        if ($plogic_filenames) {
            foreach ($plogic_filenames as $filename) {
                if (! file_exists($filename)) {
                    $msg = "'$filename': not found.";
                    throw new KwartzCommandOptionError($msg);
                }
            }
        }
        
        // perform action
        $output = '';
        switch ($action) {
          case 'scan':
            foreach ($input_filenames as $filename) {
                $input = file_get_contents($filename);
                $toppings['filename'] = $filename;
                $scanner = new KwartzScanner($input, $toppings);
                $output .= $scanner->scan_all();
            }
            break;
            
          case 'parse':
            foreach ($input_filenames as $filename) {
                $input = file_get_contents($filename);
                $toppings['filename'] = $filename;
                $parser = new KwartzParser($input, $toppings);
                $block  = $parser->parse();
                $output .= $block->inspect();
            }
            break;
            
          case '_convert':
            foreach ($input_filenames as $filename) {
                $input = file_get_contents($filename);
                $toppings['filename'] = $filename;
                $converter = new KwartzConverter($input, $toppings);
                $block = $converter->convert();
                $output .= $block->inspect();
            }
            break;
            
          case 'convert':
            foreach ($input_filenames as $filename) {
                $input = file_get_contents($filename);
                $toppings['filename'] = $filename;
                $converter = new KwartzConverter($input, $toppings);
                $block = $converter->convert();
                $translator = new KwartzPlphpTranslator($block, $flag_escape, $toppings);
                $output .= $translator->translate();
            }
            break;
            
          case 'translate':
            $block = NULL;
            foreach ($input_filenames as $filename) {
                $input = file_get_contents($filename);
                $toppings['filename'] = $filename;
                $parser = new KwartzParser($input, $toppings);
                $block2 = $parser->parse();
                $block = $block == NULL ? $block2 : $block->merge($block2);
            }
            $classname = KwartzCommand::$translator_classnames[$lang];
            $translator = new $classname($block, $flag_escape, $toppings);
            $output = $translator->translate();
            break;
            
          case 'compile':
          case 'analyze':
            $blocks = array();
            foreach ($input_filenames as $filename) {
                $input = file_get_contents($filename);
                $toppings['filename'] = $filename;
                $converter = new KwartzConverter($input, $toppings);
                $block = $converter->convert();
                $blocks[] = $block;
            }
            if ($plogic_filenames) {
                foreach ($plogic_filenames as $filename) {
                    $plogic = file_get_contents($filename);
                    $toppings['filename'] = $filename;
                    $parser = new KwartzParser($plogic, $toppings);
                    $block = $parser->parse();
                    $blocks[] = $block;
                }
            }
            $merged_block = NULL;
            foreach ($blocks as $block) {
                $merged_block = $merged_block == NULL ? $block : $merged_block->merge($block);
            }
            unset($toppings['filename']);
            
            $block = $merged_block;
            // analyze
            if ($action == 'analyze') {
                $analyzer = new KwartzAnalyzer($block, $toppings);
                $analyzer->analyze();
                $output = $analyzer->result();
                break;
            }
            // compile
            if (preg_match('/^jstl\d?\d?/', $lang)) {
                $newline = kwartz_detect_newline_char($input);
                if (! $newline) {
                    $newline = "\n";
                }
                if ($charset = $this->topping('charset')) {
                    $output .= "<%@ page contentType=\"text/html; charset=$charset\" %>$newline";
                }
                if ($this->has_topping('header')) {
                    $output .= $this->topping('header');
                } else {
                    //assert(array_key_exists($lang, $this->headers));
                    $output .= preg_replace('/\n/', $newline, $this->headers[$lang]);
                }
            } else {
                if ($this->has_topping('header')) {
                    $output .= $this->topping('header');
                }
            }
            $classname = KwartzCommand::$translator_classnames[$lang];
            $translator = new $classname($block, $flag_escape, $toppings);
            $output .= $translator->translate();
            break;
            
          default:
            $msg = "'{$action}': invalid action name.";
            throw new KwartzCommandOptionError($msg);
        }
        return $output;
    }
    
    
    function option($key) {
        if (array_key_exists($key, $this->options)) {
            return $this->options[$key];
        }
        return NULL;
    }
    
    function topping($key) {
        if (array_key_exists($key, $this->toppings)) {
            return $this->toppings[$key];
        }
        return NULL;
    }
    
    function set_topping($key, $value) {
        $this->toppings[$key] = $value;
    }
    
    function has_topping($key) {
        return array_key_exists($key, $this->toppings);
    }
    
    function handle_toppings() {
        // inclde_path, load_path
        if ($s = $this->topping('include-path')) {
            $this->set_topping('include-path', preg_split('/,/', $s));
        }
        if ($s = $this->topping('load-path')) {
            $this->set_topping('load-path', preg_split('/,/', $s));
        }
        
        // indent width
        if (! $this->has_topping('indent-width')) {
            $indent_width = $this->option('i');
            if ($indent_width !== NULL && $indent_width !== TRUE) {
                $indent_width = 0 + $indent_width;
                $this->set_topping('indent-width', $indent_width);
            }
        }
    }
    
    
    function usage() {
        $usage = <<<END
Usage: {$this->command_name} [-p file.plogic] [..options..] file.html
  -h, --help     : help
  -v             : version
  -p file.plogic : presentation logic file
  -l lang        : php/eruby/erb/jstl11/jstl10 (default 'php')
  -a action      : compile/parse/translate/convert/analyze (default 'compile')
  -e, -s         : escape(sanitize) (this is equivarent to '--escape=true')
  --escape=true  : escape(sanitize)
  --header=text  : header text (default '<%@ taglib ...>' when jstl11/jstl10)
  --footer=text  : footer text
  --charset=name : add '<%@ page contenType="text/html; charset=name" %>'
  --indent-width=N  : indent width
  --even-value=str  : even value of toggle in FOREACH & LOOP directive
  --odd-value=str   : odd value of toggle in FOREACH & LOOP directive
  --include-path=dir1,dir2,... : path list for 'include' directive
  --load-path=dir1,dir2,...    : path list for 'load' directive
  --delete-idattr=true         : delete or leave id attributes
  --attr-name=name             : attribute name of directive (default 'kd')
  --php-attr-name=name         : attribute name of directive (default 'kd:php')

END;
    return $usage;
}
    
    function version() {
        $s = '';
        $filename = basename(__FILE__);
        $version = $this->_version_match(KwartzCommand::REVISION, KwartzCommand::LASTUPDATE);
        $s .= "$filename: $version";
        $filename = 'Kwartz.php';
        $version = $this->_version_match(Kwartz::REVISION, Kwartz::LASTUPDATE);
        $s .= ", $filename: $version\n";
        return $s;
    }
    
    private function _version_match($revision_str, $date_str) {
        preg_match('/Rev:\s*(\d+)/', $revision_str, $m=array());
        $revision = $m[1];
        preg_match('/\d+-\d\d-\d\d\s*\d\d:\d\d:\d\d/', $date_str, $m=array());
        $lastupdate = $m[0];
        return "$revision ($lastupdate)";
    }
    
    
    //
    // parse command options  and toppings
    //
    function parse_args(&$args=NULL, $noarg="hvse", $argrequired="apl", $argoptional="i") {
        if ($args === NULL) {
            $args =& $this->args;
        }
        // assert(count($args) > 0));
        $this->command_name = basename(array_shift($args));
        $error_msg = NULL;
        while (count($args) > 0 && $args[0][0] == '-') {
            $optstr = substr(array_shift($args), 1);
            
            // parse toppings
            if ($optstr[0] == '-') {
                if ($optstr == '-help') {	# --help
                    $this->options['h'] = TRUE;
                } elseif (preg_match('/^-([-\w]+)(?:=(.*))?/', $optstr, $m = array())) {
                    $key   = $m[1];
                    $value = $m[2];
                    if ($value === NULL) {
                        $value = TRUE;
                    } else {
                        switch ($value) {
                          case 'true':  $value = TRUE;   break;
                          case 'false': $value = FALSE;  break;
                          case 'null':  $value = NULL;   break;
                          default:
                        }
                    }
                    $key = preg_replace('/_/', '-', $key);
                    $this->toppings[$key] = $value;
                } else {
                    $error_msg = "'-${optstr}': invalid option.";
                    throw new KwartzCommandOptionError($error_msg);
                }
                continue;
            }
           
            // parse command options
            while ($optstr) {
                $optch = $optstr[0];
                $optstr = substr($optstr, 1);
                if (strpos($noarg, $optch) !== FALSE) {
                    $this->options[$optch] = TRUE;
                } elseif (strpos($argrequired, $optch) !== FALSE) {
                    $arg = $optstr ? $optstr : array_shift($args);
                    if ($arg === NULL) {
                        $error_msg = "-${optch}: argument required.";
                    } else {
                        $this->options[$optch] = $arg;
                    }
                    break;
                } elseif (strpos($argoptional, $optch) !== FALSE) {
                    $this->options[$optch] = $optstr == NULL ? TRUE : $optstr;
                    break;
                } else {
                    $error_msg = "'-${optch}${optstr}': invalid option.";
                    break;
                }
            }
            if ($error_msg) {
                throw new KwartzCommandOptionError($error_msg);
            }
        }  // end of while
    }  // end of function
    
}  // end of class KwartzCommand


//}  // end of namespace Kwartz


//
// main program
//
if (basename(__FILE__) == basename($argv[0])) {
    try {
        $kwartz = new KwartzCommand($argv);
        echo $kwartz->main();
    } catch (KwartzError $ex) {
        //fwrite(STDERR, "ERROR: " . $ex->getMessage() . "\n");
        $stderr = fopen("php://stderr", "r");
        fwrite($stderr, "ERROR: " . $ex->getMessage() . "\n");
        fclose($stderr);
        exit(1);
    }
    exit(0);
}
?>